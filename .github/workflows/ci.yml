name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # Stay on the oldest Ubuntu version that's still supported by Github Actions
        # to avoid glibc incompatibilities as far as possible.
        os: [macos-latest, ubuntu-20.04, windows-latest, macos-arm]
        ocaml_compiler: [4.14.0]

    runs-on: ${{matrix.os}}

    env:
      OCAMLRUNPARAM: b

    steps:
      - name: "Windows: Set git to use LF"
        if: runner.os == 'Windows'
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Use OCaml ${{matrix.ocaml_compiler}}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{matrix.ocaml_compiler}}
          opam-pin: false
          opam-depext: false

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: NPM install
        run: opam exec -- npm ci
        env:
          RESCRIPT_FORCE_REBUILD: 1

      - name: Run tests
        if: runner.os != 'Windows'
        run: opam exec -- node scripts/ciTest.js -all

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        run: opam exec -- node scripts/ciTest.js -mocha -theme -format

      - name: Get artifact info
        id: get_artifact_info
        run: node .github/workflows/get_artifact_info.js

      - name: "Upload artifacts: binaries"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.get_artifact_info.outputs.artifact_name }}
          path: ${{ steps.get_artifact_info.outputs.artifact_path }}

      - name: "Upload artifacts: lib/ocaml"
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: lib-ocaml
          path: lib/ocaml

      # Important: the ninja build must run after the artifact upload because for some reason
      # the bsc.exe created by the ninja build does not find the Pervasives module.
      # So this is run here just to test the normal dev workflow, too.
      - name: ninja config
        if: runner.os != 'Windows'
        run: opam exec -- node ./scripts/ninja.js config

      - name: ninja build
        if: runner.os != 'Windows'
        run: opam exec -- node ./scripts/ninja.js build

      - name: Check for changes in lib folder
        run: git diff --exit-code lib/js lib/es6

  package:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: NPM install
        run: npm ci --ignore-scripts

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Move artifacts
        run: ./scripts/moveArtifacts.sh

      - name: Create ninja.tar.gz
        run: git -C ninja archive --format=tar.gz HEAD -o ../vendor/ninja.tar.gz

      - name: Check artifact list
        run: node ./scripts/makeArtifactList.js -check

      - name: npm pack (rescript)
        run: npm pack

      - name: Copy JS files to stdlib package
        run: mkdir -p packages/std/lib && cp -R lib/es6 lib/js packages/std/lib

      - name: npm pack (@rescript/std)
        run: npm pack
        working-directory: packages/std

      - name: Get package info
        id: get_package_info
        # For pull requests, pass the correct commit SHA explicitly as GITHUB_SHA points to the wrong commit.
        run: node .github/workflows/get_package_info.js ${{ github.event.pull_request.head.sha }}

      - name: "Upload artifact: npm packages"
        uses: actions/upload-artifact@v3
        with:
          name: npm-packages
          path: |
            ${{ steps.get_package_info.outputs.rescript_package }}
            ${{ steps.get_package_info.outputs.stdlib_package }}

  installationTest:
    needs: package
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest, macos-arm]

    runs-on: ${{matrix.os}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: npm-packages
          path: packages/test

      - name: Install ReScript package
        run: npm i rescript-10*.tgz
        shell: bash
        working-directory: packages/test

      - name: Test installation
        run: npx rescript -h && npx rescript build && cat src/Test.bs.js
        shell: bash
        working-directory: packages/test

  # The following job tests installation from source on FreeBSD via cross-platform-actions.
  # Disabled by default, as it takes ~11m.
  # Can be enabled temporarily in a PR to verify that installation from source
  # on an "exotic" platform still works.
  #
  # installationTestFreeBSD:
  #   needs: package
  #   runs-on: macos-latest
  #
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: npm-packages
  #         path: packages/test
  #
  #     - name: Test installation on FreeBSD
  #       uses: cross-platform-actions/action@v0.6.2
  #       with:
  #         operating_system: freebsd
  #         version: "13.0"
  #         shell: bash
  #         run: cd packages/test && ./test_freebsd.sh
