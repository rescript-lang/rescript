// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

let Belt_List = require("rescript/lib/js/belt_List.js");
let Primitive_exceptions = require("rescript/lib/js/primitive_exceptions.js");

let Foo = /* @__PURE__ */Primitive_exceptions.create("Gpr_1701_test.Foo");

function test(n) {
  if (n === 0) {
    throw {
      RE_EXN_ID: Foo,
      Error: new Error()
    };
  }
  try {
    return test(n - 1 | 0);
  } catch (raw_exn) {
    let exn = Primitive_exceptions.internalToException(raw_exn);
    if (exn.RE_EXN_ID === Foo) {
      return;
    }
    throw exn;
  }
}

test(100);

function read_lines(inc) {
  let _acc = /* [] */0;
  while (true) {
    let acc = _acc;
    let l;
    try {
      l = input_line(inc);
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID === "End_of_file") {
        l = undefined;
      } else {
        throw exn;
      }
    }
    if (l === undefined) {
      return Belt_List.reverse(acc);
    }
    _acc = {
      hd: l,
      tl: acc
    };
    continue;
  };
}

function read_lines2(inc) {
  let _acc = /* [] */0;
  while (true) {
    let acc = _acc;
    let l;
    try {
      l = input_line(inc);
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID === "End_of_file") {
        return Belt_List.reverse(acc);
      }
      throw exn;
    }
    _acc = {
      hd: l,
      tl: acc
    };
    continue;
  };
}

function read_lines3(inc) {
  let loop = acc => {
    try {
      let l = input_line(inc);
      return loop({
        hd: l,
        tl: acc
      });
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID === "End_of_file") {
        return Belt_List.reverse(acc);
      }
      throw exn;
    }
  };
  return loop(/* [] */0);
}

function fff(f, x) {
  try {
    return fff(f, x);
  } catch (exn) {
    return x + 1 | 0;
  }
}

exports.Foo = Foo;
exports.test = test;
exports.read_lines = read_lines;
exports.read_lines2 = read_lines2;
exports.read_lines3 = read_lines3;
exports.fff = fff;
/*  Not a pure module */
