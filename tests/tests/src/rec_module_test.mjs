// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mt from "./mt.mjs";
import * as Primitive_module from "rescript/lib/es6/Primitive_module.js";

let A = Primitive_module.init([
  "rec_module_test.res",
  3,
  4
], {
  TAG: "Module",
  _0: [[
      "Function",
      "even"
    ]]
});

let B = Primitive_module.init([
  "rec_module_test.res",
  15,
  4
], {
  TAG: "Module",
  _0: [[
      "Function",
      "odd"
    ]]
});

function even(n) {
  if (n === 0) {
    return true;
  } else if (n === 1) {
    return false;
  } else {
    return B.odd(n - 1 | 0);
  }
}

Primitive_module.update({
  TAG: "Module",
  _0: [[
      "Function",
      "even"
    ]]
}, A, {
  even: even
});

function odd(n) {
  if (n === 1) {
    return true;
  } else if (n === 0) {
    return false;
  } else {
    return A.even(n - 1 | 0);
  }
}

Primitive_module.update({
  TAG: "Module",
  _0: [[
      "Function",
      "odd"
    ]]
}, B, {
  odd: odd
});

let AA = Primitive_module.init([
  "rec_module_test.res",
  29,
  4
], {
  TAG: "Module",
  _0: [
    [
      "Function",
      "even"
    ],
    [
      "Function",
      "x"
    ]
  ]
});

let BB = Primitive_module.init([
  "rec_module_test.res",
  43,
  4
], {
  TAG: "Module",
  _0: [
    [
      "Function",
      "odd"
    ],
    [
      "Function",
      "y"
    ]
  ]
});

function even$1(n) {
  if (n === 0) {
    return true;
  } else if (n === 1) {
    return false;
  } else {
    return BB.odd(n - 1 | 0);
  }
}

function x() {
  return BB.y() + 3 | 0;
}

Primitive_module.update({
  TAG: "Module",
  _0: [
    [
      "Function",
      "even"
    ],
    [
      "Function",
      "x"
    ]
  ]
}, AA, {
  even: even$1,
  x: x
});

function odd$1(n) {
  if (n === 1) {
    return true;
  } else if (n === 0) {
    return false;
  } else {
    return AA.even(n - 1 | 0);
  }
}

function y() {
  return 32;
}

Primitive_module.update({
  TAG: "Module",
  _0: [
    [
      "Function",
      "odd"
    ],
    [
      "Function",
      "y"
    ]
  ]
}, BB, {
  odd: odd$1,
  y: y
});

let Even = {};

let Odd = {};

let suites_0 = [
  "test1",
  param => ({
    TAG: "Eq",
    _0: [
      true,
      true,
      false,
      false
    ],
    _1: [
      A.even(2),
      AA.even(4),
      B.odd(2),
      BB.odd(4)
    ]
  })
];

let suites_1 = {
  hd: [
    "test2",
    param => ({
      TAG: "Eq",
      _0: BB.y(),
      _1: 32
    })
  ],
  tl: {
    hd: [
      "test3",
      param => ({
        TAG: "Eq",
        _0: AA.x(),
        _1: 35
      })
    ],
    tl: {
      hd: [
        "test4",
        param => ({
          TAG: "Eq",
          _0: true,
          _1: A.even(2)
        })
      ],
      tl: {
        hd: [
          "test4",
          param => ({
            TAG: "Eq",
            _0: true,
            _1: AA.even(4)
          })
        ],
        tl: {
          hd: [
            "test5",
            param => ({
              TAG: "Eq",
              _0: false,
              _1: B.odd(2)
            })
          ],
          tl: /* [] */0
        }
      }
    }
  }
};

let suites = {
  hd: suites_0,
  tl: suites_1
};

Mt.from_pair_suites("Rec_module_test", suites);

export {
  A,
  B,
  AA,
  BB,
  Even,
  Odd,
  suites,
}
/* A Not a pure module */
