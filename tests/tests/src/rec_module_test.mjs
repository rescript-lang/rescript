// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mocha from "mocha";
import * as Test_utils from "./test_utils.mjs";
import * as Primitive_module from "@rescript/runtime/lib/es6/Primitive_module.js";

let A = Primitive_module.init([
  "rec_module_test.res",
  6,
  4
], {
  TAG: "Module",
  _0: [[
      "Function",
      "even"
    ]]
});

let B = Primitive_module.init([
  "rec_module_test.res",
  18,
  4
], {
  TAG: "Module",
  _0: [[
      "Function",
      "odd"
    ]]
});

function even(n) {
  if (n === 0) {
    return true;
  } else if (n === 1) {
    return false;
  } else {
    return B.odd(n - 1 | 0);
  }
}

Primitive_module.update({
  TAG: "Module",
  _0: [[
      "Function",
      "even"
    ]]
}, A, {
  even: even
});

function odd(n) {
  if (n === 1) {
    return true;
  } else if (n === 0) {
    return false;
  } else {
    return A.even(n - 1 | 0);
  }
}

Primitive_module.update({
  TAG: "Module",
  _0: [[
      "Function",
      "odd"
    ]]
}, B, {
  odd: odd
});

let AA = Primitive_module.init([
  "rec_module_test.res",
  32,
  4
], {
  TAG: "Module",
  _0: [
    [
      "Function",
      "even"
    ],
    [
      "Function",
      "x"
    ]
  ]
});

let BB = Primitive_module.init([
  "rec_module_test.res",
  46,
  4
], {
  TAG: "Module",
  _0: [
    [
      "Function",
      "odd"
    ],
    [
      "Function",
      "y"
    ]
  ]
});

function even$1(n) {
  if (n === 0) {
    return true;
  } else if (n === 1) {
    return false;
  } else {
    return BB.odd(n - 1 | 0);
  }
}

function x() {
  return BB.y() + 3 | 0;
}

Primitive_module.update({
  TAG: "Module",
  _0: [
    [
      "Function",
      "even"
    ],
    [
      "Function",
      "x"
    ]
  ]
}, AA, {
  even: even$1,
  x: x
});

function odd$1(n) {
  if (n === 1) {
    return true;
  } else if (n === 0) {
    return false;
  } else {
    return AA.even(n - 1 | 0);
  }
}

function y() {
  return 32;
}

Primitive_module.update({
  TAG: "Module",
  _0: [
    [
      "Function",
      "odd"
    ],
    [
      "Function",
      "y"
    ]
  ]
}, BB, {
  odd: odd$1,
  y: y
});

let Even = {};

let Odd = {};

Mocha.describe("Rec_module_test", () => {
  Mocha.test("test1", () => Test_utils.eq("File \"rec_module_test.res\", line 71, characters 7-14", [
    true,
    true,
    false,
    false
  ], [
    A.even(2),
    AA.even(4),
    B.odd(2),
    BB.odd(4)
  ]));
  Mocha.test("test2", () => Test_utils.eq("File \"rec_module_test.res\", line 75, characters 7-14", BB.y(), 32));
  Mocha.test("test3", () => Test_utils.eq("File \"rec_module_test.res\", line 79, characters 7-14", AA.x(), 35));
  Mocha.test("test4 - A.even", () => Test_utils.eq("File \"rec_module_test.res\", line 83, characters 7-14", true, A.even(2)));
  Mocha.test("test4 - AA.even", () => Test_utils.eq("File \"rec_module_test.res\", line 87, characters 7-14", true, AA.even(4)));
  Mocha.test("test5", () => Test_utils.eq("File \"rec_module_test.res\", line 91, characters 7-14", false, B.odd(2)));
});

export {
  A,
  B,
  AA,
  BB,
  Even,
  Odd,
}
/* A Not a pure module */
