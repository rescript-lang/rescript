// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

let Mt = require("./mt.js");
let Mt_global = require("./mt_global.js");
let Primitive_bigint = require("rescript/lib/js/primitive_bigint.js");
let Primitive_object = require("rescript/lib/js/primitive_object.js");

let test_id = {
  contents: 0
};

let suites = {
  contents: /* [] */0
};

function eq(loc, x, y) {
  Mt_global.collect_eq(test_id, suites, loc, x, y);
}

function approx(loc, x, y) {
  Mt_global.collect_approx(test_id, suites, loc, x, y);
}

let bigint_compare = Primitive_bigint.compare;

let generic_compare = Primitive_object.compare;

function bigint_equal(x, y) {
  return x === y;
}

let generic_equal = Primitive_object.equal;

function bigint_notequal(x, y) {
  return x !== y;
}

let generic_notequal = Primitive_object.notequal;

function bigint_lessthan(x, y) {
  return x < y;
}

let generic_lessthan = Primitive_object.lessthan;

function bigint_greaterthan(x, y) {
  return x > y;
}

let generic_greaterthan = Primitive_object.greaterthan;

function bigint_lessequal(x, y) {
  return x <= y;
}

let generic_lessequal = Primitive_object.lessequal;

function bigint_greaterequal(x, y) {
  return x >= y;
}

let generic_greaterequal = Primitive_object.greaterequal;

function bigint_land(prim0, prim1) {
  return prim0 & prim1;
}

function bigint_lor(prim0, prim1) {
  return prim0 | prim1;
}

function bigint_lxor(prim0, prim1) {
  return prim0 ^ prim1;
}

function bigint_lsl(prim0, prim1) {
  return (prim0 << prim1);
}

function bigint_asr(prim0, prim1) {
  return (prim0 >> prim1);
}

eq("File \"bigint_test.res\", line 26, characters 5-12", Primitive_bigint.compare(1n, 1n), 0);

eq("File \"bigint_test.res\", line 27, characters 5-12", Primitive_object.compare(1n, 1n), 0);

eq("File \"bigint_test.res\", line 28, characters 5-12", Primitive_bigint.compare(-0n, -1n), 1);

eq("File \"bigint_test.res\", line 29, characters 5-12", Primitive_object.compare(-0n, -1n), 1);

eq("File \"bigint_test.res\", line 30, characters 5-12", Primitive_bigint.compare(0n, -1n), 1);

eq("File \"bigint_test.res\", line 31, characters 5-12", Primitive_object.compare(0n, -1n), 1);

eq("File \"bigint_test.res\", line 32, characters 5-12", Primitive_bigint.compare(1n, 2n), -1);

eq("File \"bigint_test.res\", line 33, characters 5-12", Primitive_object.compare(1n, 2n), -1);

eq("File \"bigint_test.res\", line 34, characters 5-12", Primitive_bigint.compare(1n, 2n), -1);

eq("File \"bigint_test.res\", line 35, characters 5-12", Primitive_object.compare(1n, 2n), -1);

eq("File \"bigint_test.res\", line 36, characters 5-12", Primitive_bigint.compare(1n, 1n), 0);

eq("File \"bigint_test.res\", line 37, characters 5-12", Primitive_object.compare(1n, 1n), 0);

eq("File \"bigint_test.res\", line 39, characters 4-11", true, true);

eq("File \"bigint_test.res\", line 47, characters 4-11", Primitive_object.equal(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000n, 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000n), true);

eq("File \"bigint_test.res\", line 55, characters 4-11", false, false);

eq("File \"bigint_test.res\", line 63, characters 4-11", Primitive_object.equal(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000n, 1000000000000000000000000000000000000000000000000000000000000000000000000000000000001n), false);

eq("File \"bigint_test.res\", line 71, characters 4-11", false, false);

eq("File \"bigint_test.res\", line 79, characters 4-11", Primitive_object.equal(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000n, -1000000000000000000000000000000000000000000000000000000000000000000000000000000000000n), false);

eq("File \"bigint_test.res\", line 87, characters 4-11", true, true);

eq("File \"bigint_test.res\", line 99, characters 4-11", Primitive_object.equal(3n, 3n), true);

eq("File \"bigint_test.res\", line 111, characters 4-11", true, true);

eq("File \"bigint_test.res\", line 123, characters 4-11", Primitive_object.equal(3n, 3n), true);

eq("File \"bigint_test.res\", line 135, characters 4-11", true, true);

eq("File \"bigint_test.res\", line 147, characters 4-11", Primitive_object.equal(3n, 3n), true);

eq("File \"bigint_test.res\", line 158, characters 5-12", 9n & 1n, 1n);

eq("File \"bigint_test.res\", line 159, characters 5-12", 9n | 1n, 9n);

eq("File \"bigint_test.res\", line 160, characters 5-12", 9n ^ 1n, 8n);

eq("File \"bigint_test.res\", line 161, characters 5-12", (9n << 1n), 18n);

eq("File \"bigint_test.res\", line 162, characters 5-12", (9n << -1n), 4n);

eq("File \"bigint_test.res\", line 163, characters 5-12", (9n >> 1n), 4n);

eq("File \"bigint_test.res\", line 164, characters 5-12", (9n >> -1n), 18n);

eq("File \"bigint_test.res\", line 165, characters 5-12", (-9n >> 1n), -5n);

eq("File \"bigint_test.res\", line 166, characters 5-12", (-9n >> -1n), -18n);

eq("File \"bigint_test.res\", line 167, characters 5-12", 9n > 1n ? 9n : 1n, 9n);

eq("File \"bigint_test.res\", line 168, characters 5-12", 9n < 1n ? 9n : 1n, 1n);

Mt.from_pair_suites("Bigint_test", suites.contents);

exports.test_id = test_id;
exports.suites = suites;
exports.eq = eq;
exports.approx = approx;
exports.bigint_compare = bigint_compare;
exports.generic_compare = generic_compare;
exports.bigint_equal = bigint_equal;
exports.generic_equal = generic_equal;
exports.bigint_notequal = bigint_notequal;
exports.generic_notequal = generic_notequal;
exports.bigint_lessthan = bigint_lessthan;
exports.generic_lessthan = generic_lessthan;
exports.bigint_greaterthan = bigint_greaterthan;
exports.generic_greaterthan = generic_greaterthan;
exports.bigint_lessequal = bigint_lessequal;
exports.generic_lessequal = generic_lessequal;
exports.bigint_greaterequal = bigint_greaterequal;
exports.generic_greaterequal = generic_greaterequal;
exports.bigint_land = bigint_land;
exports.bigint_lor = bigint_lor;
exports.bigint_lxor = bigint_lxor;
exports.bigint_lsl = bigint_lsl;
exports.bigint_asr = bigint_asr;
/*  Not a pure module */
