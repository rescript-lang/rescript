// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

let Mt = require("./mt.js");
let Primitive_module = require("rescript/lib/js/primitive_module.js");

let suites = {
  contents: /* [] */0
};

let test_id = {
  contents: 0
};

function eq(loc, x, y) {
  test_id.contents = test_id.contents + 1 | 0;
  suites.contents = {
    hd: [
      loc + (" id " + test_id.contents.toString()),
      () => ({
        TAG: "Eq",
        _0: x,
        _1: y
      })
    ],
    tl: suites.contents
  };
}

function add(suite) {
  suites.contents = {
    hd: suite,
    tl: suites.contents
  };
}

let Int3 = Primitive_module.init([
  "recursive_module_test.res",
  15,
  4
], {
  TAG: "Module",
  _0: [[
      "Function",
      "u"
    ]]
});

Primitive_module.update({
  TAG: "Module",
  _0: [[
      "Function",
      "u"
    ]]
}, Int3, Int3);

let M = Primitive_module.init([
  "recursive_module_test.res",
  21,
  20
], {
  TAG: "Module",
  _0: [[
      "Function",
      "fact"
    ]]
});

function fact(n) {
  if (n <= 1) {
    return 1;
  } else {
    return Math.imul(n, M.fact(n - 1 | 0));
  }
}

Primitive_module.update({
  TAG: "Module",
  _0: [[
      "Function",
      "fact"
    ]]
}, M, {
  fact: fact
});

let fact$1 = M.fact;

let Fact = {
  M: M,
  fact: fact$1
};

eq("File \"recursive_module_test.res\", line 32, characters 12-19", 120, fact$1(5));

add([
  "File \"recursive_module_test.res\", line 34, characters 14-21",
  () => ({
    TAG: "ThrowAny",
    _0: () => {
      Int3.u(3);
    }
  })
]);

Mt.from_pair_suites("Recursive_module_test", suites.contents);

exports.suites = suites;
exports.test_id = test_id;
exports.eq = eq;
exports.add = add;
exports.Int3 = Int3;
exports.Fact = Fact;
/* Int3 Not a pure module */
