// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Test from "./Test.mjs";
import * as Float from "rescript/lib/es6/Float.js";
import * as Pervasives from "rescript/lib/es6/Pervasives.js";
import * as Primitive_object from "rescript/lib/es6/Primitive_object.js";

let eq = Primitive_object.equal;

Test.run([
  [
    "Core_FloatTests.res",
    3,
    20,
    27
  ],
  "clamp"
], Float.clamp(undefined, undefined, 4.2), eq, 4.2);

Test.run([
  [
    "Core_FloatTests.res",
    4,
    20,
    35
  ],
  "clamp - < min"
], Float.clamp(4.3, undefined, 4.1), eq, 4.3);

Test.run([
  [
    "Core_FloatTests.res",
    5,
    20,
    35
  ],
  "clamp - > min"
], Float.clamp(4.1, undefined, 4.2), eq, 4.2);

Test.run([
  [
    "Core_FloatTests.res",
    6,
    20,
    35
  ],
  "clamp - < max"
], Float.clamp(undefined, 4.3, 4.2), eq, 4.2);

Test.run([
  [
    "Core_FloatTests.res",
    7,
    20,
    35
  ],
  "clamp - > max"
], Float.clamp(undefined, 4.1, 4.2), eq, 4.1);

Test.run([
  [
    "Core_FloatTests.res",
    8,
    20,
    42
  ],
  "clamp - < min, < max"
], Float.clamp(4.3, 4.5, 4.2), eq, 4.3);

Test.run([
  [
    "Core_FloatTests.res",
    9,
    20,
    42
  ],
  "clamp - < min, > max"
], Float.clamp(4.3, 4.1, 4.2), eq, 4.3);

Test.run([
  [
    "Core_FloatTests.res",
    10,
    20,
    42
  ],
  "clamp - > min, < max"
], Float.clamp(4.1, 4.5, 4.2), eq, 4.2);

Test.run([
  [
    "Core_FloatTests.res",
    11,
    20,
    42
  ],
  "clamp - > min, > max"
], Float.clamp(4.1, 4.1, 4.2), eq, 4.1);

Test.run([
  [
    "Core_FloatTests.res",
    12,
    20,
    33
  ],
  "clamp - nan"
], isNaN(Float.clamp(4.1, 4.3, Number.NaN)), eq, true);

Test.run([
  [
    "Core_FloatTests.res",
    13,
    20,
    38
  ],
  "clamp - infinity"
], Float.clamp(4.1, 4.3, Pervasives.infinity), eq, 4.3);

Test.run([
  [
    "Core_FloatTests.res",
    14,
    20,
    39
  ],
  "clamp - -infinity"
], Float.clamp(4.1, 4.3, Pervasives.neg_infinity), eq, 4.1);

Test.run([
  [
    "Core_FloatTests.res",
    15,
    20,
    37
  ],
  "clamp - min nan"
], Float.clamp(Number.NaN, undefined, 4.2), eq, 4.2);

Test.run([
  [
    "Core_FloatTests.res",
    16,
    20,
    37
  ],
  "clamp - max nan"
], Float.clamp(undefined, Number.NaN, 4.2), eq, 4.2);

Test.run([
  [
    "Core_FloatTests.res",
    17,
    20,
    46
  ],
  "clamp - min nan, max nan"
], Float.clamp(Number.NaN, Number.NaN, 4.2), eq, 4.2);

Test.run([
  [
    "Core_FloatTests.res",
    18,
    20,
    42
  ],
  "clamp - min infinity"
], Float.clamp(Pervasives.infinity, undefined, 4.2), eq, Pervasives.infinity);

Test.run([
  [
    "Core_FloatTests.res",
    19,
    20,
    42
  ],
  "clamp - max infinity"
], Float.clamp(undefined, Pervasives.infinity, 4.2), eq, 4.2);

Test.run([
  [
    "Core_FloatTests.res",
    20,
    20,
    43
  ],
  "clamp - min -infinity"
], Float.clamp(Pervasives.neg_infinity, undefined, 4.2), eq, 4.2);

Test.run([
  [
    "Core_FloatTests.res",
    21,
    20,
    43
  ],
  "clamp - max -infinity"
], Float.clamp(undefined, Pervasives.neg_infinity, 4.2), eq, Pervasives.neg_infinity);

Test.run([
  [
    "Core_FloatTests.res",
    23,
    13,
    49
  ],
  "clamp - min infinity, max infinity"
], Float.clamp(Pervasives.infinity, Pervasives.infinity, 4.2), eq, Pervasives.infinity);

Test.run([
  [
    "Core_FloatTests.res",
    29,
    13,
    50
  ],
  "clamp - min -infinity, max infinity"
], Float.clamp(Pervasives.neg_infinity, Pervasives.infinity, 4.2), eq, 4.2);

Test.run([
  [
    "Core_FloatTests.res",
    35,
    13,
    50
  ],
  "clamp - min infinity, max -infinity"
], Float.clamp(Pervasives.infinity, Pervasives.neg_infinity, 4.2), eq, Pervasives.infinity);

Test.run([
  [
    "Core_FloatTests.res",
    41,
    13,
    51
  ],
  "clamp - min -infinity, max -infinity"
], Float.clamp(Pervasives.neg_infinity, Pervasives.neg_infinity, 4.2), eq, Pervasives.neg_infinity);

Test.run([
  [
    "Core_FloatTests.res",
    47,
    20,
    46
  ],
  "Float.equal optimization"
], false, eq, false);

export {
  eq,
}
/*  Not a pure module */
