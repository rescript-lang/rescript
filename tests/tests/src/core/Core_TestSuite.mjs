// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core_IntTests from "./Core_IntTests.mjs";
import * as Core_DictTests from "./Core_DictTests.mjs";
import * as Core_JsonTests from "./Core_JsonTests.mjs";
import * as Core_TestTests from "./Core_TestTests.mjs";
import * as Core_ArrayTests from "./Core_ArrayTests.mjs";
import * as Core_ErrorTests from "./Core_ErrorTests.mjs";
import * as Core_FloatTests from "./Core_FloatTests.mjs";
import * as Core_ObjectTests from "./Core_ObjectTests.mjs";
import * as Core_PromiseTest from "./Core_PromiseTest.mjs";
import * as Core_ResultTests from "./Core_ResultTests.mjs";
import * as Core_IteratorTests from "./Core_IteratorTests.mjs";
import * as Core_NullableTests from "./Core_NullableTests.mjs";
import * as Core_TypedArrayTests from "./Core_TypedArrayTests.mjs";

let bign = Core_TestTests.bign;

let TestError = Core_PromiseTest.TestError;

let fail = Core_PromiseTest.fail;

let equal = Core_PromiseTest.equal;

let Creation = Core_PromiseTest.Creation;

let ThenChaining = Core_PromiseTest.ThenChaining;

let Rejection = Core_PromiseTest.Rejection;

let Catching = Core_PromiseTest.Catching;

let Concurrently = Core_PromiseTest.Concurrently;

let panicTest = Core_ErrorTests.panicTest;

let $$catch = Core_IntTests.$$catch;

let nums = Core_ObjectTests.nums;

let d = Core_ObjectTests.d;

let x = Core_ObjectTests.x;

let mkBig = Core_ObjectTests.mkBig;

let assignOverwritesTarget = Core_ObjectTests.assignOverwritesTarget;

let runGetTest = Core_ObjectTests.runGetTest;

let getSymbolTestWhenExists = Core_ObjectTests.getSymbolTestWhenExists;

let forEachIfOkCallFunction = Core_ResultTests.forEachIfOkCallFunction;

let forEachIfErrorDoNotCallFunction = Core_ResultTests.forEachIfErrorDoNotCallFunction;

let num1 = Core_TypedArrayTests.num1;

let num2 = Core_TypedArrayTests.num2;

let num3 = Core_TypedArrayTests.num3;

let assertTrue = Core_TypedArrayTests.assertTrue;

let assertWillThrow = Core_TypedArrayTests.assertWillThrow;

let areSame = Core_TypedArrayTests.areSame;

let o = Core_TypedArrayTests.o;

let decodeJsonTest = Core_JsonTests.decodeJsonTest;

let shouldHandleNullableValues = Core_NullableTests.shouldHandleNullableValues;

let eq = Core_IteratorTests.eq;

let iterator = Core_IteratorTests.iterator;

let syncResult = Core_IteratorTests.syncResult;

let asyncResult = Core_IteratorTests.asyncResult;

let asyncIterator = Core_IteratorTests.asyncIterator;

export {
  bign,
  TestError,
  fail,
  equal,
  Creation,
  ThenChaining,
  Rejection,
  Catching,
  Concurrently,
  panicTest,
  $$catch,
  nums,
  d,
  x,
  mkBig,
  assignOverwritesTarget,
  runGetTest,
  getSymbolTestWhenExists,
  forEachIfOkCallFunction,
  forEachIfErrorDoNotCallFunction,
  num1,
  num2,
  num3,
  assertTrue,
  assertWillThrow,
  areSame,
  o,
  decodeJsonTest,
  shouldHandleNullableValues,
  eq,
  iterator,
  syncResult,
  asyncResult,
  asyncIterator,
}
/* Core_IntTests Not a pure module */
