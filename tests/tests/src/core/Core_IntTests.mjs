// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Exn from "rescript/lib/es6/Exn.js";
import * as Int from "rescript/lib/es6/Int.js";
import * as Test from "./Test.mjs";
import * as Pervasives from "rescript/lib/es6/Pervasives.js";
import * as Primitive_object from "rescript/lib/es6/Primitive_object.js";
import * as Primitive_exceptions from "rescript/lib/es6/Primitive_exceptions.js";

let eq = Primitive_object.equal;

function $$catch(f) {
  try {
    f();
    return Pervasives.failwith("no exception raised");
  } catch (raw_err) {
    let err = Primitive_exceptions.internalToException(raw_err);
    if (err.RE_EXN_ID === Exn.$$Error) {
      return err._1;
    }
    throw err;
  }
}

Test.run([
  [
    "Core_IntTests.res",
    11,
    20,
    50
  ],
  "range - positive, increasing"
], Int.range(3, 6, undefined), eq, [
  3,
  4,
  5
]);

Test.run([
  [
    "Core_IntTests.res",
    12,
    20,
    50
  ],
  "range - negative, increasing"
], Int.range(-3, -1, undefined), eq, [
  -3,
  -2
]);

Test.run([
  [
    "Core_IntTests.res",
    13,
    20,
    51
  ],
  "range - cross-zero, incresing"
], Int.range(-1, 2, undefined), eq, [
  -1,
  0,
  1
]);

Test.run([
  [
    "Core_IntTests.res",
    14,
    20,
    42
  ],
  "range - start == end"
], Int.range(3, 3, undefined), eq, []);

Test.run([
  [
    "Core_IntTests.res",
    15,
    20,
    50
  ],
  "range - positive, decreasing"
], Int.range(3, 1, undefined), eq, [
  3,
  2
]);

Test.run([
  [
    "Core_IntTests.res",
    16,
    20,
    50
  ],
  "range - negative, decreasing"
], Int.range(-1, -3, undefined), eq, [
  -1,
  -2
]);

Test.run([
  [
    "Core_IntTests.res",
    19,
    13,
    51
  ],
  "range - positive, increasing, step 2"
], Int.range(3, 6, {
  step: 2
}), eq, [
  3,
  5
]);

Test.run([
  [
    "Core_IntTests.res",
    25,
    13,
    51
  ],
  "range + positive, increasing, step 2"
], Int.range(3, 7, {
  step: 2
}), eq, [
  3,
  5
]);

Test.run([
  [
    "Core_IntTests.res",
    31,
    13,
    51
  ],
  "range + positive, increasing, step 2"
], Int.range(3, 8, {
  step: 2
}), eq, [
  3,
  5,
  7
]);

Test.run([
  [
    "Core_IntTests.res",
    37,
    13,
    51
  ],
  "range - negative, increasing, step 2"
], Int.range(-6, -3, {
  step: 2
}), eq, [
  -6,
  -4
]);

Test.run([
  [
    "Core_IntTests.res",
    43,
    13,
    51
  ],
  "range - positive, increasing, step 0"
], $$catch(() => Int.range(3, 6, {
  step: 0
})), eq, new RangeError("Incorrect range arguments"));

Test.run([
  [
    "Core_IntTests.res",
    48,
    20,
    50
  ],
  "range - start == end, step 0"
], Int.range(3, 3, {
  step: 0
}), eq, []);

Test.run([
  [
    "Core_IntTests.res",
    50,
    13,
    52
  ],
  "range + positive, increasing, step -1"
], Int.range(3, 6, {
  step: -1
}), eq, []);

Test.run([
  [
    "Core_IntTests.res",
    56,
    13,
    51
  ],
  "range + positive, decreasing, step 1"
], Int.range(6, 3, {
  step: 1
}), eq, []);

Test.run([
  [
    "Core_IntTests.res",
    62,
    13,
    52
  ],
  "range + positive, decreasing, step -2"
], Int.range(6, 3, {
  step: -2
}), eq, [
  6,
  4
]);

Test.run([
  [
    "Core_IntTests.res",
    68,
    13,
    52
  ],
  "range + positive, increasing, step -2"
], Int.range(6, 2, {
  step: -2
}), eq, [
  6,
  4
]);

Test.run([
  [
    "Core_IntTests.res",
    74,
    13,
    52
  ],
  "range + positive, increasing, step -2"
], Int.range(6, 1, {
  step: -2
}), eq, [
  6,
  4,
  2
]);

Test.run([
  [
    "Core_IntTests.res",
    80,
    13,
    52
  ],
  "range + negative, decreasing, step -2"
], Int.range(-3, -6, {
  step: -2
}), eq, [
  -3,
  -5
]);

Test.run([
  [
    "Core_IntTests.res",
    86,
    13,
    62
  ],
  "range - positive, increasing, step 2, inclusive"
], Int.range(3, 6, {
  step: 2,
  inclusive: true
}), eq, [
  3,
  5
]);

Test.run([
  [
    "Core_IntTests.res",
    92,
    13,
    62
  ],
  "range + positive, increasing, step 2, inclusive"
], Int.range(3, 7, {
  step: 2,
  inclusive: true
}), eq, [
  3,
  5,
  7
]);

Test.run([
  [
    "Core_IntTests.res",
    98,
    13,
    62
  ],
  "range + positive, increasing, step 2, inclusive"
], Int.range(3, 8, {
  step: 2,
  inclusive: true
}), eq, [
  3,
  5,
  7
]);

Test.run([
  [
    "Core_IntTests.res",
    104,
    13,
    62
  ],
  "range - negative, increasing, step 2, inclusive"
], Int.range(-6, -3, {
  step: 2,
  inclusive: true
}), eq, [
  -6,
  -4
]);

Test.run([
  [
    "Core_IntTests.res",
    110,
    13,
    62
  ],
  "range - positive, increasing, step 0, inclusive"
], $$catch(() => Int.range(3, 6, {
  step: 0,
  inclusive: true
})), eq, new RangeError("Incorrect range arguments"));

Test.run([
  [
    "Core_IntTests.res",
    116,
    13,
    54
  ],
  "range - start == end, step 0, inclusive"
], Int.range(3, 3, {
  step: 0,
  inclusive: true
}), eq, [3]);

Test.run([
  [
    "Core_IntTests.res",
    122,
    13,
    63
  ],
  "range + positive, increasing, step -1, inclusive"
], Int.range(3, 6, {
  step: -1,
  inclusive: true
}), eq, []);

Test.run([
  [
    "Core_IntTests.res",
    128,
    13,
    62
  ],
  "range + positive, decreasing, step 1, inclusive"
], Int.range(6, 3, {
  step: 1,
  inclusive: true
}), eq, []);

Test.run([
  [
    "Core_IntTests.res",
    134,
    13,
    63
  ],
  "range + positive, decreasing, step -2, inclusive"
], Int.range(6, 3, {
  step: -2,
  inclusive: true
}), eq, [
  6,
  4
]);

Test.run([
  [
    "Core_IntTests.res",
    140,
    13,
    63
  ],
  "range + positive, increasing, step -2, inclusive"
], Int.range(6, 2, {
  step: -2,
  inclusive: true
}), eq, [
  6,
  4,
  2
]);

Test.run([
  [
    "Core_IntTests.res",
    146,
    13,
    63
  ],
  "range + positive, increasing, step -2, inclusive"
], Int.range(6, 1, {
  step: -2,
  inclusive: true
}), eq, [
  6,
  4,
  2
]);

Test.run([
  [
    "Core_IntTests.res",
    152,
    13,
    63
  ],
  "range + negative, decreasing, step -2, inclusive"
], Int.range(-3, -6, {
  step: -2,
  inclusive: true
}), eq, [
  -3,
  -5
]);

Test.run([
  [
    "Core_IntTests.res",
    158,
    20,
    27
  ],
  "clamp"
], Int.clamp(undefined, undefined, 42), eq, 42);

Test.run([
  [
    "Core_IntTests.res",
    159,
    20,
    35
  ],
  "clamp - < min"
], Int.clamp(50, undefined, 42), eq, 50);

Test.run([
  [
    "Core_IntTests.res",
    160,
    20,
    35
  ],
  "clamp - > min"
], Int.clamp(40, undefined, 42), eq, 42);

Test.run([
  [
    "Core_IntTests.res",
    161,
    20,
    35
  ],
  "clamp - < max"
], Int.clamp(undefined, 50, 42), eq, 42);

Test.run([
  [
    "Core_IntTests.res",
    162,
    20,
    35
  ],
  "clamp - > max"
], Int.clamp(undefined, 40, 42), eq, 40);

Test.run([
  [
    "Core_IntTests.res",
    163,
    20,
    42
  ],
  "clamp - < min, < max"
], Int.clamp(50, 60, 42), eq, 50);

Test.run([
  [
    "Core_IntTests.res",
    164,
    20,
    42
  ],
  "clamp - < min, > max"
], Int.clamp(50, 40, 42), eq, 50);

Test.run([
  [
    "Core_IntTests.res",
    165,
    20,
    42
  ],
  "clamp - > min, < max"
], Int.clamp(40, 60, 42), eq, 42);

Test.run([
  [
    "Core_IntTests.res",
    166,
    20,
    42
  ],
  "clamp - > min, > max"
], Int.clamp(40, 40, 42), eq, 40);

Test.run([
  [
    "Core_IntTests.res",
    168,
    20,
    44
  ],
  "Int.equal optimization"
], false, eq, false);

export {
  eq,
  $$catch,
}
/*  Not a pure module */
