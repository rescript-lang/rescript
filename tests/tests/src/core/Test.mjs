// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Path from "path";
import * as Util from "util";
import * as Option from "rescript/lib/es6/Option.js";
import * as CodeFrame from "@babel/code-frame";

let dirname = (new URL('.', import.meta.url).pathname);

function print(value) {
  let match = typeof value;
  if (match === "object" || match === "bigint") {
    return Util.inspect(value);
  } else if (match === "string") {
    return Option.getExn(JSON.stringify(value), undefined);
  } else {
    return String(value);
  }
}

function run(loc, left, comparator, right) {
  if (comparator(left, right)) {
    return;
  }
  let match = loc[0];
  let line = match[1];
  let file = match[0];
  let fileContent = Fs.readFileSync(Path.join(dirname, file), {
    encoding: "utf-8"
  });
  let left$1 = print(left);
  let right$1 = print(right);
  let codeFrame = CodeFrame.codeFrameColumns(fileContent, {
    start: {
      line: line
    }
  }, {
    highlightCode: true
  });
  let errorMessage = "\n  \u001b[31mTest Failure!\n  \u001b[36m" + file + "\u001b[0m:\u001b[2m" + String(line) + "\n" + codeFrame + "\n  \u001b[39mLeft: \u001b[31m" + left$1 + "\n  \u001b[39mRight: \u001b[31m" + right$1 + "\u001b[0m\n";
  console.log(errorMessage);
  let obj = {};
  Error.captureStackTrace(obj);
  console.log(obj.stack.replace(/\n    /g, "\n  ").replace(/^Error\n/, "").replace(/^.+\n/, "").replace(/\n  at .+\(node:internal.+\n?/g, ""));
}

export {
  dirname,
  print,
  run,
}
/* dirname Not a pure module */
