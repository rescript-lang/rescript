// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Test from "./Test.mjs";
import * as Stdlib_Iterator from "rescript/lib/es6/Stdlib_Iterator.js";
import * as Primitive_object from "rescript/lib/es6/Primitive_object.js";
import * as Stdlib_AsyncIterator from "rescript/lib/es6/Stdlib_AsyncIterator.js";

let eq = Primitive_object.equal;

let iterator = ((() => {
    var array1 = ['a', 'b', 'c'];
    var iterator1 = array1[Symbol.iterator]();
    return iterator1
  })());

let syncResult = {
  contents: undefined
};

Stdlib_Iterator.forEach(iterator, v => {
  if (v === "b") {
    syncResult.contents = "b";
    return;
  }
  
});

Test.run([
  [
    "Core_IteratorTests.res",
    19,
    20,
    34
  ],
  "Sync forEach"
], syncResult.contents, eq, "b");

let asyncIterator = ((() => {
    var map1 = new Map();

    map1.set('first', '1');
    map1.set('second', '2');

    var iterator1 = map1[Symbol.iterator]();
    return iterator1;
  })());

let asyncResult = {
  contents: undefined
};

await Stdlib_AsyncIterator.forEach(asyncIterator, v => {
  if (v !== undefined && v[0] === "second") {
    asyncResult.contents = "second";
    return;
  }
  
});

Test.run([
  [
    "Core_IteratorTests.res",
    42,
    20,
    35
  ],
  "Async forEach"
], asyncResult.contents, eq, "second");

let asyncResult$1 = {
  contents: undefined
};

let count = {
  contents: 0
};

let asyncIterator$1 = Stdlib_AsyncIterator.make(async () => {
  let currentCount = count.contents;
  count.contents = currentCount + 1 | 0;
  if (currentCount === 3) {
    return Stdlib_AsyncIterator.done(currentCount);
  } else {
    return Stdlib_AsyncIterator.value(currentCount);
  }
});

await Stdlib_AsyncIterator.forEach(asyncIterator$1, v => {
  if (v === 3) {
    asyncResult$1.contents = "done";
  } else {
    console.log("next..");
  }
});

Test.run([
  [
    "Core_IteratorTests.res",
    67,
    20,
    54
  ],
  "Creating your own async iterator"
], asyncResult$1.contents, eq, "done");

export {
  eq,
  iterator,
  syncResult,
  asyncResult,
  asyncIterator$1 as asyncIterator,
}
/* iterator Not a pure module */
