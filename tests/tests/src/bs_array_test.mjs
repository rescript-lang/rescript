// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mocha from "mocha";
import * as Belt_List from "@rescript/runtime/lib/es6/Belt_List.js";
import * as Belt_Array from "@rescript/runtime/lib/es6/Belt_Array.js";
import * as Test_utils from "./test_utils.mjs";
import * as Primitive_int from "@rescript/runtime/lib/es6/Primitive_int.js";
import * as Primitive_object from "@rescript/runtime/lib/es6/Primitive_object.js";

function push(prim0, prim1) {
  prim0.push(prim1);
}

console.log([
  1,
  2,
  3,
  4
].filter(x => x > 2).map((x, i) => x + i | 0).reduce((x, y) => x + y | 0, 0));

Mocha.test("bs_array_test_1", () => {
  let v = [
    1,
    2
  ];
  Test_utils.eq("File \"bs_array_test.res\", line 20, characters 4-11", [
    Belt_Array.get(v, 0),
    Belt_Array.get(v, 1),
    Belt_Array.get(v, 2),
    Belt_Array.get(v, 3),
    Belt_Array.get(v, -1)
  ], [
    1,
    2,
    undefined,
    undefined,
    undefined
  ]);
  Test_utils.throws("File \"bs_array_test.res\", line 24, characters 9-16", () => {
    Belt_Array.getExn([
      0,
      1
    ], -1);
  });
  Test_utils.throws("File \"bs_array_test.res\", line 25, characters 9-16", () => {
    Belt_Array.getExn([
      0,
      1
    ], 2);
  });
  let f = extra => Belt_Array.getExn([
    0,
    1
  ], extra);
  Test_utils.ok("File \"bs_array_test.res\", line 27, characters 4-11", Primitive_object.equal([
    f(0),
    f(1)
  ], [
    0,
    1
  ]));
  Test_utils.throws("File \"bs_array_test.res\", line 33, characters 9-16", () => Belt_Array.setExn([
    0,
    1
  ], -1, 0));
  Test_utils.throws("File \"bs_array_test.res\", line 34, characters 9-16", () => Belt_Array.setExn([
    0,
    1
  ], 2, 0));
  Test_utils.ok("File \"bs_array_test.res\", line 35, characters 5-12", !Belt_Array.set([
    1,
    2
  ], 2, 0));
  let v$1 = [
    1,
    2
  ];
  if (!Belt_Array.set(v$1, 0, 0)) {
    throw {
      RE_EXN_ID: "Assert_failure",
      _1: [
        "bs_array_test.res",
        40,
        6
      ],
      Error: new Error()
    };
  }
  Test_utils.ok("File \"bs_array_test.res\", line 37, characters 4-11", Belt_Array.getExn(v$1, 0) === 0);
  let v$2 = [
    1,
    2
  ];
  if (!Belt_Array.set(v$2, 1, 0)) {
    throw {
      RE_EXN_ID: "Assert_failure",
      _1: [
        "bs_array_test.res",
        48,
        6
      ],
      Error: new Error()
    };
  }
  Test_utils.ok("File \"bs_array_test.res\", line 45, characters 4-11", Belt_Array.getExn(v$2, 1) === 0);
  let v$3 = [
    1,
    2
  ];
  Test_utils.ok("File \"bs_array_test.res\", line 53, characters 4-11", (Belt_Array.setExn(v$3, 0, 0), Belt_Array.getExn(v$3, 0) === 0));
  let v$4 = [
    1,
    2
  ];
  Test_utils.ok("File \"bs_array_test.res\", line 61, characters 4-11", (Belt_Array.setExn(v$4, 1, 0), Belt_Array.getExn(v$4, 1) === 0));
});

function add(x, y) {
  return x + y | 0;
}

Mocha.test("bs_array_test_2", () => {
  let v = Belt_Array.makeBy(3000, i => i);
  let u = Belt_Array.shuffle(v);
  Test_utils.ok("File \"bs_array_test.res\", line 74, characters 5-12", u !== v);
  Test_utils.eq("File \"bs_array_test.res\", line 76, characters 5-12", Belt_Array.reduce(u, 0, add), Belt_Array.reduce(v, 0, add));
});

Mocha.test("bs_array_test_3", () => {
  Test_utils.ok("File \"bs_array_test.res\", line 81, characters 5-12", Primitive_object.equal(Belt_Array.range(0, 3), [
    0,
    1,
    2,
    3
  ]));
  Test_utils.ok("File \"bs_array_test.res\", line 82, characters 5-12", Primitive_object.equal(Belt_Array.range(3, 0), []));
  Test_utils.ok("File \"bs_array_test.res\", line 83, characters 5-12", Primitive_object.equal(Belt_Array.range(3, 3), [3]));
  Test_utils.ok("File \"bs_array_test.res\", line 85, characters 5-12", Primitive_object.equal(Belt_Array.rangeBy(0, 10, 3), [
    0,
    3,
    6,
    9
  ]));
  Test_utils.ok("File \"bs_array_test.res\", line 86, characters 5-12", Primitive_object.equal(Belt_Array.rangeBy(0, 12, 3), [
    0,
    3,
    6,
    9,
    12
  ]));
  Test_utils.ok("File \"bs_array_test.res\", line 87, characters 5-12", Primitive_object.equal(Belt_Array.rangeBy(33, 0, 1), []));
  Test_utils.ok("File \"bs_array_test.res\", line 88, characters 5-12", Primitive_object.equal(Belt_Array.rangeBy(33, 0, -1), []));
  Test_utils.ok("File \"bs_array_test.res\", line 89, characters 5-12", Primitive_object.equal(Belt_Array.rangeBy(3, 12, -1), []));
  Test_utils.ok("File \"bs_array_test.res\", line 90, characters 5-12", Primitive_object.equal(Belt_Array.rangeBy(3, 3, 0), []));
  Test_utils.ok("File \"bs_array_test.res\", line 91, characters 5-12", Primitive_object.equal(Belt_Array.rangeBy(3, 3, 1), [3]));
});

Mocha.test("bs_array_test_4", () => {
  Test_utils.eq("File \"bs_array_test.res\", line 95, characters 5-12", Belt_Array.reduceReverse([], 100, (a, b) => a - b | 0), 100);
  Test_utils.eq("File \"bs_array_test.res\", line 96, characters 5-12", Belt_Array.reduceReverse([
    1,
    2
  ], 100, (a, b) => a - b | 0), 97);
  Test_utils.eq("File \"bs_array_test.res\", line 97, characters 5-12", Belt_Array.reduceReverse([
    1,
    2,
    3,
    4
  ], 100, (a, b) => a - b | 0), 90);
  Test_utils.eq("File \"bs_array_test.res\", line 98, characters 5-12", Belt_Array.reduceWithIndex([
    1,
    2,
    3,
    4
  ], 0, (acc, x, i) => (acc + x | 0) + i | 0), 16);
  Test_utils.ok("File \"bs_array_test.res\", line 99, characters 5-12", Belt_Array.reduceReverse2([
    1,
    2,
    3
  ], [
    1,
    2
  ], 0, (acc, x, y) => (acc + x | 0) + y | 0) === 6);
});

function addone(x) {
  return x + 1 | 0;
}

function makeMatrixExn(sx, sy, init) {
  if (!(sx >= 0 && sy >= 0)) {
    throw {
      RE_EXN_ID: "Assert_failure",
      _1: [
        "bs_array_test.res",
        105,
        2
      ],
      Error: new Error()
    };
  }
  let res = new Array(sx);
  for (let x = 0; x < sx; ++x) {
    let initY = new Array(sy);
    for (let y = 0; y < sy; ++y) {
      initY[y] = init;
    }
    res[x] = initY;
  }
  return res;
}

Mocha.test("bs_array_test_make_functions", () => {
  Test_utils.eq("File \"bs_array_test.res\", line 118, characters 5-12", Belt_Array.makeBy(0, param => 1), []);
  Test_utils.eq("File \"bs_array_test.res\", line 119, characters 5-12", Belt_Array.makeBy(3, i => i), [
    0,
    1,
    2
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 120, characters 5-12", makeMatrixExn(3, 4, 1), [
    [
      1,
      1,
      1,
      1
    ],
    [
      1,
      1,
      1,
      1
    ],
    [
      1,
      1,
      1,
      1
    ]
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 121, characters 5-12", makeMatrixExn(3, 0, 0), [
    [],
    [],
    []
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 122, characters 5-12", makeMatrixExn(0, 3, 1), []);
  Test_utils.eq("File \"bs_array_test.res\", line 123, characters 5-12", makeMatrixExn(1, 1, 1), [[1]]);
  Test_utils.eq("File \"bs_array_test.res\", line 124, characters 5-12", [].slice(0), []);
  Test_utils.eq("File \"bs_array_test.res\", line 125, characters 5-12", Belt_Array.map([], prim => prim + 1 | 0), []);
  Test_utils.eq("File \"bs_array_test.res\", line 126, characters 5-12", Belt_Array.mapWithIndex([], add), []);
  Test_utils.eq("File \"bs_array_test.res\", line 127, characters 5-12", Belt_Array.mapWithIndex([
    1,
    2,
    3
  ], add), [
    1,
    3,
    5
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 128, characters 5-12", Belt_List.fromArray([]), /* [] */0);
  Test_utils.eq("File \"bs_array_test.res\", line 129, characters 5-12", Belt_List.fromArray([1]), {
    hd: 1,
    tl: /* [] */0
  });
  Test_utils.eq("File \"bs_array_test.res\", line 130, characters 5-12", Belt_List.fromArray([
    1,
    2,
    3
  ]), {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  });
  Test_utils.eq("File \"bs_array_test.res\", line 131, characters 5-12", Belt_Array.map([
    1,
    2,
    3
  ], prim => prim + 1 | 0), [
    2,
    3,
    4
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 132, characters 5-12", Belt_List.toArray(/* [] */0), []);
  Test_utils.eq("File \"bs_array_test.res\", line 133, characters 5-12", Belt_List.toArray({
    hd: 1,
    tl: /* [] */0
  }), [1]);
  Test_utils.eq("File \"bs_array_test.res\", line 134, characters 5-12", Belt_List.toArray({
    hd: 1,
    tl: {
      hd: 2,
      tl: /* [] */0
    }
  }), [
    1,
    2
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 135, characters 5-12", Belt_List.toArray({
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  }), [
    1,
    2,
    3
  ]);
});

Mocha.test("bs_array_test_keep_functions", () => {
  let v = Belt_Array.makeBy(10, i => i);
  let v0 = Belt_Array.keep(v, x => x % 2 === 0);
  let v1 = Belt_Array.keep(v, x => x % 3 === 0);
  let v2 = Belt_Array.keepMap(v, x => {
    if (x % 2 === 0) {
      return x + 1 | 0;
    }
    
  });
  Test_utils.eq("File \"bs_array_test.res\", line 149, characters 5-12", v0, [
    0,
    2,
    4,
    6,
    8
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 150, characters 5-12", v1, [
    0,
    3,
    6,
    9
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 151, characters 5-12", v2, [
    1,
    3,
    5,
    7,
    9
  ]);
});

Mocha.test("bs_array_test_partition", () => {
  let a = [
    1,
    2,
    3,
    4,
    5
  ];
  let match = Belt_Array.partition(a, x => x % 2 === 0);
  Test_utils.eq("File \"bs_array_test.res\", line 157, characters 5-12", match[0], [
    2,
    4
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 158, characters 5-12", match[1], [
    1,
    3,
    5
  ]);
  let match$1 = Belt_Array.partition(a, x => x === 2);
  Test_utils.eq("File \"bs_array_test.res\", line 160, characters 5-12", match$1[0], [2]);
  Test_utils.eq("File \"bs_array_test.res\", line 161, characters 5-12", match$1[1], [
    1,
    3,
    4,
    5
  ]);
  let match$2 = Belt_Array.partition([], x => false);
  Test_utils.eq("File \"bs_array_test.res\", line 163, characters 5-12", match$2[0], []);
  Test_utils.eq("File \"bs_array_test.res\", line 164, characters 5-12", match$2[1], []);
});

Mocha.test("bs_array_test_slice_functions", () => {
  let a = [
    1,
    2,
    3,
    4,
    5
  ];
  Test_utils.eq("File \"bs_array_test.res\", line 169, characters 5-12", Belt_Array.slice(a, 0, 2), [
    1,
    2
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 170, characters 5-12", Belt_Array.slice(a, 0, 5), [
    1,
    2,
    3,
    4,
    5
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 171, characters 5-12", Belt_Array.slice(a, 0, 15), [
    1,
    2,
    3,
    4,
    5
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 172, characters 5-12", Belt_Array.slice(a, 5, 1), []);
  Test_utils.eq("File \"bs_array_test.res\", line 173, characters 5-12", Belt_Array.slice(a, 4, 1), [5]);
  Test_utils.eq("File \"bs_array_test.res\", line 174, characters 5-12", Belt_Array.slice(a, -1, 1), [5]);
  Test_utils.eq("File \"bs_array_test.res\", line 175, characters 5-12", Belt_Array.slice(a, -1, 2), [5]);
  Test_utils.eq("File \"bs_array_test.res\", line 176, characters 5-12", Belt_Array.slice(a, -2, 1), [4]);
  Test_utils.eq("File \"bs_array_test.res\", line 177, characters 5-12", Belt_Array.slice(a, -2, 2), [
    4,
    5
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 178, characters 5-12", Belt_Array.slice(a, -2, 3), [
    4,
    5
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 179, characters 5-12", Belt_Array.slice(a, -10, 3), [
    1,
    2,
    3
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 180, characters 5-12", Belt_Array.slice(a, -10, 4), [
    1,
    2,
    3,
    4
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 181, characters 5-12", Belt_Array.slice(a, -10, 5), [
    1,
    2,
    3,
    4,
    5
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 182, characters 5-12", Belt_Array.slice(a, -10, 6), [
    1,
    2,
    3,
    4,
    5
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 183, characters 5-12", Belt_Array.slice(a, 0, 0), []);
  Test_utils.eq("File \"bs_array_test.res\", line 184, characters 5-12", Belt_Array.slice(a, 0, -1), []);
});

Mocha.test("bs_array_test_sliceToEnd_functions", () => {
  let a = [
    1,
    2,
    3,
    4,
    5
  ];
  Test_utils.eq("File \"bs_array_test.res\", line 189, characters 5-12", Belt_Array.sliceToEnd(a, 0), [
    1,
    2,
    3,
    4,
    5
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 190, characters 5-12", Belt_Array.sliceToEnd(a, 5), []);
  Test_utils.eq("File \"bs_array_test.res\", line 191, characters 5-12", Belt_Array.sliceToEnd(a, 4), [5]);
  Test_utils.eq("File \"bs_array_test.res\", line 192, characters 5-12", Belt_Array.sliceToEnd(a, -1), [5]);
  Test_utils.eq("File \"bs_array_test.res\", line 193, characters 5-12", Belt_Array.sliceToEnd(a, -2), [
    4,
    5
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 194, characters 5-12", Belt_Array.sliceToEnd(a, -10), [
    1,
    2,
    3,
    4,
    5
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 195, characters 5-12", Belt_Array.sliceToEnd(a, 6), []);
});

Mocha.test("bs_array_test_fill_functions", () => {
  let a = Belt_Array.makeBy(10, x => x);
  Belt_Array.fill(a, 0, 3, 0);
  Test_utils.eq("File \"bs_array_test.res\", line 201, characters 5-12", a.slice(0), [
    0,
    0,
    0,
    3,
    4,
    5,
    6,
    7,
    8,
    9
  ]);
  Belt_Array.fill(a, 2, 8, 1);
  Test_utils.eq("File \"bs_array_test.res\", line 203, characters 5-12", a.slice(0), [
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  ]);
  Belt_Array.fill(a, 8, 1, 9);
  Test_utils.eq("File \"bs_array_test.res\", line 205, characters 5-12", a.slice(0), [
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    9,
    1
  ]);
  Belt_Array.fill(a, 8, 2, 9);
  Test_utils.eq("File \"bs_array_test.res\", line 207, characters 5-12", a.slice(0), [
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    9,
    9
  ]);
  Belt_Array.fill(a, 8, 3, 12);
  Test_utils.eq("File \"bs_array_test.res\", line 209, characters 5-12", a.slice(0), [
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    12,
    12
  ]);
  Belt_Array.fill(a, -2, 3, 11);
  Test_utils.eq("File \"bs_array_test.res\", line 211, characters 5-12", a.slice(0), [
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    11,
    11
  ]);
  Belt_Array.fill(a, -3, 3, 10);
  Test_utils.eq("File \"bs_array_test.res\", line 213, characters 5-12", a.slice(0), [
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    10,
    10,
    10
  ]);
  Belt_Array.fill(a, -3, 1, 7);
  Test_utils.eq("File \"bs_array_test.res\", line 215, characters 5-12", a.slice(0), [
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    7,
    10,
    10
  ]);
  Belt_Array.fill(a, -13, 1, 7);
  Test_utils.eq("File \"bs_array_test.res\", line 217, characters 5-12", a.slice(0), [
    7,
    0,
    1,
    1,
    1,
    1,
    1,
    7,
    10,
    10
  ]);
  Belt_Array.fill(a, -13, 12, 7);
  Test_utils.eq("File \"bs_array_test.res\", line 219, characters 5-12", a.slice(0), Belt_Array.make(10, 7));
  Belt_Array.fill(a, 0, -1, 2);
  Test_utils.eq("File \"bs_array_test.res\", line 221, characters 5-12", a.slice(0), Belt_Array.make(10, 7));
  let b = [
    1,
    2,
    3
  ];
  Belt_Array.fill(b, 0, 0, 0);
  Test_utils.eq("File \"bs_array_test.res\", line 224, characters 5-12", b, [
    1,
    2,
    3
  ]);
  Belt_Array.fill(b, 4, 1, 0);
  Test_utils.eq("File \"bs_array_test.res\", line 226, characters 5-12", b, [
    1,
    2,
    3
  ]);
});

Mocha.test("bs_array_test_blit_functions", () => {
  let a0 = Belt_Array.makeBy(10, x => x);
  let b0 = Belt_Array.make(10, 3);
  Belt_Array.blit(a0, 1, b0, 2, 5);
  Test_utils.eq("File \"bs_array_test.res\", line 233, characters 5-12", b0.slice(0), [
    3,
    3,
    1,
    2,
    3,
    4,
    5,
    3,
    3,
    3
  ]);
  Belt_Array.blit(a0, -1, b0, 2, 5);
  Test_utils.eq("File \"bs_array_test.res\", line 235, characters 5-12", b0.slice(0), [
    3,
    3,
    9,
    2,
    3,
    4,
    5,
    3,
    3,
    3
  ]);
  Belt_Array.blit(a0, -1, b0, -2, 5);
  Test_utils.eq("File \"bs_array_test.res\", line 237, characters 5-12", b0.slice(0), [
    3,
    3,
    9,
    2,
    3,
    4,
    5,
    3,
    9,
    3
  ]);
  Belt_Array.blit(a0, -2, b0, -2, 2);
  Test_utils.eq("File \"bs_array_test.res\", line 239, characters 5-12", b0.slice(0), [
    3,
    3,
    9,
    2,
    3,
    4,
    5,
    3,
    8,
    9
  ]);
  Belt_Array.blit(a0, -11, b0, -11, 100);
  Test_utils.eq("File \"bs_array_test.res\", line 241, characters 5-12", b0.slice(0), a0);
  Belt_Array.blit(a0, -11, b0, -11, 2);
  Test_utils.eq("File \"bs_array_test.res\", line 243, characters 5-12", b0.slice(0), a0);
  let aa = Belt_Array.makeBy(10, x => x);
  Belt_Array.blit(aa, -1, aa, 1, 2);
  Test_utils.eq("File \"bs_array_test.res\", line 246, characters 5-12", aa.slice(0), [
    0,
    9,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9
  ]);
  Belt_Array.blit(aa, -2, aa, 1, 2);
  Test_utils.eq("File \"bs_array_test.res\", line 248, characters 5-12", aa.slice(0), [
    0,
    8,
    9,
    3,
    4,
    5,
    6,
    7,
    8,
    9
  ]);
  Belt_Array.blit(aa, -5, aa, 4, 3);
  Test_utils.eq("File \"bs_array_test.res\", line 250, characters 5-12", aa.slice(0), [
    0,
    8,
    9,
    3,
    5,
    6,
    7,
    7,
    8,
    9
  ]);
  Belt_Array.blit(aa, 4, aa, 5, 3);
  Test_utils.eq("File \"bs_array_test.res\", line 252, characters 5-12", aa.slice(0), [
    0,
    8,
    9,
    3,
    5,
    5,
    6,
    7,
    8,
    9
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 253, characters 5-12", Belt_Array.make(0, 3), []);
  Test_utils.eq("File \"bs_array_test.res\", line 254, characters 5-12", Belt_Array.make(-1, 3), []);
  let c = [
    0,
    1,
    2
  ];
  Belt_Array.blit(c, 4, c, 1, 1);
  Test_utils.eq("File \"bs_array_test.res\", line 257, characters 5-12", c, [
    0,
    1,
    2
  ]);
});

Mocha.test("bs_array_test_zip_functions", () => {
  Test_utils.eq("File \"bs_array_test.res\", line 261, characters 5-12", Belt_Array.zip([
    1,
    2,
    3
  ], [
    2,
    3,
    4,
    1
  ]), [
    [
      1,
      2
    ],
    [
      2,
      3
    ],
    [
      3,
      4
    ]
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 262, characters 5-12", Belt_Array.zip([
    2,
    3,
    4,
    1
  ], [
    1,
    2,
    3
  ]), [
    [
      2,
      1
    ],
    [
      3,
      2
    ],
    [
      4,
      3
    ]
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 263, characters 5-12", Belt_Array.zipBy([
    2,
    3,
    4,
    1
  ], [
    1,
    2,
    3
  ], (prim0, prim1) => prim0 - prim1 | 0), [
    1,
    1,
    1
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 264, characters 5-12", Belt_Array.zipBy([
    1,
    2,
    3
  ], [
    2,
    3,
    4,
    1
  ], (prim0, prim1) => prim0 - prim1 | 0), Belt_Array.map([
    1,
    1,
    1
  ], x => -x | 0));
  Test_utils.eq("File \"bs_array_test.res\", line 265, characters 5-12", Belt_Array.unzip([
    [
      1,
      2
    ],
    [
      2,
      3
    ],
    [
      3,
      4
    ]
  ]), [
    [
      1,
      2,
      3
    ],
    [
      2,
      3,
      4
    ]
  ]);
});

function sumUsingForEach(xs) {
  let v = {
    contents: 0
  };
  Belt_Array.forEach(xs, x => {
    v.contents = v.contents + x | 0;
  });
  return v.contents;
}

Mocha.test("bs_array_test_iteration_functions", () => {
  Test_utils.eq("File \"bs_array_test.res\", line 277, characters 5-12", sumUsingForEach([
    0,
    1,
    2,
    3,
    4
  ]), 10);
  Test_utils.ok("File \"bs_array_test.res\", line 278, characters 5-12", !Belt_Array.every([
    0,
    1,
    2,
    3,
    4
  ], x => x > 2));
  Test_utils.ok("File \"bs_array_test.res\", line 279, characters 5-12", Belt_Array.some([
    1,
    3,
    7,
    8
  ], x => x % 2 === 0));
  Test_utils.ok("File \"bs_array_test.res\", line 280, characters 5-12", !Belt_Array.some([
    1,
    3,
    7
  ], x => x % 2 === 0));
  Test_utils.ok("File \"bs_array_test.res\", line 281, characters 5-12", !Belt_Array.eq([
    0,
    1
  ], [1], (prim0, prim1) => prim0 === prim1));
  let c = {
    contents: 0
  };
  Test_utils.ok("File \"bs_array_test.res\", line 283, characters 4-11", (Belt_Array.forEachWithIndex([
    1,
    1,
    1
  ], (i, v) => {
    c.contents = (c.contents + i | 0) + v | 0;
  }), c.contents === 6));
});

function id(loc, x) {
  let u = x.slice(0);
  Test_utils.eq("File \"bs_array_test.res\", line 294, characters 4-11", Belt_Array.reverse(x), (Belt_Array.reverseInPlace(u), u));
}

Mocha.test("bs_array_test_id_functions", () => {
  id("File \"bs_array_test.res\", line 304, characters 5-12", []);
  id("File \"bs_array_test.res\", line 305, characters 5-12", [1]);
  id("File \"bs_array_test.res\", line 306, characters 5-12", [
    1,
    2
  ]);
  id("File \"bs_array_test.res\", line 307, characters 5-12", [
    1,
    2,
    3
  ]);
  id("File \"bs_array_test.res\", line 308, characters 5-12", [
    1,
    2,
    3,
    4
  ]);
});

Mocha.test("bs_array_test_every2_some2", () => {
  let every2 = (xs, ys, x) => Belt_Array.every2(Belt_List.toArray(xs), Belt_List.toArray(ys), x);
  let some2 = (xs, ys, x) => Belt_Array.some2(Belt_List.toArray(xs), Belt_List.toArray(ys), x);
  Test_utils.eq("File \"bs_array_test.res\", line 316, characters 5-12", every2(/* [] */0, {
    hd: 1,
    tl: /* [] */0
  }, (x, y) => x > y), true);
  Test_utils.eq("File \"bs_array_test.res\", line 317, characters 5-12", every2({
    hd: 2,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }, {
    hd: 1,
    tl: /* [] */0
  }, (x, y) => x > y), true);
  Test_utils.eq("File \"bs_array_test.res\", line 318, characters 5-12", every2({
    hd: 2,
    tl: /* [] */0
  }, {
    hd: 1,
    tl: /* [] */0
  }, (x, y) => x > y), true);
  Test_utils.eq("File \"bs_array_test.res\", line 319, characters 5-12", every2({
    hd: 2,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }, {
    hd: 1,
    tl: {
      hd: 4,
      tl: /* [] */0
    }
  }, (x, y) => x > y), false);
  Test_utils.eq("File \"bs_array_test.res\", line 320, characters 5-12", every2({
    hd: 2,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }, {
    hd: 1,
    tl: {
      hd: 0,
      tl: /* [] */0
    }
  }, (x, y) => x > y), true);
  Test_utils.eq("File \"bs_array_test.res\", line 321, characters 5-12", some2(/* [] */0, {
    hd: 1,
    tl: /* [] */0
  }, (x, y) => x > y), false);
  Test_utils.eq("File \"bs_array_test.res\", line 322, characters 5-12", some2({
    hd: 2,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }, {
    hd: 1,
    tl: /* [] */0
  }, (x, y) => x > y), true);
  Test_utils.eq("File \"bs_array_test.res\", line 323, characters 5-12", some2({
    hd: 2,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }, {
    hd: 1,
    tl: {
      hd: 4,
      tl: /* [] */0
    }
  }, (x, y) => x > y), true);
  Test_utils.eq("File \"bs_array_test.res\", line 324, characters 5-12", some2({
    hd: 0,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }, {
    hd: 1,
    tl: {
      hd: 4,
      tl: /* [] */0
    }
  }, (x, y) => x > y), false);
  Test_utils.eq("File \"bs_array_test.res\", line 325, characters 5-12", some2({
    hd: 0,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }, {
    hd: 3,
    tl: {
      hd: 2,
      tl: /* [] */0
    }
  }, (x, y) => x > y), true);
});

Mocha.test("bs_array_test_concat_functions", () => {
  Test_utils.eq("File \"bs_array_test.res\", line 329, characters 5-12", Belt_Array.concat([], [
    1,
    2,
    3
  ]), [
    1,
    2,
    3
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 330, characters 5-12", Belt_Array.concat([], []), []);
  Test_utils.eq("File \"bs_array_test.res\", line 331, characters 5-12", Belt_Array.concat([
    3,
    2
  ], [
    1,
    2,
    3
  ]), [
    3,
    2,
    1,
    2,
    3
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 332, characters 5-12", Belt_Array.concatMany([
    [
      3,
      2
    ],
    [
      1,
      2,
      3
    ]
  ]), [
    3,
    2,
    1,
    2,
    3
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 333, characters 5-12", Belt_Array.concatMany([
    [
      3,
      2
    ],
    [
      1,
      2,
      3
    ],
    [],
    [0]
  ]), [
    3,
    2,
    1,
    2,
    3,
    0
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 334, characters 5-12", Belt_Array.concatMany([
    [],
    [
      3,
      2
    ],
    [
      1,
      2,
      3
    ],
    [],
    [0]
  ]), [
    3,
    2,
    1,
    2,
    3,
    0
  ]);
  Test_utils.eq("File \"bs_array_test.res\", line 335, characters 5-12", Belt_Array.concatMany([
    [],
    []
  ]), []);
});

Mocha.test("bs_array_test_cmp_functions", () => {
  Test_utils.ok("File \"bs_array_test.res\", line 339, characters 5-12", Belt_Array.cmp([
    1,
    2,
    3
  ], [
    0,
    1,
    2,
    3
  ], Primitive_int.compare) < 0);
  Test_utils.ok("File \"bs_array_test.res\", line 340, characters 5-12", Belt_Array.cmp([
    0,
    1,
    2,
    3
  ], [
    1,
    2,
    3
  ], Primitive_int.compare) > 0);
  Test_utils.ok("File \"bs_array_test.res\", line 341, characters 5-12", Belt_Array.cmp([
    1,
    2,
    3
  ], [
    0,
    1,
    2
  ], Primitive_int.compare) > 0);
  Test_utils.ok("File \"bs_array_test.res\", line 342, characters 5-12", Belt_Array.cmp([
    1,
    2,
    3
  ], [
    1,
    2,
    3
  ], Primitive_int.compare) === 0);
  Test_utils.ok("File \"bs_array_test.res\", line 343, characters 5-12", Belt_Array.cmp([
    1,
    2,
    4
  ], [
    1,
    2,
    3
  ], Primitive_int.compare) > 0);
});

Mocha.test("bs_array_test_getBy_functions", () => {
  Test_utils.eq("File \"bs_array_test.res\", line 347, characters 5-12", Belt_Array.getBy([
    1,
    2,
    3
  ], x => x > 1), 2);
  Test_utils.eq("File \"bs_array_test.res\", line 348, characters 5-12", Belt_Array.getBy([
    1,
    2,
    3
  ], x => x > 3), undefined);
});

Mocha.test("bs_array_test_getIndexBy_functions", () => {
  Test_utils.eq("File \"bs_array_test.res\", line 352, characters 5-12", Belt_Array.getIndexBy([
    1,
    2,
    3
  ], x => x > 1), 1);
  Test_utils.eq("File \"bs_array_test.res\", line 353, characters 5-12", Belt_Array.getIndexBy([
    1,
    2,
    3
  ], x => x > 3), undefined);
});

Mocha.test("bs_array_test_push_functions", () => {
  let arr = [];
  arr.push(3);
  arr.push(2);
  arr.push(1);
  Test_utils.eq("File \"bs_array_test.res\", line 361, characters 5-12", arr, [
    3,
    2,
    1
  ]);
});

let A;

let L;

export {
  A,
  L,
  push,
  add,
  addone,
  makeMatrixExn,
  sumUsingForEach,
  id,
}
/*  Not a pure module */
