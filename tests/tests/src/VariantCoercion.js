// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


let x = {
  kind: "One",
  age: 1
};

let CoerceVariants = {
  a: 1.1,
  b: 1.1,
  x: x,
  y: x
};

let a = "hello";

let c = 100;

let CoerceWithPayload = {
  a: a,
  aa: "First",
  b: a,
  bb: "First",
  c: c,
  cc: 2,
  d: c,
  dd: 2
};

let a$1 = "hello";

let aa = "First";

let c$1 = "Hi";

let CoerceFromStringToVariant = {
  a: a$1,
  aa: aa,
  b: a$1,
  bb: aa,
  c: c$1,
  cc: c$1
};

let CoerceFromIntToVariant = {
  a: 100,
  aa: 1,
  b: 100,
  bb: 1,
  c: 120,
  cc: 120
};

let CoerceFromFloatToVariant = {
  a: 100,
  aa: 1,
  b: 100,
  bb: 1,
  c: 120,
  cc: 120
};

let CoerceFromBigintToVariant = {
  a: 100n,
  aa: 1n,
  b: 100n,
  bb: 1n,
  c: 120n,
  cc: 120n
};

let CoerceFromPolyvariantToVariant = {
  simple: "One",
  simpleP: "One",
  withAs: "One",
  withAsP: "One",
  withMoreVariantConstructors: "One",
  withMoreVariantConstructorsP: "One",
  withUnboxedCatchAll: "One",
  withUnboxedCatchAllP: "One"
};

let a$2 = "Three";

let b = "Three";

let i = 1;

let d = 1;

let ii = 1.1;

let dd = 1.1;

exports.a = a$2;
exports.b = b;
exports.i = i;
exports.d = d;
exports.ii = ii;
exports.dd = dd;
exports.CoerceVariants = CoerceVariants;
exports.CoerceWithPayload = CoerceWithPayload;
exports.CoerceFromStringToVariant = CoerceFromStringToVariant;
exports.CoerceFromIntToVariant = CoerceFromIntToVariant;
exports.CoerceFromFloatToVariant = CoerceFromFloatToVariant;
exports.CoerceFromBigintToVariant = CoerceFromBigintToVariant;
exports.CoerceFromPolyvariantToVariant = CoerceFromPolyvariantToVariant;
/* No side effect */
