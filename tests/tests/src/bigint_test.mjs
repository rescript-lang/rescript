// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mocha from "mocha";
import * as Test_utils from "./test_utils.mjs";
import * as Primitive_bigint from "@rescript/runtime/lib/es6/Primitive_bigint.js";
import * as Primitive_object from "@rescript/runtime/lib/es6/Primitive_object.js";

let bigint_compare = Primitive_bigint.compare;

let generic_compare = Primitive_object.compare;

function bigint_equal(x, y) {
  return x === y;
}

let generic_equal = Primitive_object.equal;

function bigint_notequal(x, y) {
  return x !== y;
}

let generic_notequal = Primitive_object.notequal;

function bigint_lessthan(x, y) {
  return x < y;
}

let generic_lessthan = Primitive_object.lessthan;

function bigint_greaterthan(x, y) {
  return x > y;
}

let generic_greaterthan = Primitive_object.greaterthan;

function bigint_lessequal(x, y) {
  return x <= y;
}

let generic_lessequal = Primitive_object.lessequal;

function bigint_greaterequal(x, y) {
  return x >= y;
}

let generic_greaterequal = Primitive_object.greaterequal;

function bigint_land(prim0, prim1) {
  return prim0 & prim1;
}

function bigint_lor(prim0, prim1) {
  return prim0 | prim1;
}

function bigint_lxor(prim0, prim1) {
  return prim0 ^ prim1;
}

function bigint_lsl(prim0, prim1) {
  return (prim0 << prim1);
}

function bigint_asr(prim0, prim1) {
  return (prim0 >> prim1);
}

Mocha.describe("Bigint_test", () => {
  Mocha.test("bigint_test", () => {
    Test_utils.eq("File \"bigint_test.res\", line 26, characters 7-14", Primitive_bigint.compare(1n, 1n), 0);
    Test_utils.eq("File \"bigint_test.res\", line 27, characters 7-14", Primitive_object.compare(1n, 1n), 0);
    Test_utils.eq("File \"bigint_test.res\", line 28, characters 7-14", Primitive_bigint.compare(-0n, -1n), 1);
    Test_utils.eq("File \"bigint_test.res\", line 29, characters 7-14", Primitive_object.compare(-0n, -1n), 1);
    Test_utils.eq("File \"bigint_test.res\", line 30, characters 7-14", Primitive_bigint.compare(0n, -1n), 1);
    Test_utils.eq("File \"bigint_test.res\", line 31, characters 7-14", Primitive_object.compare(0n, -1n), 1);
    Test_utils.eq("File \"bigint_test.res\", line 32, characters 7-14", Primitive_bigint.compare(1n, 2n), -1);
    Test_utils.eq("File \"bigint_test.res\", line 33, characters 7-14", Primitive_object.compare(1n, 2n), -1);
    Test_utils.eq("File \"bigint_test.res\", line 34, characters 7-14", Primitive_bigint.compare(1n, 2n), -1);
    Test_utils.eq("File \"bigint_test.res\", line 35, characters 7-14", Primitive_object.compare(1n, 2n), -1);
    Test_utils.eq("File \"bigint_test.res\", line 36, characters 7-14", Primitive_bigint.compare(1n, 1n), 0);
    Test_utils.eq("File \"bigint_test.res\", line 37, characters 7-14", Primitive_object.compare(1n, 1n), 0);
    Test_utils.eq("File \"bigint_test.res\", line 39, characters 6-13", true, true);
    Test_utils.eq("File \"bigint_test.res\", line 47, characters 6-13", Primitive_object.equal(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000n, 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000n), true);
    Test_utils.eq("File \"bigint_test.res\", line 55, characters 6-13", false, false);
    Test_utils.eq("File \"bigint_test.res\", line 63, characters 6-13", Primitive_object.equal(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000n, 1000000000000000000000000000000000000000000000000000000000000000000000000000000000001n), false);
    Test_utils.eq("File \"bigint_test.res\", line 71, characters 6-13", false, false);
    Test_utils.eq("File \"bigint_test.res\", line 79, characters 6-13", Primitive_object.equal(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000n, -1000000000000000000000000000000000000000000000000000000000000000000000000000000000000n), false);
    Test_utils.eq("File \"bigint_test.res\", line 87, characters 6-13", true, true);
    Test_utils.eq("File \"bigint_test.res\", line 99, characters 6-13", Primitive_object.equal(3n, 3n), true);
    Test_utils.eq("File \"bigint_test.res\", line 111, characters 6-13", true, true);
    Test_utils.eq("File \"bigint_test.res\", line 123, characters 6-13", Primitive_object.equal(3n, 3n), true);
    Test_utils.eq("File \"bigint_test.res\", line 135, characters 6-13", true, true);
    Test_utils.eq("File \"bigint_test.res\", line 147, characters 6-13", Primitive_object.equal(3n, 3n), true);
    Test_utils.eq("File \"bigint_test.res\", line 158, characters 7-14", 9n & 1n, 1n);
    Test_utils.eq("File \"bigint_test.res\", line 159, characters 7-14", 9n | 1n, 9n);
    Test_utils.eq("File \"bigint_test.res\", line 160, characters 7-14", 9n ^ 1n, 8n);
    Test_utils.eq("File \"bigint_test.res\", line 161, characters 7-14", (9n << 1n), 18n);
    Test_utils.eq("File \"bigint_test.res\", line 162, characters 7-14", (9n << -1n), 4n);
    Test_utils.eq("File \"bigint_test.res\", line 163, characters 7-14", (9n >> 1n), 4n);
    Test_utils.eq("File \"bigint_test.res\", line 164, characters 7-14", (9n >> -1n), 18n);
    Test_utils.eq("File \"bigint_test.res\", line 165, characters 7-14", (-9n >> 1n), -5n);
    Test_utils.eq("File \"bigint_test.res\", line 166, characters 7-14", (-9n >> -1n), -18n);
    Test_utils.eq("File \"bigint_test.res\", line 167, characters 7-14", 9n > 1n ? 9n : 1n, 9n);
    Test_utils.eq("File \"bigint_test.res\", line 168, characters 7-14", 9n < 1n ? 9n : 1n, 1n);
  });
});

export {
  bigint_compare,
  generic_compare,
  bigint_equal,
  generic_equal,
  bigint_notequal,
  generic_notequal,
  bigint_lessthan,
  generic_lessthan,
  bigint_greaterthan,
  generic_greaterthan,
  bigint_lessequal,
  generic_lessequal,
  bigint_greaterequal,
  generic_greaterequal,
  bigint_land,
  bigint_lor,
  bigint_lxor,
  bigint_lsl,
  bigint_asr,
}
/*  Not a pure module */
