// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

let Primitive_object = require("rescript/lib/js/primitive_object.js");
let Primitive_exceptions = require("rescript/lib/js/primitive_exceptions.js");

function foo(x) {
  if (typeof x !== "object") {
    if (x === "A1") {
      return 1;
    } else {
      return 2;
    }
  }
  switch (x.TAG) {
    case "B" :
      return x._0;
    case "C" :
      return x._0 + x._1 | 0;
    case "D" :
      let match = x._0;
      return match[0] + match[1] | 0;
  }
}

function fooA1(x) {
  if (typeof x !== "object" && x === "A1") {
    return 1;
  } else {
    return 42;
  }
}

function fooC(x) {
  if (typeof x !== "object" || x.TAG !== "C") {
    return 42;
  } else {
    return x._0 + x._1 | 0;
  }
}

function switchNum(x) {
  switch (x) {
    case 0 :
      return "0";
    case 1 :
      return "1";
    case 2 :
      return "2";
    default:
      return "_";
  }
}

let same = Primitive_object.equal;

let compare = Primitive_object.compare;

let Path = {
  same: same,
  compare: compare
};

function Make(M) {
  let find = x => {};
  return {
    find: find
  };
}

function find(x) {
  
}

let M = {
  find: find
};

function rollback_path(subst, p) {
  try {
    return "try";
  } catch (raw_exn) {
    let exn = Primitive_exceptions.internalToException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      switch (p.TAG) {
        case "Pdot" :
          return "Pdot";
        case "Pident" :
        case "Papply" :
          return "Pident | Papply";
      }
    } else {
      throw exn;
    }
  }
}

let EA1 = /* @__PURE__ */Primitive_exceptions.create("Variant.EA1");

let EA2 = /* @__PURE__ */Primitive_exceptions.create("Variant.EA2");

let EB = /* @__PURE__ */Primitive_exceptions.create("Variant.EB");

let EC = /* @__PURE__ */Primitive_exceptions.create("Variant.EC");

let ED = /* @__PURE__ */Primitive_exceptions.create("Variant.ED");

function fooExn(f) {
  try {
    return f();
  } catch (raw_n) {
    let n = Primitive_exceptions.internalToException(raw_n);
    if (n.RE_EXN_ID === EA1) {
      return 1;
    }
    if (n.RE_EXN_ID === EA2) {
      return 2;
    }
    if (n.RE_EXN_ID === EB) {
      return n._1;
    }
    if (n.RE_EXN_ID === EC) {
      return n._1 + n._2 | 0;
    }
    if (n.RE_EXN_ID === ED) {
      let match = n._1;
      return match[0] + match[1] | 0;
    }
    throw n;
  }
}

let a1 = "A1";

let a2 = "A2";

let b = {
  TAG: "B",
  _0: 34
};

let c = {
  TAG: "C",
  _0: 4,
  _1: 2
};

let d = {
  TAG: "D",
  _0: [
    4,
    2
  ]
};

exports.a1 = a1;
exports.a2 = a2;
exports.b = b;
exports.c = c;
exports.d = d;
exports.foo = foo;
exports.fooA1 = fooA1;
exports.fooC = fooC;
exports.switchNum = switchNum;
exports.Path = Path;
exports.Make = Make;
exports.M = M;
exports.rollback_path = rollback_path;
exports.EA1 = EA1;
exports.EA2 = EA2;
exports.EB = EB;
exports.EC = EC;
exports.ED = ED;
exports.fooExn = fooExn;
/* No side effect */
