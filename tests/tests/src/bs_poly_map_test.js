// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

let Mt = require("./mt.js");
let Belt_Id = require("rescript/lib/js/belt_Id.js");
let Belt_Map = require("rescript/lib/js/belt_Map.js");
let Belt_Set = require("rescript/lib/js/belt_Set.js");
let Belt_Array = require("rescript/lib/js/belt_Array.js");
let Primitive_int = require("rescript/lib/js/primitive_int.js");
let Array_data_util = require("./array_data_util.js");
let Primitive_option = require("rescript/lib/js/primitive_option.js");

let suites = {
  contents: /* [] */0
};

let test_id = {
  contents: 0
};

function eq(loc, x, y) {
  Mt.eq_suites(test_id, suites, loc, x, y);
}

function b(loc, v) {
  Mt.bool_suites(test_id, suites, loc, v);
}

let Icmp = Belt_Id.comparable(Primitive_int.compare);

function mapOfArray(x) {
  return Belt_Map.fromArray(x, Icmp);
}

function setOfArray(x) {
  return Belt_Set.fromArray(x, Icmp);
}

function emptyMap() {
  return Belt_Map.make(Icmp);
}

function mergeInter(s1, s2) {
  return Belt_Set.fromArray(Belt_Map.keysToArray(Belt_Map.merge(s1, s2, (k, v1, v2) => {
    if (v1 !== undefined && v2 !== undefined) {
      return Primitive_option.some(undefined);
    }
    
  })), Icmp);
}

function mergeUnion(s1, s2) {
  return Belt_Set.fromArray(Belt_Map.keysToArray(Belt_Map.merge(s1, s2, (k, v1, v2) => {
    if (v1 !== undefined || v2 !== undefined) {
      return Primitive_option.some(undefined);
    }
    
  })), Icmp);
}

function mergeDiff(s1, s2) {
  return Belt_Set.fromArray(Belt_Map.keysToArray(Belt_Map.merge(s1, s2, (k, v1, v2) => {
    if (v1 !== undefined && v2 === undefined) {
      return Primitive_option.some(undefined);
    }
    
  })), Icmp);
}

function randomRange(i, j) {
  return Belt_Array.map(Array_data_util.randomRange(i, j), x => [
    x,
    x
  ]);
}

let u0 = Belt_Map.fromArray(randomRange(0, 100), Icmp);

let u1 = Belt_Map.fromArray(randomRange(30, 120), Icmp);

b("File \"bs_poly_map_test.res\", line 64, characters 4-11", Belt_Set.eq(mergeInter(u0, u1), Belt_Set.fromArray(Array_data_util.range(30, 100), Icmp)));

b("File \"bs_poly_map_test.res\", line 65, characters 4-11", Belt_Set.eq(mergeUnion(u0, u1), Belt_Set.fromArray(Array_data_util.range(0, 120), Icmp)));

b("File \"bs_poly_map_test.res\", line 66, characters 4-11", Belt_Set.eq(mergeDiff(u0, u1), Belt_Set.fromArray(Array_data_util.range(0, 29), Icmp)));

b("File \"bs_poly_map_test.res\", line 67, characters 4-11", Belt_Set.eq(mergeDiff(u1, u0), Belt_Set.fromArray(Array_data_util.range(101, 120), Icmp)));

let a0 = Belt_Map.fromArray(randomRange(0, 10), Icmp);

let a1 = Belt_Map.set(a0, 3, 33);

let a2 = Belt_Map.remove(a1, 3);

let a3 = Belt_Map.update(a2, 3, k => {
  if (k !== undefined) {
    return k + 1 | 0;
  } else {
    return 11;
  }
});

let a4 = Belt_Map.update(a2, 3, k => {
  if (k !== undefined) {
    return k + 1 | 0;
  }
  
});

let a5 = Belt_Map.remove(a0, 3);

let a6 = Belt_Map.remove(a5, 3);

b("File \"bs_poly_map_test.res\", line 88, characters 4-11", a5 === a6);

b("File \"bs_poly_map_test.res\", line 89, characters 4-11", Belt_Map.has(a0, 3));

b("File \"bs_poly_map_test.res\", line 90, characters 4-11", !Belt_Map.has(a5, 3));

b("File \"bs_poly_map_test.res\", line 91, characters 4-11", 3 === Belt_Map.getUndefined(a0, 3));

b("File \"bs_poly_map_test.res\", line 92, characters 4-11", 33 === Belt_Map.getUndefined(a1, 3));

b("File \"bs_poly_map_test.res\", line 93, characters 4-11", Belt_Map.getUndefined(a2, 3) === undefined);

b("File \"bs_poly_map_test.res\", line 95, characters 4-11", 11 === Belt_Map.getUndefined(a3, 3));

b("File \"bs_poly_map_test.res\", line 96, characters 4-11", Belt_Map.getUndefined(a4, 3) === undefined);

let a7 = Belt_Map.removeMany(a0, [
  7,
  8,
  0,
  1,
  3,
  2,
  4,
  922,
  4,
  5,
  6
]);

eq("File \"bs_poly_map_test.res\", line 99, characters 5-12", Belt_Map.keysToArray(a7), [
  9,
  10
]);

let a8 = Belt_Map.removeMany(a7, Array_data_util.randomRange(0, 100));

b("File \"bs_poly_map_test.res\", line 101, characters 4-11", Belt_Map.isEmpty(a8));

let u0$1 = Belt_Map.fromArray(randomRange(0, 100), Icmp);

let u1$1 = Belt_Map.set(u0$1, 3, 32);

eq("File \"bs_poly_map_test.res\", line 107, characters 5-12", Belt_Map.get(u1$1, 3), 32);

eq("File \"bs_poly_map_test.res\", line 108, characters 5-12", Belt_Map.get(u0$1, 3), 3);

function acc(m, is) {
  return Belt_Array.reduce(is, m, (a, i) => Belt_Map.update(a, i, n => {
    if (n !== undefined) {
      return n + 1 | 0;
    } else {
      return 1;
    }
  }));
}

let m = Belt_Map.make(Icmp);

let m1 = acc(m, Belt_Array.concat(Array_data_util.randomRange(0, 20), Array_data_util.randomRange(10, 30)));

b("File \"bs_poly_map_test.res\", line 125, characters 4-11", Belt_Map.eq(m1, Belt_Map.fromArray(Belt_Array.makeBy(31, i => [
  i,
  i >= 10 && i <= 20 ? 2 : 1
]), Icmp), (x, y) => x === y));

let v0 = Belt_Map.make(Icmp);

let v1 = Belt_Map.mergeMany(v0, Belt_Array.map(Array_data_util.randomRange(0, 10000), x => [
  x,
  x
]));

let v2 = Belt_Map.fromArray(Belt_Array.map(Array_data_util.randomRange(0, 10000), x => [
  x,
  x
]), Icmp);

b("File \"bs_poly_map_test.res\", line 149, characters 4-11", Belt_Map.eq(v1, v2, (x, y) => x === y));

function inc(x) {
  if (x !== undefined) {
    return x + 1 | 0;
  } else {
    return 0;
  }
}

let v3 = Belt_Map.update(v1, 10, inc);

let v4 = Belt_Map.update(v3, -10, inc);

let match = Belt_Map.split(v3, 5000);

let pres = match[1];

let match$1 = match[0];

let match$2 = Belt_Map.get(v3, 10);

b("File \"bs_poly_map_test.res\", line 160, characters 4-11", match$2 !== undefined ? match$2 === 11 : false);

let match$3 = Belt_Map.get(v3, -10);

b("File \"bs_poly_map_test.res\", line 167, characters 4-11", match$3 === undefined);

let match$4 = Belt_Map.get(v4, -10);

b("File \"bs_poly_map_test.res\", line 174, characters 4-11", match$4 !== undefined ? match$4 === 0 : false);

b("File \"bs_poly_map_test.res\", line 180, characters 4-11", Belt_Map.isEmpty(Belt_Map.remove(Belt_Map.make(Icmp), 0)));

b("File \"bs_poly_map_test.res\", line 181, characters 4-11", Belt_Map.isEmpty(Belt_Map.removeMany(Belt_Map.make(Icmp), [0])));

b("File \"bs_poly_map_test.res\", line 183, characters 4-11", pres !== undefined ? pres === 5000 : false);

b("File \"bs_poly_map_test.res\", line 189, characters 4-11", Belt_Array.eq(Belt_Map.keysToArray(match$1[0]), Belt_Array.makeBy(5000, i => i), (prim0, prim1) => prim0 === prim1));

b("File \"bs_poly_map_test.res\", line 190, characters 4-11", Belt_Array.eq(Belt_Map.keysToArray(match$1[1]), Belt_Array.makeBy(5000, i => 5001 + i | 0), (prim0, prim1) => prim0 === prim1));

let v7 = Belt_Map.remove(v3, 5000);

let match$5 = Belt_Map.split(v7, 5000);

let match$6 = match$5[0];

b("File \"bs_poly_map_test.res\", line 195, characters 4-11", match$5[1] === undefined);

b("File \"bs_poly_map_test.res\", line 201, characters 4-11", Belt_Array.eq(Belt_Map.keysToArray(match$6[0]), Belt_Array.makeBy(5000, i => i), (prim0, prim1) => prim0 === prim1));

b("File \"bs_poly_map_test.res\", line 202, characters 4-11", Belt_Array.eq(Belt_Map.keysToArray(match$6[1]), Belt_Array.makeBy(5000, i => 5001 + i | 0), (prim0, prim1) => prim0 === prim1));

Mt.from_pair_suites("Bs_poly_map_test", suites.contents);

let M;

let N;

let A;

let I;

exports.suites = suites;
exports.test_id = test_id;
exports.eq = eq;
exports.b = b;
exports.Icmp = Icmp;
exports.M = M;
exports.N = N;
exports.A = A;
exports.I = I;
exports.mapOfArray = mapOfArray;
exports.setOfArray = setOfArray;
exports.emptyMap = emptyMap;
exports.mergeInter = mergeInter;
exports.mergeUnion = mergeUnion;
exports.mergeDiff = mergeDiff;
exports.randomRange = randomRange;
exports.acc = acc;
/* Icmp Not a pure module */
