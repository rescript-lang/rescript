// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

let Mt = require("./mt.js");
let Belt_Id = require("rescript/lib/js/belt_Id.js");
let Belt_List = require("rescript/lib/js/belt_List.js");
let Belt_Array = require("rescript/lib/js/belt_Array.js");
let Primitive_int = require("rescript/lib/js/primitive_int.js");
let Array_data_util = require("./array_data_util.js");
let Belt_MutableSet = require("rescript/lib/js/belt_MutableSet.js");

let suites = {
  contents: /* [] */0
};

let test_id = {
  contents: 0
};

function eq(loc, x, y) {
  Mt.eq_suites(test_id, suites, loc, x, y);
}

function b(loc, x) {
  Mt.bool_suites(test_id, suites, loc, x);
}

let IntCmp = Belt_Id.comparable(Primitive_int.compare);

function fromArray(none) {
  return Belt_MutableSet.fromArray(none, IntCmp);
}

function empty() {
  return Belt_MutableSet.make(IntCmp);
}

let u = Belt_MutableSet.fromArray(Array_data_util.range(0, 30), IntCmp);

b("File \"bs_poly_mutable_set_test.res\", line 16, characters 4-11", Belt_MutableSet.removeCheck(u, 0));

b("File \"bs_poly_mutable_set_test.res\", line 17, characters 4-11", !Belt_MutableSet.removeCheck(u, 0));

b("File \"bs_poly_mutable_set_test.res\", line 18, characters 4-11", Belt_MutableSet.removeCheck(u, 30));

b("File \"bs_poly_mutable_set_test.res\", line 19, characters 4-11", Belt_MutableSet.removeCheck(u, 20));

eq("File \"bs_poly_mutable_set_test.res\", line 20, characters 5-12", Belt_MutableSet.size(u), 28);

let r = Array_data_util.randomRange(0, 30);

b("File \"bs_poly_mutable_set_test.res\", line 22, characters 4-11", 29 === Belt_MutableSet.maxUndefined(u));

b("File \"bs_poly_mutable_set_test.res\", line 23, characters 4-11", 1 === Belt_MutableSet.minUndefined(u));

Belt_MutableSet.add(u, 3);

for (let i = 0, i_finish = r.length; i < i_finish; ++i) {
  Belt_MutableSet.remove(u, r[i]);
}

b("File \"bs_poly_mutable_set_test.res\", line 28, characters 4-11", Belt_MutableSet.isEmpty(u));

Belt_MutableSet.add(u, 0);

Belt_MutableSet.add(u, 1);

Belt_MutableSet.add(u, 2);

Belt_MutableSet.add(u, 0);

eq("File \"bs_poly_mutable_set_test.res\", line 33, characters 5-12", Belt_MutableSet.size(u), 3);

b("File \"bs_poly_mutable_set_test.res\", line 34, characters 4-11", !Belt_MutableSet.isEmpty(u));

for (let i$1 = 0; i$1 <= 3; ++i$1) {
  Belt_MutableSet.remove(u, i$1);
}

b("File \"bs_poly_mutable_set_test.res\", line 38, characters 4-11", Belt_MutableSet.isEmpty(u));

Belt_MutableSet.mergeMany(u, Array_data_util.randomRange(0, 20000));

Belt_MutableSet.mergeMany(u, Array_data_util.randomRange(0, 200));

eq("File \"bs_poly_mutable_set_test.res\", line 41, characters 5-12", Belt_MutableSet.size(u), 20001);

Belt_MutableSet.removeMany(u, Array_data_util.randomRange(0, 200));

eq("File \"bs_poly_mutable_set_test.res\", line 43, characters 5-12", Belt_MutableSet.size(u), 19800);

Belt_MutableSet.removeMany(u, Array_data_util.randomRange(0, 1000));

eq("File \"bs_poly_mutable_set_test.res\", line 45, characters 5-12", Belt_MutableSet.size(u), 19000);

Belt_MutableSet.removeMany(u, Array_data_util.randomRange(0, 1000));

eq("File \"bs_poly_mutable_set_test.res\", line 47, characters 5-12", Belt_MutableSet.size(u), 19000);

Belt_MutableSet.removeMany(u, Array_data_util.randomRange(1000, 10000));

eq("File \"bs_poly_mutable_set_test.res\", line 49, characters 5-12", Belt_MutableSet.size(u), 10000);

Belt_MutableSet.removeMany(u, Array_data_util.randomRange(10000, 19999));

eq("File \"bs_poly_mutable_set_test.res\", line 51, characters 5-12", Belt_MutableSet.size(u), 1);

b("File \"bs_poly_mutable_set_test.res\", line 52, characters 4-11", Belt_MutableSet.has(u, 20000));

Belt_MutableSet.removeMany(u, Array_data_util.randomRange(10000, 30000));

b("File \"bs_poly_mutable_set_test.res\", line 54, characters 4-11", Belt_MutableSet.isEmpty(u));

let v = Belt_MutableSet.fromArray(Array_data_util.randomRange(1000, 2000), IntCmp);

let bs = Belt_Array.map(Array_data_util.randomRange(500, 1499), x => Belt_MutableSet.removeCheck(v, x));

let indeedRemoved = Belt_Array.reduce(bs, 0, (acc, x) => {
  if (x) {
    return acc + 1 | 0;
  } else {
    return acc;
  }
});

eq("File \"bs_poly_mutable_set_test.res\", line 67, characters 5-12", indeedRemoved, 500);

eq("File \"bs_poly_mutable_set_test.res\", line 68, characters 5-12", Belt_MutableSet.size(v), 501);

let cs = Belt_Array.map(Array_data_util.randomRange(500, 2000), x => Belt_MutableSet.addCheck(v, x));

let indeedAded = Belt_Array.reduce(cs, 0, (acc, x) => {
  if (x) {
    return acc + 1 | 0;
  } else {
    return acc;
  }
});

eq("File \"bs_poly_mutable_set_test.res\", line 77, characters 5-12", indeedAded, 1000);

eq("File \"bs_poly_mutable_set_test.res\", line 78, characters 5-12", Belt_MutableSet.size(v), 1501);

b("File \"bs_poly_mutable_set_test.res\", line 79, characters 4-11", Belt_MutableSet.isEmpty(Belt_MutableSet.make(IntCmp)));

eq("File \"bs_poly_mutable_set_test.res\", line 80, characters 5-12", Belt_MutableSet.minimum(v), 500);

eq("File \"bs_poly_mutable_set_test.res\", line 81, characters 5-12", Belt_MutableSet.maximum(v), 2000);

eq("File \"bs_poly_mutable_set_test.res\", line 82, characters 5-12", Belt_MutableSet.minUndefined(v), 500);

eq("File \"bs_poly_mutable_set_test.res\", line 83, characters 5-12", Belt_MutableSet.maxUndefined(v), 2000);

eq("File \"bs_poly_mutable_set_test.res\", line 84, characters 5-12", Belt_MutableSet.reduce(v, 0, (x, y) => x + y | 0), 1876250);

b("File \"bs_poly_mutable_set_test.res\", line 85, characters 4-11", Belt_List.eq(Belt_MutableSet.toList(v), Belt_List.makeBy(1501, i => i + 500 | 0), (x, y) => x === y));

eq("File \"bs_poly_mutable_set_test.res\", line 86, characters 5-12", Belt_MutableSet.toArray(v), Array_data_util.range(500, 2000));

Belt_MutableSet.checkInvariantInternal(v);

eq("File \"bs_poly_mutable_set_test.res\", line 88, characters 5-12", Belt_MutableSet.get(v, 3), undefined);

eq("File \"bs_poly_mutable_set_test.res\", line 89, characters 5-12", Belt_MutableSet.get(v, 1200), 1200);

let match = Belt_MutableSet.split(v, 1000);

let match$1 = match[0];

let bb = match$1[1];

let aa = match$1[0];

b("File \"bs_poly_mutable_set_test.res\", line 91, characters 4-11", match[1]);

b("File \"bs_poly_mutable_set_test.res\", line 92, characters 4-11", Belt_Array.eq(Belt_MutableSet.toArray(aa), Array_data_util.range(500, 999), (prim0, prim1) => prim0 === prim1));

b("File \"bs_poly_mutable_set_test.res\", line 93, characters 4-11", Belt_Array.eq(Belt_MutableSet.toArray(bb), Array_data_util.range(1001, 2000), (prim0, prim1) => prim0 === prim1));

b("File \"bs_poly_mutable_set_test.res\", line 94, characters 4-11", Belt_MutableSet.subset(aa, v));

b("File \"bs_poly_mutable_set_test.res\", line 95, characters 4-11", Belt_MutableSet.subset(bb, v));

b("File \"bs_poly_mutable_set_test.res\", line 96, characters 4-11", Belt_MutableSet.isEmpty(Belt_MutableSet.intersect(aa, bb)));

let c = Belt_MutableSet.removeCheck(v, 1000);

b("File \"bs_poly_mutable_set_test.res\", line 98, characters 4-11", c);

let match$2 = Belt_MutableSet.split(v, 1000);

let match$3 = match$2[0];

let bb$1 = match$3[1];

let aa$1 = match$3[0];

b("File \"bs_poly_mutable_set_test.res\", line 100, characters 4-11", !match$2[1]);

b("File \"bs_poly_mutable_set_test.res\", line 101, characters 4-11", Belt_Array.eq(Belt_MutableSet.toArray(aa$1), Array_data_util.range(500, 999), (prim0, prim1) => prim0 === prim1));

b("File \"bs_poly_mutable_set_test.res\", line 102, characters 4-11", Belt_Array.eq(Belt_MutableSet.toArray(bb$1), Array_data_util.range(1001, 2000), (prim0, prim1) => prim0 === prim1));

b("File \"bs_poly_mutable_set_test.res\", line 103, characters 4-11", Belt_MutableSet.subset(aa$1, v));

b("File \"bs_poly_mutable_set_test.res\", line 104, characters 4-11", Belt_MutableSet.subset(bb$1, v));

b("File \"bs_poly_mutable_set_test.res\", line 105, characters 4-11", Belt_MutableSet.isEmpty(Belt_MutableSet.intersect(aa$1, bb$1)));

let aa$2 = Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 100), IntCmp);

let bb$2 = Belt_MutableSet.fromArray(Array_data_util.randomRange(40, 120), IntCmp);

let cc = Belt_MutableSet.union(aa$2, bb$2);

b("File \"bs_poly_mutable_set_test.res\", line 115, characters 4-11", Belt_MutableSet.eq(cc, Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 120), IntCmp)));

b("File \"bs_poly_mutable_set_test.res\", line 118, characters 4-11", Belt_MutableSet.eq(Belt_MutableSet.union(Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 20), IntCmp), Belt_MutableSet.fromArray(Array_data_util.randomRange(21, 40), IntCmp)), Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 40), IntCmp)));

let dd = Belt_MutableSet.intersect(aa$2, bb$2);

b("File \"bs_poly_mutable_set_test.res\", line 122, characters 4-11", Belt_MutableSet.eq(dd, Belt_MutableSet.fromArray(Array_data_util.randomRange(40, 100), IntCmp)));

b("File \"bs_poly_mutable_set_test.res\", line 124, characters 4-11", Belt_MutableSet.eq(Belt_MutableSet.intersect(Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 20), IntCmp), Belt_MutableSet.fromArray(Array_data_util.randomRange(21, 40), IntCmp)), Belt_MutableSet.make(IntCmp)));

b("File \"bs_poly_mutable_set_test.res\", line 128, characters 4-11", Belt_MutableSet.eq(Belt_MutableSet.intersect(Belt_MutableSet.fromArray(Array_data_util.randomRange(21, 40), IntCmp), Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 20), IntCmp)), Belt_MutableSet.make(IntCmp)));

b("File \"bs_poly_mutable_set_test.res\", line 131, characters 4-11", Belt_MutableSet.eq(Belt_MutableSet.intersect(Belt_MutableSet.fromArray([
  1,
  3,
  4,
  5,
  7,
  9
], IntCmp), Belt_MutableSet.fromArray([
  2,
  4,
  5,
  6,
  8,
  10
], IntCmp)), Belt_MutableSet.fromArray([
  4,
  5
], IntCmp)));

b("File \"bs_poly_mutable_set_test.res\", line 132, characters 4-11", Belt_MutableSet.eq(Belt_MutableSet.diff(aa$2, bb$2), Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 39), IntCmp)));

b("File \"bs_poly_mutable_set_test.res\", line 133, characters 4-11", Belt_MutableSet.eq(Belt_MutableSet.diff(bb$2, aa$2), Belt_MutableSet.fromArray(Array_data_util.randomRange(101, 120), IntCmp)));

b("File \"bs_poly_mutable_set_test.res\", line 135, characters 4-11", Belt_MutableSet.eq(Belt_MutableSet.diff(Belt_MutableSet.fromArray(Array_data_util.randomRange(21, 40), IntCmp), Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 20), IntCmp)), Belt_MutableSet.fromArray(Array_data_util.randomRange(21, 40), IntCmp)));

b("File \"bs_poly_mutable_set_test.res\", line 142, characters 4-11", Belt_MutableSet.eq(Belt_MutableSet.diff(Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 20), IntCmp), Belt_MutableSet.fromArray(Array_data_util.randomRange(21, 40), IntCmp)), Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 20), IntCmp)));

b("File \"bs_poly_mutable_set_test.res\", line 150, characters 4-11", Belt_MutableSet.eq(Belt_MutableSet.diff(Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 20), IntCmp), Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 40), IntCmp)), Belt_MutableSet.fromArray(Array_data_util.randomRange(0, -1), IntCmp)));

let a0 = Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 1000), IntCmp);

let a1 = Belt_MutableSet.keep(a0, x => x % 2 === 0);

let a2 = Belt_MutableSet.keep(a0, x => x % 2 !== 0);

let match$4 = Belt_MutableSet.partition(a0, x => x % 2 === 0);

let a4 = match$4[1];

let a3 = match$4[0];

b("File \"bs_poly_mutable_set_test.res\", line 162, characters 4-11", Belt_MutableSet.eq(a1, a3));

b("File \"bs_poly_mutable_set_test.res\", line 163, characters 4-11", Belt_MutableSet.eq(a2, a4));

Belt_List.forEach({
  hd: a0,
  tl: {
    hd: a1,
    tl: {
      hd: a2,
      tl: {
        hd: a3,
        tl: {
          hd: a4,
          tl: /* [] */0
        }
      }
    }
  }
}, Belt_MutableSet.checkInvariantInternal);

Mt.from_pair_suites("Bs_poly_mutable_set_test", suites.contents);

let N;

let I;

let A;

let L;

let $plus$plus = Belt_MutableSet.union;

let f = fromArray;

let $eq$tilde = Belt_MutableSet.eq;

exports.suites = suites;
exports.test_id = test_id;
exports.eq = eq;
exports.b = b;
exports.N = N;
exports.I = I;
exports.A = A;
exports.IntCmp = IntCmp;
exports.L = L;
exports.fromArray = fromArray;
exports.empty = empty;
exports.$plus$plus = $plus$plus;
exports.f = f;
exports.$eq$tilde = $eq$tilde;
/* IntCmp Not a pure module */
