// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

let Mt = require("./mt.js");
let Pervasives = require("rescript/lib/js/pervasives.js");
let Primitive_object = require("rescript/lib/js/primitive_object.js");

function isLessThan(title, small, big) {
  return {
    hd: [
      "compare: " + title,
      param => ({
        TAG: "Eq",
        _0: true,
        _1: big > small
      })
    ],
    tl: {
      hd: [
        "compare: " + title,
        param => ({
          TAG: "Eq",
          _0: true,
          _1: small < big
        })
      ],
      tl: {
        hd: [
          "< operator: " + title,
          param => ({
            TAG: "Eq",
            _0: true,
            _1: Primitive_object.lessthan(small, big)
          })
        ],
        tl: {
          hd: [
            "<= operator: " + title,
            param => ({
              TAG: "Eq",
              _0: true,
              _1: Primitive_object.lessequal(small, big)
            })
          ],
          tl: {
            hd: [
              "> operator: " + title,
              param => ({
                TAG: "Eq",
                _0: true,
                _1: Primitive_object.greaterthan(big, small)
              })
            ],
            tl: {
              hd: [
                ">= operator: " + title,
                param => ({
                  TAG: "Eq",
                  _0: true,
                  _1: Primitive_object.greaterequal(big, small)
                })
              ],
              tl: {
                hd: [
                  "min: " + title,
                  param => ({
                    TAG: "Eq",
                    _0: small,
                    _1: Primitive_object.min(big, small)
                  })
                ],
                tl: {
                  hd: [
                    "min: " + title,
                    param => ({
                      TAG: "Eq",
                      _0: small,
                      _1: Primitive_object.min(small, big)
                    })
                  ],
                  tl: {
                    hd: [
                      "max: " + title,
                      param => ({
                        TAG: "Eq",
                        _0: big,
                        _1: Primitive_object.max(big, small)
                      })
                    ],
                    tl: {
                      hd: [
                        "max: " + title,
                        param => ({
                          TAG: "Eq",
                          _0: big,
                          _1: Primitive_object.max(small, big)
                        })
                      ],
                      tl: {
                        hd: [
                          "!== operator: " + title,
                          param => ({
                            TAG: "Eq",
                            _0: true,
                            _1: big !== small
                          })
                        ],
                        tl: {
                          hd: [
                            "!== operator: " + title,
                            param => ({
                              TAG: "Eq",
                              _0: true,
                              _1: small !== big
                            })
                          ],
                          tl: {
                            hd: [
                              "!= operator: " + title,
                              param => ({
                                TAG: "Eq",
                                _0: true,
                                _1: Primitive_object.notequal(big, small)
                              })
                            ],
                            tl: {
                              hd: [
                                "!= operator: " + title,
                                param => ({
                                  TAG: "Eq",
                                  _0: true,
                                  _1: Primitive_object.notequal(small, big)
                                })
                              ],
                              tl: {
                                hd: [
                                  "== operator: " + title,
                                  param => ({
                                    TAG: "Eq",
                                    _0: false,
                                    _1: Primitive_object.equal(big, small)
                                  })
                                ],
                                tl: {
                                  hd: [
                                    "== operator: " + title,
                                    param => ({
                                      TAG: "Eq",
                                      _0: false,
                                      _1: Primitive_object.equal(small, big)
                                    })
                                  ],
                                  tl: {
                                    hd: [
                                      "=== operator: " + title,
                                      param => ({
                                        TAG: "Eq",
                                        _0: false,
                                        _1: big === small
                                      })
                                    ],
                                    tl: {
                                      hd: [
                                        "=== operator: " + title,
                                        param => ({
                                          TAG: "Eq",
                                          _0: false,
                                          _1: small === big
                                        })
                                      ],
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  };
}

function isEqual(title, num1, num2) {
  return {
    hd: [
      "< operator: " + title,
      param => ({
        TAG: "Eq",
        _0: false,
        _1: Primitive_object.lessthan(num2, num1)
      })
    ],
    tl: {
      hd: [
        "<= operator: " + title,
        param => ({
          TAG: "Eq",
          _0: true,
          _1: Primitive_object.lessequal(num2, num1)
        })
      ],
      tl: {
        hd: [
          "> operator: " + title,
          param => ({
            TAG: "Eq",
            _0: false,
            _1: Primitive_object.greaterthan(num1, num2)
          })
        ],
        tl: {
          hd: [
            ">= operator: " + title,
            param => ({
              TAG: "Eq",
              _0: true,
              _1: Primitive_object.greaterequal(num1, num2)
            })
          ],
          tl: {
            hd: [
              "min: " + title,
              param => ({
                TAG: "Eq",
                _0: num1,
                _1: Primitive_object.min(num1, num2)
              })
            ],
            tl: {
              hd: [
                "max: " + title,
                param => ({
                  TAG: "Eq",
                  _0: num1,
                  _1: Primitive_object.max(num1, num2)
                })
              ],
              tl: {
                hd: [
                  "compare: " + title,
                  param => ({
                    TAG: "Eq",
                    _0: 0,
                    _1: Primitive_object.compare(num1, num2)
                  })
                ],
                tl: {
                  hd: [
                    "compare: " + title,
                    param => ({
                      TAG: "Eq",
                      _0: 0,
                      _1: Primitive_object.compare(num2, num1)
                    })
                  ],
                  tl: {
                    hd: [
                      "!= operator: " + title,
                      param => ({
                        TAG: "Eq",
                        _0: false,
                        _1: num1 !== num2
                      })
                    ],
                    tl: {
                      hd: [
                        "!= operator: " + title,
                        param => ({
                          TAG: "Eq",
                          _0: false,
                          _1: num2 !== num1
                        })
                      ],
                      tl: {
                        hd: [
                          "!= operator: " + title,
                          param => ({
                            TAG: "Eq",
                            _0: false,
                            _1: Primitive_object.notequal(num1, num2)
                          })
                        ],
                        tl: {
                          hd: [
                            "!= operator: " + title,
                            param => ({
                              TAG: "Eq",
                              _0: false,
                              _1: Primitive_object.notequal(num2, num1)
                            })
                          ],
                          tl: {
                            hd: [
                              "== operator: " + title,
                              param => ({
                                TAG: "Eq",
                                _0: true,
                                _1: Primitive_object.equal(num1, num2)
                              })
                            ],
                            tl: {
                              hd: [
                                "== operator: " + title,
                                param => ({
                                  TAG: "Eq",
                                  _0: true,
                                  _1: Primitive_object.equal(num2, num1)
                                })
                              ],
                              tl: {
                                hd: [
                                  "=== operator: " + title,
                                  param => ({
                                    TAG: "Eq",
                                    _0: true,
                                    _1: num1 === num2
                                  })
                                ],
                                tl: {
                                  hd: [
                                    "=== operator: " + title,
                                    param => ({
                                      TAG: "Eq",
                                      _0: true,
                                      _1: num2 === num1
                                    })
                                  ],
                                  tl: /* [] */0
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  };
}

let five = BigInt("5");

let suites = Pervasives.$at(isLessThan("123 and 555555", BigInt("123"), BigInt("555555")), Pervasives.$at(isEqual("98765 and 98765", BigInt("98765"), BigInt("98765")), isEqual("same instance", five, five)));

Mt.from_pair_suites("caml_compare_bigint_test.res", suites);

exports.isLessThan = isLessThan;
exports.isEqual = isEqual;
exports.five = five;
exports.suites = suites;
/* five Not a pure module */
