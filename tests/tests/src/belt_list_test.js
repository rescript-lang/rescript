// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

let Mocha = require("mocha");
let Belt_List = require("rescript/lib/js/belt_List.js");
let Belt_Array = require("rescript/lib/js/belt_Array.js");
let Test_utils = require("./test_utils.js");
let Primitive_int = require("rescript/lib/js/primitive_int.js");
let Primitive_object = require("rescript/lib/js/primitive_object.js");

function sum(xs) {
  let v = {
    contents: 0
  };
  Belt_List.forEach(xs, x => {
    v.contents = v.contents + x | 0;
  });
  return v.contents;
}

function sum2(xs, ys) {
  let v = {
    contents: 0
  };
  Belt_List.forEach2(xs, ys, (x, y) => {
    v.contents = (v.contents + x | 0) + y | 0;
  });
  return v.contents;
}

Mocha.describe("Belt_list_test", () => {
  Mocha.test("makeBy", () => {
    let u = Belt_List.makeBy(5, i => Math.imul(i, i));
    let f = i => Test_utils.eq("File \"belt_list_test.res\", line 23, characters 20-27", Belt_List.getExn(u, i), Math.imul(i, i));
    for (let i = 0; i <= 4; ++i) {
      f(i);
    }
    Test_utils.eq("File \"belt_list_test.res\", line 27, characters 7-14", Belt_List.map(u, i => i + 1 | 0), {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 5,
          tl: {
            hd: 10,
            tl: {
              hd: 17,
              tl: /* [] */0
            }
          }
        }
      }
    });
    Test_utils.eq("File \"belt_list_test.res\", line 28, characters 7-14", Belt_List.getBy({
      hd: 1,
      tl: {
        hd: 4,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, x => x % 2 === 0), 4);
    Test_utils.eq("File \"belt_list_test.res\", line 29, characters 7-14", Belt_List.getBy({
      hd: 1,
      tl: {
        hd: 4,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, x => x % 5 === 0), undefined);
  });
  Mocha.test("flatten", () => {
    Test_utils.eq("File \"belt_list_test.res\", line 34, characters 6-13", Belt_List.flatten({
      hd: {
        hd: 1,
        tl: /* [] */0
      },
      tl: {
        hd: {
          hd: 2,
          tl: /* [] */0
        },
        tl: {
          hd: {
            hd: 3,
            tl: /* [] */0
          },
          tl: {
            hd: /* [] */0,
            tl: {
              hd: Belt_List.makeBy(4, i => i),
              tl: /* [] */0
            }
          }
        }
      }
    }), {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 0,
            tl: {
              hd: 1,
              tl: {
                hd: 2,
                tl: {
                  hd: 3,
                  tl: /* [] */0
                }
              }
            }
          }
        }
      }
    });
    Test_utils.eq("File \"belt_list_test.res\", line 38, characters 7-14", Belt_List.flatten(/* [] */0), /* [] */0);
    Test_utils.eq("File \"belt_list_test.res\", line 39, characters 7-14", Belt_List.flatten({
      hd: /* [] */0,
      tl: {
        hd: /* [] */0,
        tl: {
          hd: {
            hd: 2,
            tl: /* [] */0
          },
          tl: {
            hd: {
              hd: 1,
              tl: /* [] */0
            },
            tl: {
              hd: {
                hd: 2,
                tl: /* [] */0
              },
              tl: {
                hd: /* [] */0,
                tl: /* [] */0
              }
            }
          }
        }
      }
    }), {
      hd: 2,
      tl: {
        hd: 1,
        tl: {
          hd: 2,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("concatMany", () => {
    Test_utils.eq("File \"belt_list_test.res\", line 44, characters 6-13", Belt_List.concatMany([
      {
        hd: 1,
        tl: /* [] */0
      },
      {
        hd: 2,
        tl: /* [] */0
      },
      {
        hd: 3,
        tl: /* [] */0
      },
      /* [] */0,
      Belt_List.makeBy(4, i => i)
    ]), {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 0,
            tl: {
              hd: 1,
              tl: {
                hd: 2,
                tl: {
                  hd: 3,
                  tl: /* [] */0
                }
              }
            }
          }
        }
      }
    });
    Test_utils.eq("File \"belt_list_test.res\", line 48, characters 7-14", Belt_List.concatMany([]), /* [] */0);
    Test_utils.eq("File \"belt_list_test.res\", line 49, characters 7-14", Belt_List.concatMany([
      /* [] */0,
      /* [] */0,
      {
        hd: 2,
        tl: /* [] */0
      },
      {
        hd: 1,
        tl: /* [] */0
      },
      {
        hd: 2,
        tl: /* [] */0
      },
      /* [] */0
    ]), {
      hd: 2,
      tl: {
        hd: 1,
        tl: {
          hd: 2,
          tl: /* [] */0
        }
      }
    });
    Test_utils.eq("File \"belt_list_test.res\", line 51, characters 6-13", Belt_List.concatMany([
      /* [] */0,
      /* [] */0,
      {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      },
      {
        hd: 1,
        tl: /* [] */0
      },
      {
        hd: 2,
        tl: /* [] */0
      },
      /* [] */0
    ]), {
      hd: 2,
      tl: {
        hd: 3,
        tl: {
          hd: 1,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    });
    Test_utils.eq("File \"belt_list_test.res\", line 55, characters 7-14", Belt_List.concatMany([{
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      }]), {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("concat", () => {
    Test_utils.eq("File \"belt_list_test.res\", line 60, characters 6-13", Belt_List.toArray(Belt_List.concat(Belt_List.makeBy(100, i => i), Belt_List.makeBy(100, i => i))), Belt_Array.concat(Belt_Array.makeBy(100, i => i), Belt_Array.makeBy(100, i => i)));
    Test_utils.eq("File \"belt_list_test.res\", line 65, characters 7-14", Belt_List.concat({
      hd: 1,
      tl: /* [] */0
    }, /* [] */0), {
      hd: 1,
      tl: /* [] */0
    });
    Test_utils.eq("File \"belt_list_test.res\", line 66, characters 7-14", Belt_List.concat(/* [] */0, {
      hd: 1,
      tl: /* [] */0
    }), {
      hd: 1,
      tl: /* [] */0
    });
  });
  Mocha.test("zip", () => {
    Test_utils.eq("File \"belt_list_test.res\", line 70, characters 7-14", Belt_List.zip({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 3,
      tl: {
        hd: 4,
        tl: /* [] */0
      }
    }), {
      hd: [
        1,
        3
      ],
      tl: {
        hd: [
          2,
          4
        ],
        tl: /* [] */0
      }
    });
    Test_utils.eq("File \"belt_list_test.res\", line 71, characters 7-14", Belt_List.zip(/* [] */0, {
      hd: 1,
      tl: /* [] */0
    }), /* [] */0);
    Test_utils.eq("File \"belt_list_test.res\", line 72, characters 7-14", Belt_List.zip(/* [] */0, /* [] */0), /* [] */0);
    Test_utils.eq("File \"belt_list_test.res\", line 73, characters 7-14", Belt_List.zip({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, /* [] */0), /* [] */0);
    Test_utils.eq("File \"belt_list_test.res\", line 74, characters 7-14", Belt_List.zip({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 2,
      tl: {
        hd: 3,
        tl: {
          hd: 4,
          tl: /* [] */0
        }
      }
    }), {
      hd: [
        1,
        2
      ],
      tl: {
        hd: [
          2,
          3
        ],
        tl: {
          hd: [
            3,
            4
          ],
          tl: /* [] */0
        }
      }
    });
  });
  let mod2 = x => x % 2 === 0;
  let evenIndex = (_x, i) => i % 2 === 0;
  Mocha.test("partition", () => {
    Test_utils.eq("File \"belt_list_test.res\", line 81, characters 7-14", Belt_List.partition({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: {
              hd: 3,
              tl: {
                hd: 4,
                tl: /* [] */0
              }
            }
          }
        }
      }
    }, mod2), [
      {
        hd: 2,
        tl: {
          hd: 2,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      },
      {
        hd: 1,
        tl: {
          hd: 3,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      }
    ]);
    Test_utils.eq("File \"belt_list_test.res\", line 82, characters 7-14", Belt_List.partition({
      hd: 2,
      tl: {
        hd: 2,
        tl: {
          hd: 2,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, mod2), [
      {
        hd: 2,
        tl: {
          hd: 2,
          tl: {
            hd: 2,
            tl: {
              hd: 4,
              tl: /* [] */0
            }
          }
        }
      },
      /* [] */0
    ]);
    Test_utils.eq("File \"belt_list_test.res\", line 83, characters 7-14", Belt_List.partition({
      hd: 2,
      tl: {
        hd: 2,
        tl: {
          hd: 2,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, x => !mod2(x)), [
      /* [] */0,
      {
        hd: 2,
        tl: {
          hd: 2,
          tl: {
            hd: 2,
            tl: {
              hd: 4,
              tl: /* [] */0
            }
          }
        }
      }
    ]);
    Test_utils.eq("File \"belt_list_test.res\", line 84, characters 7-14", Belt_List.partition(/* [] */0, mod2), [
      /* [] */0,
      /* [] */0
    ]);
  });
  Mocha.test("unzip", () => {
    Test_utils.eq("File \"belt_list_test.res\", line 88, characters 7-14", Belt_List.unzip(/* [] */0), [
      /* [] */0,
      /* [] */0
    ]);
    Test_utils.eq("File \"belt_list_test.res\", line 89, characters 7-14", Belt_List.unzip({
      hd: [
        1,
        2
      ],
      tl: /* [] */0
    }), [
      {
        hd: 1,
        tl: /* [] */0
      },
      {
        hd: 2,
        tl: /* [] */0
      }
    ]);
    Test_utils.eq("File \"belt_list_test.res\", line 90, characters 7-14", Belt_List.unzip({
      hd: [
        1,
        2
      ],
      tl: {
        hd: [
          3,
          4
        ],
        tl: /* [] */0
      }
    }), [
      {
        hd: 1,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      },
      {
        hd: 2,
        tl: {
          hd: 4,
          tl: /* [] */0
        }
      }
    ]);
  });
  Mocha.test("filter", () => {
    Test_utils.eq("File \"belt_list_test.res\", line 94, characters 7-14", Belt_List.keep({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, mod2), {
      hd: 2,
      tl: {
        hd: 4,
        tl: /* [] */0
      }
    });
    Test_utils.eq("File \"belt_list_test.res\", line 95, characters 7-14", Belt_List.keep({
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 41,
          tl: /* [] */0
        }
      }
    }, mod2), /* [] */0);
    Test_utils.eq("File \"belt_list_test.res\", line 96, characters 7-14", Belt_List.keep(/* [] */0, mod2), /* [] */0);
    Test_utils.eq("File \"belt_list_test.res\", line 97, characters 7-14", Belt_List.keep({
      hd: 2,
      tl: {
        hd: 2,
        tl: {
          hd: 2,
          tl: {
            hd: 4,
            tl: {
              hd: 6,
              tl: /* [] */0
            }
          }
        }
      }
    }, mod2), {
      hd: 2,
      tl: {
        hd: 2,
        tl: {
          hd: 2,
          tl: {
            hd: 4,
            tl: {
              hd: 6,
              tl: /* [] */0
            }
          }
        }
      }
    });
  });
  Mocha.test("keepWithIndex", () => {
    Test_utils.eq("File \"belt_list_test.res\", line 101, characters 7-14", Belt_List.keepWithIndex(/* [] */0, evenIndex), /* [] */0);
    Test_utils.eq("File \"belt_list_test.res\", line 102, characters 7-14", Belt_List.keepWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, evenIndex), {
      hd: 1,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    });
    Test_utils.eq("File \"belt_list_test.res\", line 103, characters 7-14", Belt_List.keepWithIndex({
      hd: 0,
      tl: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: {
              hd: 4,
              tl: {
                hd: 5,
                tl: {
                  hd: 6,
                  tl: {
                    hd: 7,
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        }
      }
    }, evenIndex), {
      hd: 0,
      tl: {
        hd: 2,
        tl: {
          hd: 4,
          tl: {
            hd: 6,
            tl: /* [] */0
          }
        }
      }
    });
  });
  let id = x => x;
  Mocha.test("map", () => {
    Test_utils.eq("File \"belt_list_test.res\", line 109, characters 7-14", Belt_List.map(Belt_List.makeBy(5, id), x => (x << 1)), {
      hd: 0,
      tl: {
        hd: 2,
        tl: {
          hd: 4,
          tl: {
            hd: 6,
            tl: {
              hd: 8,
              tl: /* [] */0
            }
          }
        }
      }
    });
    Test_utils.eq("File \"belt_list_test.res\", line 110, characters 7-14", Belt_List.map(/* [] */0, id), /* [] */0);
    Test_utils.eq("File \"belt_list_test.res\", line 111, characters 7-14", Belt_List.map({
      hd: 1,
      tl: /* [] */0
    }, x => -x | 0), {
      hd: -1,
      tl: /* [] */0
    });
  });
  let add = (a, b) => a + b | 0;
  let length_10_id = Belt_List.makeBy(10, id);
  let length_8_id = Belt_List.makeBy(8, id);
  Mocha.test("mapWithIndex etc.", () => {
    let d = Belt_List.makeBy(10, x => (x << 1));
    Test_utils.eq("File \"belt_list_test.res\", line 124, characters 7-14", Belt_List.zipBy(length_10_id, length_10_id, add), d);
    Test_utils.eq("File \"belt_list_test.res\", line 125, characters 7-14", Belt_List.zipBy(/* [] */0, {
      hd: 1,
      tl: /* [] */0
    }, add), /* [] */0);
    Test_utils.eq("File \"belt_list_test.res\", line 126, characters 7-14", Belt_List.zipBy({
      hd: 1,
      tl: /* [] */0
    }, /* [] */0, add), /* [] */0);
    Test_utils.eq("File \"belt_list_test.res\", line 127, characters 7-14", Belt_List.zipBy(/* [] */0, /* [] */0, add), /* [] */0);
    Test_utils.eq("File \"belt_list_test.res\", line 128, characters 7-14", Belt_List.zipBy(length_10_id, length_10_id, add), Belt_List.concat(Belt_List.map(length_8_id, x => (x << 1)), {
      hd: 16,
      tl: {
        hd: 18,
        tl: /* [] */0
      }
    }));
    Test_utils.eq("File \"belt_list_test.res\", line 129, characters 7-14", Belt_List.zipBy(length_10_id, length_8_id, add), Belt_List.mapWithIndex(length_8_id, (i, x) => i + x | 0));
    Test_utils.eq("File \"belt_list_test.res\", line 131, characters 6-13", Belt_List.reverse(Belt_List.mapReverse2(length_10_id, length_10_id, add)), Belt_List.map(length_10_id, x => (x << 1)));
    let xs = Belt_List.reverse(Belt_List.mapReverse2(length_8_id, length_10_id, add));
    Test_utils.eq("File \"belt_list_test.res\", line 136, characters 7-14", Belt_List.length(xs), 8);
    Test_utils.eq("File \"belt_list_test.res\", line 137, characters 7-14", xs, Belt_List.zipBy(length_10_id, length_8_id, add));
    Test_utils.eq("File \"belt_list_test.res\", line 138, characters 7-14", Belt_List.mapReverse2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, (x, y) => x + y | 0), {
      hd: 4,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    });
  });
  Mocha.test("take", () => {
    Test_utils.eq("File \"belt_list_test.res\", line 142, characters 7-14", Belt_List.take({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 2), {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    });
    Test_utils.eq("File \"belt_list_test.res\", line 143, characters 7-14", Belt_List.take(/* [] */0, 1), undefined);
    Test_utils.eq("File \"belt_list_test.res\", line 144, characters 7-14", Belt_List.take({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, 3), undefined);
    Test_utils.eq("File \"belt_list_test.res\", line 145, characters 7-14", Belt_List.take({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, 2), {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    });
    Test_utils.eq("File \"belt_list_test.res\", line 146, characters 7-14", Belt_List.take(length_10_id, 8), length_8_id);
    Test_utils.eq("File \"belt_list_test.res\", line 147, characters 7-14", Belt_List.take(length_10_id, 0), /* [] */0);
    Test_utils.eq("File \"belt_list_test.res\", line 148, characters 7-14", Belt_List.take(length_8_id, -2), undefined);
  });
  Mocha.test("droo", () => {
    Test_utils.eq("File \"belt_list_test.res\", line 152, characters 7-14", Belt_List.drop(length_10_id, 10), /* [] */0);
    Test_utils.eq("File \"belt_list_test.res\", line 153, characters 7-14", Belt_List.drop(length_10_id, 8), {
      hd: 8,
      tl: {
        hd: 9,
        tl: /* [] */0
      }
    });
    Test_utils.eq("File \"belt_list_test.res\", line 154, characters 7-14", Belt_List.drop(length_10_id, 0), length_10_id);
    Test_utils.eq("File \"belt_list_test.res\", line 155, characters 7-14", Belt_List.drop(length_8_id, -1), undefined);
  });
  Mocha.test("splitAt", () => {
    let a = Belt_List.makeBy(5, id);
    Test_utils.eq("File \"belt_list_test.res\", line 160, characters 7-14", Belt_List.splitAt(/* [] */0, 1), undefined);
    Test_utils.eq("File \"belt_list_test.res\", line 161, characters 7-14", Belt_List.splitAt(a, 6), undefined);
    Test_utils.eq("File \"belt_list_test.res\", line 162, characters 7-14", Belt_List.splitAt(a, 5), [
      a,
      /* [] */0
    ]);
    Test_utils.eq("File \"belt_list_test.res\", line 163, characters 7-14", Belt_List.splitAt(a, 4), [
      {
        hd: 0,
        tl: {
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 3,
              tl: /* [] */0
            }
          }
        }
      },
      {
        hd: 4,
        tl: /* [] */0
      }
    ]);
    Test_utils.eq("File \"belt_list_test.res\", line 164, characters 7-14", Belt_List.splitAt(a, 3), [
      {
        hd: 0,
        tl: {
          hd: 1,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      },
      {
        hd: 3,
        tl: {
          hd: 4,
          tl: /* [] */0
        }
      }
    ]);
    Test_utils.eq("File \"belt_list_test.res\", line 165, characters 7-14", Belt_List.splitAt(a, 2), [
      {
        hd: 0,
        tl: {
          hd: 1,
          tl: /* [] */0
        }
      },
      {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    ]);
    Test_utils.eq("File \"belt_list_test.res\", line 166, characters 7-14", Belt_List.splitAt(a, 1), [
      {
        hd: 0,
        tl: /* [] */0
      },
      {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: {
              hd: 4,
              tl: /* [] */0
            }
          }
        }
      }
    ]);
    Test_utils.eq("File \"belt_list_test.res\", line 167, characters 7-14", Belt_List.splitAt(a, 0), [
      /* [] */0,
      a
    ]);
    Test_utils.eq("File \"belt_list_test.res\", line 168, characters 7-14", Belt_List.splitAt(a, -1), undefined);
  });
  Mocha.test("removeAssoc", () => {
    let eqx = (x, y) => x === y;
    Test_utils.ok("File \"belt_list_test.res\", line 174, characters 7-14", Belt_List.hasAssoc({
      hd: [
        1,
        "1"
      ],
      tl: {
        hd: [
          2,
          "2"
        ],
        tl: {
          hd: [
            3,
            "3"
          ],
          tl: /* [] */0
        }
      }
    }, 2, (prim0, prim1) => prim0 === prim1));
    Test_utils.ok("File \"belt_list_test.res\", line 175, characters 7-14", !Belt_List.hasAssoc({
      hd: [
        1,
        "1"
      ],
      tl: {
        hd: [
          2,
          "2"
        ],
        tl: {
          hd: [
            3,
            "3"
          ],
          tl: /* [] */0
        }
      }
    }, 4, (prim0, prim1) => prim0 === prim1));
    Test_utils.ok("File \"belt_list_test.res\", line 176, characters 7-14", Belt_List.hasAssoc({
      hd: [
        1,
        "1"
      ],
      tl: {
        hd: [
          2,
          "2"
        ],
        tl: {
          hd: [
            3,
            "3"
          ],
          tl: /* [] */0
        }
      }
    }, 4, (x, y) => (x + 1 | 0) === y));
    Test_utils.eq("File \"belt_list_test.res\", line 178, characters 6-13", Belt_List.removeAssoc({
      hd: [
        1,
        "1"
      ],
      tl: {
        hd: [
          2,
          "2"
        ],
        tl: {
          hd: [
            3,
            "3"
          ],
          tl: /* [] */0
        }
      }
    }, 3, (prim0, prim1) => prim0 === prim1), {
      hd: [
        1,
        "1"
      ],
      tl: {
        hd: [
          2,
          "2"
        ],
        tl: /* [] */0
      }
    });
    Test_utils.eq("File \"belt_list_test.res\", line 183, characters 6-13", Belt_List.removeAssoc({
      hd: [
        1,
        "1"
      ],
      tl: {
        hd: [
          2,
          "2"
        ],
        tl: {
          hd: [
            3,
            "3"
          ],
          tl: /* [] */0
        }
      }
    }, 1, (prim0, prim1) => prim0 === prim1), {
      hd: [
        2,
        "2"
      ],
      tl: {
        hd: [
          3,
          "3"
        ],
        tl: /* [] */0
      }
    });
    Test_utils.eq("File \"belt_list_test.res\", line 188, characters 6-13", Belt_List.removeAssoc({
      hd: [
        1,
        "1"
      ],
      tl: {
        hd: [
          2,
          "2"
        ],
        tl: {
          hd: [
            3,
            "3"
          ],
          tl: /* [] */0
        }
      }
    }, 2, (prim0, prim1) => prim0 === prim1), {
      hd: [
        1,
        "1"
      ],
      tl: {
        hd: [
          3,
          "3"
        ],
        tl: /* [] */0
      }
    });
    Test_utils.eq("File \"belt_list_test.res\", line 193, characters 6-13", Belt_List.removeAssoc({
      hd: [
        1,
        "1"
      ],
      tl: {
        hd: [
          2,
          "2"
        ],
        tl: {
          hd: [
            3,
            "3"
          ],
          tl: /* [] */0
        }
      }
    }, 0, (prim0, prim1) => prim0 === prim1), {
      hd: [
        1,
        "1"
      ],
      tl: {
        hd: [
          2,
          "2"
        ],
        tl: {
          hd: [
            3,
            "3"
          ],
          tl: /* [] */0
        }
      }
    });
    Test_utils.eq("File \"belt_list_test.res\", line 198, characters 7-14", Belt_List.removeAssoc({
      hd: [
        1,
        "1"
      ],
      tl: {
        hd: [
          2,
          "2"
        ],
        tl: {
          hd: [
            3,
            "3"
          ],
          tl: /* [] */0
        }
      }
    }, 3, eqx), {
      hd: [
        1,
        "1"
      ],
      tl: {
        hd: [
          2,
          "2"
        ],
        tl: /* [] */0
      }
    });
    Test_utils.eq("File \"belt_list_test.res\", line 199, characters 7-14", Belt_List.removeAssoc({
      hd: [
        1,
        "1"
      ],
      tl: {
        hd: [
          2,
          "2"
        ],
        tl: {
          hd: [
            3,
            "3"
          ],
          tl: /* [] */0
        }
      }
    }, 1, eqx), {
      hd: [
        2,
        "2"
      ],
      tl: {
        hd: [
          3,
          "3"
        ],
        tl: /* [] */0
      }
    });
    Test_utils.eq("File \"belt_list_test.res\", line 200, characters 7-14", Belt_List.removeAssoc({
      hd: [
        1,
        "1"
      ],
      tl: {
        hd: [
          2,
          "2"
        ],
        tl: {
          hd: [
            3,
            "3"
          ],
          tl: /* [] */0
        }
      }
    }, 2, eqx), {
      hd: [
        1,
        "1"
      ],
      tl: {
        hd: [
          3,
          "3"
        ],
        tl: /* [] */0
      }
    });
    Test_utils.eq("File \"belt_list_test.res\", line 201, characters 7-14", Belt_List.removeAssoc(/* [] */0, 2, eqx), /* [] */0);
    let ll = {
      hd: [
        1,
        "1"
      ],
      tl: {
        hd: [
          2,
          "2"
        ],
        tl: {
          hd: [
            3,
            "3"
          ],
          tl: /* [] */0
        }
      }
    };
    let ll0 = Belt_List.removeAssoc(ll, 0, eqx);
    Test_utils.ok("File \"belt_list_test.res\", line 204, characters 7-14", ll === ll0);
    let ll1 = Belt_List.setAssoc(ll, 2, "22", (prim0, prim1) => prim0 === prim1);
    Test_utils.eq("File \"belt_list_test.res\", line 206, characters 7-14", ll1, {
      hd: [
        1,
        "1"
      ],
      tl: {
        hd: [
          2,
          "22"
        ],
        tl: {
          hd: [
            3,
            "3"
          ],
          tl: /* [] */0
        }
      }
    });
    let ll2 = Belt_List.setAssoc(ll1, 22, "2", (prim0, prim1) => prim0 === prim1);
    Test_utils.ok("File \"belt_list_test.res\", line 208, characters 7-14", Primitive_object.equal(ll2, {
      hd: [
        22,
        "2"
      ],
      tl: ll1
    }));
    Test_utils.ok("File \"belt_list_test.res\", line 209, characters 7-14", Belt_List.tailExn(ll2) === ll1);
    Test_utils.ok("File \"belt_list_test.res\", line 211, characters 6-13", Primitive_object.equal(Belt_List.setAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 2, "x", (prim0, prim1) => prim0 === prim1), {
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "x"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }));
    Test_utils.ok("File \"belt_list_test.res\", line 216, characters 6-13", Primitive_object.equal(Belt_List.setAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          3,
          "c"
        ],
        tl: /* [] */0
      }
    }, 2, "2", (prim0, prim1) => prim0 === prim1), {
      hd: [
        2,
        "2"
      ],
      tl: {
        hd: [
          1,
          "a"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }));
    Test_utils.eq("File \"belt_list_test.res\", line 219, characters 7-14", Belt_List.setAssoc(/* [] */0, 1, "1", (prim0, prim1) => prim0 === prim1), {
      hd: [
        1,
        "1"
      ],
      tl: /* [] */0
    });
    Test_utils.eq("File \"belt_list_test.res\", line 220, characters 7-14", Belt_List.setAssoc({
      hd: [
        1,
        "2"
      ],
      tl: /* [] */0
    }, 1, "1", (prim0, prim1) => prim0 === prim1), {
      hd: [
        1,
        "1"
      ],
      tl: /* [] */0
    });
    Test_utils.eq("File \"belt_list_test.res\", line 222, characters 7-14", Belt_List.setAssoc({
      hd: [
        0,
        "0"
      ],
      tl: {
        hd: [
          1,
          "2"
        ],
        tl: /* [] */0
      }
    }, 1, "1", (prim0, prim1) => prim0 === prim1), {
      hd: [
        0,
        "0"
      ],
      tl: {
        hd: [
          1,
          "1"
        ],
        tl: /* [] */0
      }
    });
    Test_utils.ok("File \"belt_list_test.res\", line 223, characters 7-14", Primitive_object.equal(Belt_List.getAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 2, (prim0, prim1) => prim0 === prim1), "b"));
    Test_utils.ok("File \"belt_list_test.res\", line 224, characters 7-14", Belt_List.getAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 4, (prim0, prim1) => prim0 === prim1) === undefined);
  });
  Mocha.test("head/tail etc.", () => {
    let succx = x => x + 1 | 0;
    Test_utils.eq("File \"belt_list_test.res\", line 230, characters 7-14", [
      Belt_List.head(length_10_id),
      Belt_List.tail(length_10_id)
    ], [
      0,
      Belt_List.drop(length_10_id, 1)
    ]);
    Test_utils.eq("File \"belt_list_test.res\", line 231, characters 7-14", Belt_List.head(/* [] */0), undefined);
    Test_utils.$$throw("File \"belt_list_test.res\", line 232, characters 10-17", () => Belt_List.headExn(/* [] */0));
    Test_utils.$$throw("File \"belt_list_test.res\", line 233, characters 10-17", () => {
      Belt_List.tailExn(/* [] */0);
    });
    Test_utils.$$throw("File \"belt_list_test.res\", line 234, characters 10-17", () => {
      Belt_List.getExn({
        hd: 0,
        tl: {
          hd: 1,
          tl: /* [] */0
        }
      }, -1);
    });
    Test_utils.$$throw("File \"belt_list_test.res\", line 235, characters 10-17", () => {
      Belt_List.getExn({
        hd: 0,
        tl: {
          hd: 1,
          tl: /* [] */0
        }
      }, 2);
    });
    Test_utils.eq("File \"belt_list_test.res\", line 236, characters 7-14", Belt_List.map({
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, i => Belt_List.getExn({
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, i)), {
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    });
    Test_utils.eq("File \"belt_list_test.res\", line 237, characters 7-14", Belt_List.headExn({
      hd: 1,
      tl: /* [] */0
    }), 1);
    Test_utils.eq("File \"belt_list_test.res\", line 238, characters 7-14", Belt_List.tailExn({
      hd: 1,
      tl: /* [] */0
    }), /* [] */0);
    Belt_List.forEachWithIndex(length_10_id, (i, x) => Test_utils.eq("File \"belt_list_test.res\", line 239, characters 50-57", Belt_List.get(length_10_id, i), x));
    Test_utils.eq("File \"belt_list_test.res\", line 240, characters 7-14", Belt_List.tail(/* [] */0), undefined);
    Test_utils.eq("File \"belt_list_test.res\", line 241, characters 7-14", Belt_List.drop(/* [] */0, 3), undefined);
    Test_utils.eq("File \"belt_list_test.res\", line 242, characters 7-14", Belt_List.mapWithIndex(/* [] */0, (i, x) => i + x | 0), /* [] */0);
    Test_utils.eq("File \"belt_list_test.res\", line 243, characters 7-14", Belt_List.get(length_10_id, -1), undefined);
    Test_utils.eq("File \"belt_list_test.res\", line 244, characters 7-14", Belt_List.get(length_10_id, 12), undefined);
    Test_utils.eq("File \"belt_list_test.res\", line 245, characters 7-14", sum(/* [] */0), 0);
    Test_utils.eq("File \"belt_list_test.res\", line 246, characters 7-14", sum(length_10_id), 45);
    Test_utils.eq("File \"belt_list_test.res\", line 247, characters 7-14", Belt_List.makeBy(0, id), /* [] */0);
    Test_utils.eq("File \"belt_list_test.res\", line 248, characters 7-14", Belt_List.reverse(Belt_List.reverse(length_10_id)), length_10_id);
    Test_utils.eq("File \"belt_list_test.res\", line 249, characters 7-14", Belt_List.reverse(Belt_List.reverse(length_8_id)), length_8_id);
    Test_utils.eq("File \"belt_list_test.res\", line 250, characters 7-14", Belt_List.reverse(/* [] */0), /* [] */0);
    Test_utils.eq("File \"belt_list_test.res\", line 251, characters 7-14", Belt_List.reverse(Belt_List.mapReverse(length_10_id, succx)), Belt_List.map(length_10_id, succx));
    Test_utils.eq("File \"belt_list_test.res\", line 252, characters 7-14", Belt_List.reduce(length_10_id, 0, add), 45);
    Test_utils.eq("File \"belt_list_test.res\", line 253, characters 7-14", Belt_List.reduceReverse(length_10_id, 0, add), 45);
    Test_utils.eq("File \"belt_list_test.res\", line 254, characters 7-14", Belt_List.reduceReverse(Belt_List.makeBy(10000, i => i), 0, (prim0, prim1) => prim0 + prim1 | 0), 49995000);
    Test_utils.eq("File \"belt_list_test.res\", line 257, characters 7-14", sum2(length_10_id, length_10_id), 90);
    Test_utils.eq("File \"belt_list_test.res\", line 258, characters 7-14", sum2(length_8_id, length_10_id), 56);
    Test_utils.eq("File \"belt_list_test.res\", line 259, characters 7-14", sum2(length_10_id, length_8_id), 56);
    Test_utils.eq("File \"belt_list_test.res\", line 260, characters 7-14", Belt_List.reduce2(length_10_id, length_8_id, 0, (acc, x, y) => (acc + x | 0) + y | 0), 56);
    Test_utils.eq("File \"belt_list_test.res\", line 261, characters 7-14", Belt_List.reduce2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 2,
      tl: {
        hd: 4,
        tl: {
          hd: 6,
          tl: /* [] */0
        }
      }
    }, 0, (a, b, c) => (a + b | 0) + c | 0), 18);
    Test_utils.eq("File \"belt_list_test.res\", line 262, characters 7-14", Belt_List.reduceReverse2(length_10_id, length_8_id, 0, (acc, x, y) => (acc + x | 0) + y | 0), 56);
    Test_utils.eq("File \"belt_list_test.res\", line 263, characters 7-14", Belt_List.reduceReverse2(length_10_id, length_10_id, 0, (acc, x, y) => (acc + x | 0) + y | 0), 90);
    Test_utils.eq("File \"belt_list_test.res\", line 264, characters 7-14", Belt_List.reduceReverse2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, 0, (acc, x, y) => (acc + x | 0) + y | 0), 6);
    Test_utils.eq("File \"belt_list_test.res\", line 265, characters 7-14", Belt_List.every({
      hd: 2,
      tl: {
        hd: 4,
        tl: {
          hd: 6,
          tl: /* [] */0
        }
      }
    }, mod2), true);
    Test_utils.eq("File \"belt_list_test.res\", line 266, characters 7-14", Belt_List.every({
      hd: 1,
      tl: /* [] */0
    }, mod2), false);
    Test_utils.eq("File \"belt_list_test.res\", line 267, characters 7-14", Belt_List.every(/* [] */0, mod2), true);
    Test_utils.eq("File \"belt_list_test.res\", line 268, characters 7-14", Belt_List.some({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, mod2), true);
    Test_utils.eq("File \"belt_list_test.res\", line 269, characters 7-14", Belt_List.some({
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, mod2), false);
    Test_utils.eq("File \"belt_list_test.res\", line 270, characters 7-14", Belt_List.some(/* [] */0, mod2), false);
    Test_utils.eq("File \"belt_list_test.res\", line 271, characters 7-14", Belt_List.has({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, "2", (x, s) => x.toString() === s), true);
    Test_utils.eq("File \"belt_list_test.res\", line 272, characters 7-14", Belt_List.has({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, "0", (x, s) => x.toString() === s), false);
    Test_utils.ok("File \"belt_list_test.res\", line 274, characters 7-14", Belt_List.reduceReverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (prim0, prim1) => prim0 + prim1 | 0) === 10);
    Test_utils.ok("File \"belt_list_test.res\", line 275, characters 7-14", Belt_List.reduceReverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 10, (prim0, prim1) => prim0 - prim1 | 0) === 0);
    Test_utils.ok("File \"belt_list_test.res\", line 276, characters 7-14", Primitive_object.equal(Belt_List.reduceReverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, /* [] */0, Belt_List.add), {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }));
    Test_utils.ok("File \"belt_list_test.res\", line 277, characters 7-14", Belt_List.reduce({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (prim0, prim1) => prim0 + prim1 | 0) === 10);
    Test_utils.ok("File \"belt_list_test.res\", line 278, characters 7-14", Belt_List.reduce({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 10, (prim0, prim1) => prim0 - prim1 | 0) === 0);
    Test_utils.ok("File \"belt_list_test.res\", line 279, characters 7-14", Primitive_object.equal(Belt_List.reduce({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, /* [] */0, Belt_List.add), {
      hd: 4,
      tl: {
        hd: 3,
        tl: {
          hd: 2,
          tl: {
            hd: 1,
            tl: /* [] */0
          }
        }
      }
    }));
    Test_utils.ok("File \"belt_list_test.res\", line 280, characters 7-14", Belt_List.reduceWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (acc, x, i) => (acc + x | 0) + i | 0) === 16);
    Test_utils.ok("File \"belt_list_test.res\", line 281, characters 7-14", Belt_List.reduceReverse2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, 0, (acc, x, y) => (acc + x | 0) + y | 0) === 6);
    let a = Belt_List.makeBy(10000, i => i);
    Test_utils.ok("File \"belt_list_test.res\", line 284, characters 6-13", Belt_List.reduceReverse2(a, {
      hd: 0,
      tl: a
    }, 0, (acc, x, y) => (acc + x | 0) + y | 0) === 99980001);
  });
  Mocha.test("every2", () => {
    Test_utils.eq("File \"belt_list_test.res\", line 290, characters 7-14", Belt_List.every2(/* [] */0, {
      hd: 1,
      tl: /* [] */0
    }, (x, y) => x > y), true);
    Test_utils.eq("File \"belt_list_test.res\", line 291, characters 7-14", Belt_List.every2({
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: /* [] */0
    }, (x, y) => x > y), true);
    Test_utils.eq("File \"belt_list_test.res\", line 292, characters 7-14", Belt_List.every2({
      hd: 2,
      tl: /* [] */0
    }, {
      hd: 1,
      tl: /* [] */0
    }, (x, y) => x > y), true);
    Test_utils.eq("File \"belt_list_test.res\", line 293, characters 7-14", Belt_List.every2({
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: {
        hd: 4,
        tl: /* [] */0
      }
    }, (x, y) => x > y), false);
    Test_utils.eq("File \"belt_list_test.res\", line 294, characters 7-14", Belt_List.every2({
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: {
        hd: 0,
        tl: /* [] */0
      }
    }, (x, y) => x > y), true);
  });
  Mocha.test("some2", () => {
    Test_utils.eq("File \"belt_list_test.res\", line 298, characters 7-14", Belt_List.some2(/* [] */0, {
      hd: 1,
      tl: /* [] */0
    }, (x, y) => x > y), false);
    Test_utils.eq("File \"belt_list_test.res\", line 299, characters 7-14", Belt_List.some2({
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: /* [] */0
    }, (x, y) => x > y), true);
    Test_utils.eq("File \"belt_list_test.res\", line 300, characters 7-14", Belt_List.some2({
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: {
        hd: 4,
        tl: /* [] */0
      }
    }, (x, y) => x > y), true);
    Test_utils.eq("File \"belt_list_test.res\", line 301, characters 7-14", Belt_List.some2({
      hd: 0,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: {
        hd: 4,
        tl: /* [] */0
      }
    }, (x, y) => x > y), false);
    Test_utils.eq("File \"belt_list_test.res\", line 302, characters 7-14", Belt_List.some2({
      hd: 0,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 3,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, (x, y) => x > y), true);
    Test_utils.eq("File \"belt_list_test.res\", line 303, characters 7-14", Belt_List.some2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: -1,
      tl: {
        hd: -2,
        tl: /* [] */0
      }
    }, (x, y) => x === y), false);
  });
  Mocha.test("add", () => Test_utils.eq("File \"belt_list_test.res\", line 307, characters 7-14", Belt_List.add(Belt_List.add(/* [] */0, 3), 2), {
    hd: 2,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }));
  Mocha.test("cmp", () => {
    Test_utils.ok("File \"belt_list_test.res\", line 311, characters 7-14", Belt_List.cmp({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 0,
      tl: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      }
    }, Primitive_int.compare) > 0);
    Test_utils.ok("File \"belt_list_test.res\", line 312, characters 7-14", Belt_List.cmp({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, Primitive_int.compare) > 0);
    Test_utils.ok("File \"belt_list_test.res\", line 313, characters 7-14", Belt_List.cmp({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, Primitive_int.compare) < 0);
    Test_utils.ok("File \"belt_list_test.res\", line 314, characters 7-14", Belt_List.cmp({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 0,
      tl: {
        hd: 1,
        tl: {
          hd: 2,
          tl: /* [] */0
        }
      }
    }, Primitive_int.compare) > 0);
    Test_utils.ok("File \"belt_list_test.res\", line 315, characters 7-14", Belt_List.cmp({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, Primitive_int.compare) === 0);
    Test_utils.ok("File \"belt_list_test.res\", line 316, characters 7-14", Belt_List.cmp({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 4,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, Primitive_int.compare) > 0);
  });
  Mocha.test("cmpByLength", () => {
    Test_utils.ok("File \"belt_list_test.res\", line 320, characters 7-14", Belt_List.cmpByLength(/* [] */0, /* [] */0) === 0);
    Test_utils.ok("File \"belt_list_test.res\", line 321, characters 7-14", Belt_List.cmpByLength({
      hd: 1,
      tl: /* [] */0
    }, /* [] */0) > 0);
    Test_utils.ok("File \"belt_list_test.res\", line 322, characters 7-14", Belt_List.cmpByLength(/* [] */0, {
      hd: 1,
      tl: /* [] */0
    }) < 0);
    Test_utils.ok("File \"belt_list_test.res\", line 323, characters 7-14", Belt_List.cmpByLength({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: /* [] */0
    }) > 0);
    Test_utils.ok("File \"belt_list_test.res\", line 324, characters 7-14", Belt_List.cmpByLength({
      hd: 1,
      tl: /* [] */0
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }) < 0);
    Test_utils.ok("File \"belt_list_test.res\", line 325, characters 7-14", Belt_List.cmpByLength({
      hd: 1,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }) === 0);
  });
  Mocha.test("makeBy", () => {
    let makeTest = n => Test_utils.eq("File \"belt_list_test.res\", line 329, characters 27-34", Belt_List.make(n, 3), Belt_List.makeBy(n, param => 3));
    makeTest(0);
    makeTest(1);
    makeTest(2);
    makeTest(3);
  });
  Mocha.test("sort", () => {
    let cmp = (a, b) => a - b | 0;
    Test_utils.eq("File \"belt_list_test.res\", line 339, characters 7-14", Belt_List.sort({
      hd: 5,
      tl: {
        hd: 4,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, cmp), {
      hd: 2,
      tl: {
        hd: 3,
        tl: {
          hd: 4,
          tl: {
            hd: 5,
            tl: /* [] */0
          }
        }
      }
    });
    Test_utils.eq("File \"belt_list_test.res\", line 340, characters 7-14", Belt_List.sort({
      hd: 3,
      tl: {
        hd: 9,
        tl: {
          hd: 37,
          tl: {
            hd: 3,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          }
        }
      }
    }, cmp), {
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 3,
          tl: {
            hd: 9,
            tl: {
              hd: 37,
              tl: /* [] */0
            }
          }
        }
      }
    });
  });
  Mocha.test("eq", () => {
    Test_utils.ok("File \"belt_list_test.res\", line 344, characters 7-14", !Belt_List.eq({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, (x, y) => x === y));
    Test_utils.ok("File \"belt_list_test.res\", line 345, characters 7-14", Belt_List.eq({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, (x, y) => x === y));
    Test_utils.ok("File \"belt_list_test.res\", line 346, characters 7-14", !Belt_List.eq({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 4,
          tl: /* [] */0
        }
      }
    }, (x, y) => x === y));
    Test_utils.ok("File \"belt_list_test.res\", line 347, characters 7-14", !Belt_List.eq({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, (prim0, prim1) => prim0 === prim1));
  });
  Mocha.test("keepMap", () => {
    let u0 = Belt_List.makeBy(20, x => x);
    let u1 = Belt_List.keepMap(u0, x => {
      if (x % 7 === 0) {
        return x + 1 | 0;
      }
      
    });
    Test_utils.eq("File \"belt_list_test.res\", line 360, characters 7-14", u1, {
      hd: 1,
      tl: {
        hd: 8,
        tl: {
          hd: 15,
          tl: /* [] */0
        }
      }
    });
    Test_utils.ok("File \"belt_list_test.res\", line 362, characters 6-13", Primitive_object.equal(Belt_List.keepMap({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, x => {
      if (x % 2 === 0) {
        return -x | 0;
      }
      
    }), {
      hd: -2,
      tl: {
        hd: -4,
        tl: /* [] */0
      }
    }));
    Test_utils.ok("File \"belt_list_test.res\", line 377, characters 6-13", Belt_List.keepMap({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, x => {
      if (x % 5 === 0) {
        return x;
      }
      
    }) === /* [] */0);
  });
});

let N;

let A;

exports.N = N;
exports.A = A;
exports.sum = sum;
exports.sum2 = sum2;
/*  Not a pure module */
