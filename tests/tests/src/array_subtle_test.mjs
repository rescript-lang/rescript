// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mt from "./mt.mjs";
import * as Primitive_array from "rescript/lib/es6/Primitive_array.js";

let suites = {
  contents: /* [] */0
};

let test_id = {
  contents: 0
};

function eq(loc, param) {
  let y = param[1];
  let x = param[0];
  test_id.contents = test_id.contents + 1 | 0;
  suites.contents = {
    hd: [
      loc + (" id " + test_id.contents.toString()),
      () => ({
        TAG: "Eq",
        _0: x,
        _1: y
      })
    ],
    tl: suites.contents
  };
}

let v = [
  1,
  2,
  3,
  3
];

eq("File \"array_subtle_test.res\", line 16, characters 12-19", [
  4,
  v.length
]);

eq("File \"array_subtle_test.res\", line 19, characters 5-12", [
  5,
  v.push(3)
]);

eq("File \"array_subtle_test.res\", line 20, characters 5-12", [
  5,
  v.length
]);

eq("File \"array_subtle_test.res\", line 21, characters 5-12", [
  5,
  v.length
]);

eq("File \"array_subtle_test.res\", line 25, characters 5-12", [
  3,
  Primitive_array.get(v, 2)
]);

Primitive_array.set(v, 2, 4);

eq("File \"array_subtle_test.res\", line 27, characters 5-12", [
  4,
  Primitive_array.get(v, 2)
]);

while (v.length > 0) {
  v.pop();
};

eq("File \"array_subtle_test.res\", line 34, characters 5-12", [
  0,
  v.length
]);

function f(v) {
  let x = v.pop();
  if (x !== undefined) {
    console.log("hi");
  } else {
    console.log("hi2");
  }
  console.log((v.pop(), undefined));
}

function fff(x) {
  return true;
}

function fff2(x) {
  if (x.length >= 10) {
    console.log("hi");
    return;
  }
  
}

function fff3(x) {
  return 1;
}

function fff4(x) {
  if (x.length !== 0) {
    return 1;
  } else {
    return 2;
  }
}

eq("File \"array_subtle_test.res\", line 66, characters 3-10", [
  fff3([]),
  1
]);

eq("File \"array_subtle_test.res\", line 67, characters 3-10", [
  fff4([]),
  2
]);

eq("File \"array_subtle_test.res\", line 68, characters 3-10", [
  fff4([1]),
  1
]);

Mt.from_pair_suites("Array_subtle_test", suites.contents);

let $$Array;

export {
  $$Array,
  suites,
  test_id,
  eq,
  v,
  f,
  fff,
  fff2,
  fff3,
  fff4,
}
/*  Not a pure module */
