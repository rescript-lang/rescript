// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mocha from "mocha";
import * as Belt_Id from "@rescript/runtime/lib/es6/Belt_Id.js";
import * as Belt_Set from "@rescript/runtime/lib/es6/Belt_Set.js";
import * as Belt_List from "@rescript/runtime/lib/es6/Belt_List.js";
import * as Belt_Array from "@rescript/runtime/lib/es6/Belt_Array.js";
import * as Test_utils from "./test_utils.mjs";
import * as Belt_SetDict from "@rescript/runtime/lib/es6/Belt_SetDict.js";
import * as Primitive_int from "@rescript/runtime/lib/es6/Primitive_int.js";
import * as Belt_SortArray from "@rescript/runtime/lib/es6/Belt_SortArray.js";
import * as Array_data_util from "./array_data_util.mjs";
import * as Primitive_object from "@rescript/runtime/lib/es6/Primitive_object.js";

let IntCmp = Belt_Id.comparable(Primitive_int.compare);

function testIterToList(xs) {
  let v = {
    contents: /* [] */0
  };
  Belt_Set.forEach(xs, x => {
    v.contents = {
      hd: x,
      tl: v.contents
    };
  });
  return Belt_List.reverse(v.contents);
}

function testIterToList2(xs) {
  let v = {
    contents: /* [] */0
  };
  Belt_SetDict.forEach(Belt_Set.getData(xs), x => {
    v.contents = {
      hd: x,
      tl: v.contents
    };
  });
  return Belt_List.reverse(v.contents);
}

Mocha.describe("Bs_poly_set_test", () => {
  Mocha.test("basic set operations", () => {
    let u0 = Belt_Set.fromArray(Array_data_util.range(0, 30), IntCmp);
    let u1 = Belt_Set.remove(u0, 0);
    let u2 = Belt_Set.remove(u1, 0);
    let u3 = Belt_Set.remove(u2, 30);
    let u4 = Belt_Set.remove(u3, 20);
    let r = Array_data_util.randomRange(0, 30);
    let u5 = Belt_Set.add(u4, 3);
    let u6 = Belt_Set.removeMany(u5, r);
    let u7 = Belt_Set.mergeMany(u6, [
      0,
      1,
      2,
      0
    ]);
    let u8 = Belt_Set.removeMany(u7, [
      0,
      1,
      2,
      3
    ]);
    let u9 = Belt_Set.mergeMany(u8, Array_data_util.randomRange(0, 20000));
    let u10 = Belt_Set.mergeMany(u9, Array_data_util.randomRange(0, 200));
    let u11 = Belt_Set.removeMany(u10, Array_data_util.randomRange(0, 200));
    let u12 = Belt_Set.removeMany(u11, Array_data_util.randomRange(0, 1000));
    let u13 = Belt_Set.removeMany(u12, Array_data_util.randomRange(0, 1000));
    let u14 = Belt_Set.removeMany(u13, Array_data_util.randomRange(1000, 10000));
    let u15 = Belt_Set.removeMany(u14, Array_data_util.randomRange(10000, 19999));
    let u16 = Belt_Set.removeMany(u15, Array_data_util.randomRange(20000, 21000));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 45, characters 7-14", u0 !== u1);
    Test_utils.ok("File \"bs_poly_set_test.res\", line 46, characters 7-14", u2 === u1);
    Test_utils.eq("File \"bs_poly_set_test.res\", line 47, characters 7-14", Belt_Set.size(u4), 28);
    Test_utils.ok("File \"bs_poly_set_test.res\", line 48, characters 7-14", 29 === Belt_Set.maxUndefined(u4));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 49, characters 7-14", 1 === Belt_Set.minUndefined(u4));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 50, characters 7-14", u4 === u5);
    Test_utils.ok("File \"bs_poly_set_test.res\", line 51, characters 7-14", Belt_Set.isEmpty(u6));
    Test_utils.eq("File \"bs_poly_set_test.res\", line 52, characters 7-14", Belt_Set.size(u7), 3);
    Test_utils.ok("File \"bs_poly_set_test.res\", line 53, characters 7-14", !Belt_Set.isEmpty(u7));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 54, characters 7-14", Belt_Set.isEmpty(u8));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 55, characters 7-14", Belt_Set.has(u10, 20));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 56, characters 7-14", Belt_Set.has(u10, 21));
    Test_utils.eq("File \"bs_poly_set_test.res\", line 57, characters 7-14", Belt_Set.size(u10), 20001);
    Test_utils.eq("File \"bs_poly_set_test.res\", line 58, characters 7-14", Belt_Set.size(u11), 19800);
    Test_utils.eq("File \"bs_poly_set_test.res\", line 59, characters 7-14", Belt_Set.size(u12), 19000);
    Test_utils.eq("File \"bs_poly_set_test.res\", line 60, characters 7-14", Belt_Set.size(u13), Belt_Set.size(u12));
    Test_utils.eq("File \"bs_poly_set_test.res\", line 61, characters 7-14", Belt_Set.size(u14), 10000);
    Test_utils.eq("File \"bs_poly_set_test.res\", line 62, characters 7-14", Belt_Set.size(u15), 1);
    Test_utils.ok("File \"bs_poly_set_test.res\", line 63, characters 7-14", Belt_Set.has(u15, 20000));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 64, characters 7-14", !Belt_Set.has(u15, 2000));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 65, characters 7-14", Belt_Set.isEmpty(u16));
  });
  Mocha.test("set union and intersection operations", () => {
    let u17 = Belt_Set.fromArray(Array_data_util.randomRange(0, 100), IntCmp);
    let u18 = Belt_Set.fromArray(Array_data_util.randomRange(59, 200), IntCmp);
    let u19 = Belt_Set.union(u17, u18);
    let u20 = Belt_Set.fromArray(Array_data_util.randomRange(0, 200), IntCmp);
    let u21 = Belt_Set.intersect(u17, u18);
    let u22 = Belt_Set.diff(u17, u18);
    let u23 = Belt_Set.diff(u18, u17);
    let u24 = Belt_Set.union(u18, u17);
    let u25 = Belt_Set.add(u22, 59);
    let u26 = Belt_Set.add(Belt_Set.make(IntCmp), 3);
    let ss = Belt_Array.makeByAndShuffle(100, i => (i << 1));
    let u27 = Belt_Set.fromArray(ss, IntCmp);
    let u28 = Belt_Set.union(u27, u26);
    let u29 = Belt_Set.union(u26, u27);
    Test_utils.ok("File \"bs_poly_set_test.res\", line 82, characters 7-14", Belt_Set.eq(u28, u29));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 83, characters 7-14", Primitive_object.equal(Belt_Set.toArray(u29), Belt_SortArray.stableSortBy(Belt_Array.concat(ss, [3]), Primitive_int.compare)));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 84, characters 7-14", Belt_Set.eq(u19, u20));
    Test_utils.eq("File \"bs_poly_set_test.res\", line 85, characters 7-14", Belt_Set.toArray(u21), Array_data_util.range(59, 100));
    Test_utils.eq("File \"bs_poly_set_test.res\", line 86, characters 7-14", Belt_Set.toArray(u22), Array_data_util.range(0, 58));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 87, characters 7-14", Belt_Set.eq(u24, u19));
    Test_utils.eq("File \"bs_poly_set_test.res\", line 88, characters 7-14", Belt_Set.toArray(u23), Array_data_util.range(101, 200));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 89, characters 7-14", Belt_Set.subset(u23, u18));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 90, characters 7-14", !Belt_Set.subset(u18, u23));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 91, characters 7-14", Belt_Set.subset(u22, u17));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 92, characters 7-14", Belt_Set.subset(u21, u17) && Belt_Set.subset(u21, u18));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 93, characters 7-14", 47 === Belt_Set.getUndefined(u22, 47));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 94, characters 7-14", Primitive_object.equal(47, Belt_Set.get(u22, 47)));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 95, characters 7-14", Belt_Set.getUndefined(u22, 59) === undefined);
    Test_utils.ok("File \"bs_poly_set_test.res\", line 96, characters 7-14", undefined === Belt_Set.get(u22, 59));
    Test_utils.eq("File \"bs_poly_set_test.res\", line 98, characters 7-14", Belt_Set.size(u25), 60);
    Test_utils.ok("File \"bs_poly_set_test.res\", line 99, characters 7-14", Belt_Set.minimum(Belt_Set.make(IntCmp)) === undefined);
    Test_utils.ok("File \"bs_poly_set_test.res\", line 100, characters 7-14", Belt_Set.maximum(Belt_Set.make(IntCmp)) === undefined);
    Test_utils.ok("File \"bs_poly_set_test.res\", line 101, characters 7-14", Belt_Set.minUndefined(Belt_Set.make(IntCmp)) === undefined);
    Test_utils.ok("File \"bs_poly_set_test.res\", line 102, characters 7-14", Belt_Set.maxUndefined(Belt_Set.make(IntCmp)) === undefined);
  });
  Mocha.test("set iteration and comparison operations", () => {
    let u0 = Belt_Set.fromArray(Array_data_util.randomRange(0, 20), IntCmp);
    let u1 = Belt_Set.remove(u0, 17);
    let u2 = Belt_Set.add(u1, 33);
    Test_utils.ok("File \"bs_poly_set_test.res\", line 109, characters 7-14", Belt_List.every2(testIterToList(u0), Belt_List.makeBy(21, i => i), (x, y) => x === y));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 110, characters 7-14", Belt_List.every2(testIterToList2(u0), Belt_List.makeBy(21, i => i), (x, y) => x === y));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 111, characters 7-14", Belt_List.every2(testIterToList(u0), Belt_Set.toList(u0), (x, y) => x === y));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 112, characters 7-14", Belt_Set.some(u0, x => x === 17));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 113, characters 7-14", !Belt_Set.some(u1, x => x === 17));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 114, characters 7-14", Belt_Set.every(u0, x => x < 24));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 115, characters 7-14", Belt_SetDict.every(Belt_Set.getData(u0), x => x < 24));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 116, characters 7-14", !Belt_Set.every(u2, x => x < 24));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 117, characters 7-14", !Belt_Set.every(Belt_Set.fromArray([
      1,
      2,
      3
    ], IntCmp), x => x === 2));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 118, characters 7-14", Belt_Set.cmp(u1, u0) < 0);
    Test_utils.ok("File \"bs_poly_set_test.res\", line 119, characters 7-14", Belt_Set.cmp(u0, u1) > 0);
  });
  Mocha.test("set keep and partition operations", () => {
    let a0 = Belt_Set.fromArray(Array_data_util.randomRange(0, 1000), IntCmp);
    let a1 = Belt_Set.keep(a0, x => x % 2 === 0);
    let a2 = Belt_Set.keep(a0, x => x % 2 !== 0);
    let match = Belt_Set.partition(a0, x => x % 2 === 0);
    let a4 = match[1];
    let a3 = match[0];
    Test_utils.ok("File \"bs_poly_set_test.res\", line 126, characters 7-14", Belt_Set.eq(a1, a3));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 127, characters 7-14", Belt_Set.eq(a2, a4));
    Test_utils.eq("File \"bs_poly_set_test.res\", line 128, characters 7-14", Belt_Set.getExn(a0, 3), 3);
    Test_utils.eq("File \"bs_poly_set_test.res\", line 129, characters 7-14", Belt_Set.getExn(a0, 4), 4);
    Test_utils.throws("File \"bs_poly_set_test.res\", line 130, characters 11-18", () => {
      Belt_Set.getExn(a0, 1002);
    });
    Test_utils.throws("File \"bs_poly_set_test.res\", line 131, characters 11-18", () => {
      Belt_Set.getExn(a0, -1);
    });
    Test_utils.eq("File \"bs_poly_set_test.res\", line 132, characters 7-14", Belt_Set.size(a0), 1001);
    Test_utils.ok("File \"bs_poly_set_test.res\", line 133, characters 7-14", !Belt_Set.isEmpty(a0));
    let match$1 = Belt_Set.split(a0, 200);
    let match$2 = match$1[0];
    Test_utils.ok("File \"bs_poly_set_test.res\", line 135, characters 7-14", match$1[1]);
    Test_utils.eq("File \"bs_poly_set_test.res\", line 136, characters 7-14", Belt_Set.toArray(match$2[0]), Belt_Array.makeBy(200, i => i));
    Test_utils.eq("File \"bs_poly_set_test.res\", line 137, characters 7-14", Belt_Set.toList(match$2[1]), Belt_List.makeBy(800, i => i + 201 | 0));
    let a7 = Belt_Set.remove(a0, 200);
    let match$3 = Belt_Set.split(a7, 200);
    let match$4 = match$3[0];
    let a9 = match$4[1];
    let a8 = match$4[0];
    Test_utils.ok("File \"bs_poly_set_test.res\", line 140, characters 7-14", !match$3[1]);
    Test_utils.eq("File \"bs_poly_set_test.res\", line 141, characters 7-14", Belt_Set.toArray(a8), Belt_Array.makeBy(200, i => i));
    Test_utils.eq("File \"bs_poly_set_test.res\", line 142, characters 7-14", Belt_Set.toList(a9), Belt_List.makeBy(800, i => i + 201 | 0));
    Test_utils.eq("File \"bs_poly_set_test.res\", line 143, characters 7-14", Belt_Set.minimum(a8), 0);
    Test_utils.eq("File \"bs_poly_set_test.res\", line 144, characters 7-14", Belt_Set.minimum(a9), 201);
    Belt_List.forEach({
      hd: a0,
      tl: {
        hd: a1,
        tl: {
          hd: a2,
          tl: {
            hd: a3,
            tl: {
              hd: a4,
              tl: /* [] */0
            }
          }
        }
      }
    }, Belt_Set.checkInvariantInternal);
  });
  Mocha.test("empty set operations", () => {
    let a = Belt_Set.fromArray([], IntCmp);
    Test_utils.ok("File \"bs_poly_set_test.res\", line 150, characters 7-14", Belt_Set.isEmpty(Belt_Set.keep(a, x => x % 2 === 0)));
  });
  Mocha.test("split empty set operations", () => {
    let match = Belt_Set.split(Belt_Set.make(IntCmp), 0);
    let match$1 = match[0];
    Test_utils.ok("File \"bs_poly_set_test.res\", line 155, characters 7-14", Belt_Set.isEmpty(match$1[0]));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 156, characters 7-14", Belt_Set.isEmpty(match$1[1]));
    Test_utils.ok("File \"bs_poly_set_test.res\", line 157, characters 7-14", !match[1]);
  });
});

let N;

let D;

let I;

let A;

let S;

let L;

export {
  N,
  D,
  I,
  A,
  S,
  IntCmp,
  L,
  testIterToList,
  testIterToList2,
}
/* IntCmp Not a pure module */
