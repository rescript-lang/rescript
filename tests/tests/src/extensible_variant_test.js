// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

let Mt = require("./mt.js");
let Primitive_exceptions = require("rescript/lib/js/primitive_exceptions.js");

let Str = /* @__PURE__ */Primitive_exceptions.create("Extensible_variant_test.Str");

let Int = /* @__PURE__ */Primitive_exceptions.create("Extensible_variant_test.N.Int");

let N = {
  Int: Int
};

let Int$1 = /* @__PURE__ */Primitive_exceptions.create("Extensible_variant_test.Int");

function to_int(x) {
  if (x.RE_EXN_ID === Str) {
    return -1;
  }
  if (x.RE_EXN_ID === Int) {
    return x._1;
  }
  if (x.RE_EXN_ID === Int$1) {
    return x._2;
  }
  throw {
    RE_EXN_ID: "Assert_failure",
    _1: [
      "extensible_variant_test.res",
      16,
      9
    ],
    Error: new Error()
  };
}

let suites_0 = [
  "test_int",
  param => ({
    TAG: "Eq",
    _0: 3,
    _1: to_int({
      RE_EXN_ID: Int,
      _1: 3,
      _2: 0
    })
  })
];

let suites_1 = {
  hd: [
    "test_int2",
    param => ({
      TAG: "Eq",
      _0: 0,
      _1: to_int({
        RE_EXN_ID: Int$1,
        _1: 3,
        _2: 0
      })
    })
  ],
  tl: {
    hd: [
      "test_string",
      param => ({
        TAG: "Eq",
        _0: -1,
        _1: to_int({
          RE_EXN_ID: Str,
          _1: "x"
        })
      })
    ],
    tl: /* [] */0
  }
};

let suites = {
  hd: suites_0,
  tl: suites_1
};

Mt.from_pair_suites("Extensible_variant_test", suites);

exports.Str = Str;
exports.N = N;
exports.Int = Int$1;
exports.to_int = to_int;
exports.suites = suites;
/*  Not a pure module */
