// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mocha from "mocha";
import * as Belt_Id from "@rescript/runtime/lib/es6/Belt_Id.js";
import * as Belt_Map from "@rescript/runtime/lib/es6/Belt_Map.js";
import * as Belt_Set from "@rescript/runtime/lib/es6/Belt_Set.js";
import * as Belt_Array from "@rescript/runtime/lib/es6/Belt_Array.js";
import * as Test_utils from "./test_utils.mjs";
import * as Primitive_int from "@rescript/runtime/lib/es6/Primitive_int.js";
import * as Array_data_util from "./array_data_util.mjs";
import * as Primitive_option from "@rescript/runtime/lib/es6/Primitive_option.js";

let Icmp = Belt_Id.comparable(Primitive_int.compare);

function mapOfArray(x) {
  return Belt_Map.fromArray(x, Icmp);
}

function setOfArray(x) {
  return Belt_Set.fromArray(x, Icmp);
}

function emptyMap() {
  return Belt_Map.make(Icmp);
}

function mergeInter(s1, s2) {
  return Belt_Set.fromArray(Belt_Map.keysToArray(Belt_Map.merge(s1, s2, (k, v1, v2) => {
    if (v1 !== undefined && v2 !== undefined) {
      return Primitive_option.some(undefined);
    }
    
  })), Icmp);
}

function mergeUnion(s1, s2) {
  return Belt_Set.fromArray(Belt_Map.keysToArray(Belt_Map.merge(s1, s2, (k, v1, v2) => {
    if (v1 !== undefined || v2 !== undefined) {
      return Primitive_option.some(undefined);
    }
    
  })), Icmp);
}

function mergeDiff(s1, s2) {
  return Belt_Set.fromArray(Belt_Map.keysToArray(Belt_Map.merge(s1, s2, (k, v1, v2) => {
    if (v1 !== undefined && v2 === undefined) {
      return Primitive_option.some(undefined);
    }
    
  })), Icmp);
}

function randomRange(i, j) {
  return Belt_Array.map(Array_data_util.randomRange(i, j), x => [
    x,
    x
  ]);
}

Mocha.describe("Bs_poly_map_test", () => {
  Mocha.test("bs_poly_map_test_1", () => {
    let u0 = Belt_Map.fromArray(randomRange(0, 100), Icmp);
    let u1 = Belt_Map.fromArray(randomRange(30, 120), Icmp);
    Test_utils.ok("File \"bs_poly_map_test.res\", line 58, characters 7-14", Belt_Set.eq(mergeInter(u0, u1), Belt_Set.fromArray(Array_data_util.range(30, 100), Icmp)));
    Test_utils.ok("File \"bs_poly_map_test.res\", line 59, characters 7-14", Belt_Set.eq(mergeUnion(u0, u1), Belt_Set.fromArray(Array_data_util.range(0, 120), Icmp)));
    Test_utils.ok("File \"bs_poly_map_test.res\", line 60, characters 7-14", Belt_Set.eq(mergeDiff(u0, u1), Belt_Set.fromArray(Array_data_util.range(0, 29), Icmp)));
    Test_utils.ok("File \"bs_poly_map_test.res\", line 61, characters 7-14", Belt_Set.eq(mergeDiff(u1, u0), Belt_Set.fromArray(Array_data_util.range(101, 120), Icmp)));
  });
  Mocha.test("bs_poly_map_test_2", () => {
    let a0 = Belt_Map.fromArray(randomRange(0, 10), Icmp);
    let a1 = Belt_Map.set(a0, 3, 33);
    let a2 = Belt_Map.remove(a1, 3);
    let a3 = Belt_Map.update(a2, 3, k => {
      if (k !== undefined) {
        return k + 1 | 0;
      } else {
        return 11;
      }
    });
    let a4 = Belt_Map.update(a2, 3, k => {
      if (k !== undefined) {
        return k + 1 | 0;
      }
      
    });
    let a5 = Belt_Map.remove(a0, 3);
    let a6 = Belt_Map.remove(a5, 3);
    Test_utils.ok("File \"bs_poly_map_test.res\", line 88, characters 7-14", a5 === a6);
    Test_utils.ok("File \"bs_poly_map_test.res\", line 89, characters 7-14", Belt_Map.has(a0, 3));
    Test_utils.ok("File \"bs_poly_map_test.res\", line 90, characters 7-14", !Belt_Map.has(a5, 3));
    Test_utils.ok("File \"bs_poly_map_test.res\", line 91, characters 7-14", 3 === Belt_Map.getUndefined(a0, 3));
    Test_utils.ok("File \"bs_poly_map_test.res\", line 92, characters 7-14", 33 === Belt_Map.getUndefined(a1, 3));
    Test_utils.ok("File \"bs_poly_map_test.res\", line 93, characters 7-14", Belt_Map.getUndefined(a2, 3) === undefined);
    Test_utils.ok("File \"bs_poly_map_test.res\", line 95, characters 7-14", 11 === Belt_Map.getUndefined(a3, 3));
    Test_utils.ok("File \"bs_poly_map_test.res\", line 96, characters 7-14", Belt_Map.getUndefined(a4, 3) === undefined);
    let a7 = Belt_Map.removeMany(a0, [
      7,
      8,
      0,
      1,
      3,
      2,
      4,
      922,
      4,
      5,
      6
    ]);
    Test_utils.eq("File \"bs_poly_map_test.res\", line 99, characters 7-14", Belt_Map.keysToArray(a7), [
      9,
      10
    ]);
    let a8 = Belt_Map.removeMany(a7, Array_data_util.randomRange(0, 100));
    Test_utils.ok("File \"bs_poly_map_test.res\", line 101, characters 7-14", Belt_Map.isEmpty(a8));
  });
  Mocha.test("bs_poly_map_test_3", () => {
    let u0 = Belt_Map.fromArray(randomRange(0, 100), Icmp);
    let u1 = Belt_Map.set(u0, 3, 32);
    Test_utils.eq("File \"bs_poly_map_test.res\", line 107, characters 7-14", Belt_Map.get(u1, 3), 32);
    Test_utils.eq("File \"bs_poly_map_test.res\", line 108, characters 7-14", Belt_Map.get(u0, 3), 3);
  });
  let acc = (m, is) => Belt_Array.reduce(is, m, (a, i) => Belt_Map.update(a, i, n => {
    if (n !== undefined) {
      return n + 1 | 0;
    } else {
      return 1;
    }
  }));
  Mocha.test("bs_poly_map_test_4", () => {
    let m = Belt_Map.make(Icmp);
    let m1 = acc(m, Belt_Array.concat(Array_data_util.randomRange(0, 20), Array_data_util.randomRange(10, 30)));
    Test_utils.ok("File \"bs_poly_map_test.res\", line 125, characters 6-13", Belt_Map.eq(m1, Belt_Map.fromArray(Belt_Array.makeBy(31, i => [
      i,
      i >= 10 && i <= 20 ? 2 : 1
    ]), Icmp), (x, y) => x === y));
  });
  Mocha.test("bs_poly_map_test_5", () => {
    let v0 = Belt_Map.make(Icmp);
    let v1 = Belt_Map.mergeMany(v0, Belt_Array.map(Array_data_util.randomRange(0, 10000), x => [
      x,
      x
    ]));
    let v2 = Belt_Map.fromArray(Belt_Array.map(Array_data_util.randomRange(0, 10000), x => [
      x,
      x
    ]), Icmp);
    Test_utils.ok("File \"bs_poly_map_test.res\", line 152, characters 7-14", Belt_Map.eq(v1, v2, (x, y) => x === y));
    let inc = x => {
      if (x !== undefined) {
        return x + 1 | 0;
      } else {
        return 0;
      }
    };
    let v3 = Belt_Map.update(v1, 10, inc);
    let v4 = Belt_Map.update(v3, -10, inc);
    let match = Belt_Map.split(v3, 5000);
    let pres = match[1];
    let match$1 = match[0];
    let match$2 = Belt_Map.get(v3, 10);
    Test_utils.ok("File \"bs_poly_map_test.res\", line 163, characters 6-13", match$2 === 11);
    let match$3 = Belt_Map.get(v3, -10);
    Test_utils.ok("File \"bs_poly_map_test.res\", line 170, characters 6-13", match$3 === undefined);
    let match$4 = Belt_Map.get(v4, -10);
    Test_utils.ok("File \"bs_poly_map_test.res\", line 177, characters 6-13", match$4 === 0);
    Test_utils.ok("File \"bs_poly_map_test.res\", line 183, characters 7-14", Belt_Map.isEmpty(Belt_Map.remove(Belt_Map.make(Icmp), 0)));
    Test_utils.ok("File \"bs_poly_map_test.res\", line 184, characters 7-14", Belt_Map.isEmpty(Belt_Map.removeMany(Belt_Map.make(Icmp), [0])));
    Test_utils.ok("File \"bs_poly_map_test.res\", line 186, characters 6-13", pres === 5000);
    Test_utils.ok("File \"bs_poly_map_test.res\", line 192, characters 7-14", Belt_Array.eq(Belt_Map.keysToArray(match$1[0]), Belt_Array.makeBy(5000, i => i), (a, b) => a === b));
    Test_utils.ok("File \"bs_poly_map_test.res\", line 193, characters 7-14", Belt_Array.eq(Belt_Map.keysToArray(match$1[1]), Belt_Array.makeBy(5000, i => 5001 + i | 0), (a, b) => a === b));
    let v7 = Belt_Map.remove(v3, 5000);
    let match$5 = Belt_Map.split(v7, 5000);
    let match$6 = match$5[0];
    Test_utils.ok("File \"bs_poly_map_test.res\", line 198, characters 6-13", match$5[1] === undefined);
    Test_utils.ok("File \"bs_poly_map_test.res\", line 204, characters 7-14", Belt_Array.eq(Belt_Map.keysToArray(match$6[0]), Belt_Array.makeBy(5000, i => i), (a, b) => a === b));
    Test_utils.ok("File \"bs_poly_map_test.res\", line 205, characters 7-14", Belt_Array.eq(Belt_Map.keysToArray(match$6[1]), Belt_Array.makeBy(5000, i => 5001 + i | 0), (a, b) => a === b));
  });
});

let M;

let N;

let A;

let I;

export {
  Icmp,
  M,
  N,
  A,
  I,
  mapOfArray,
  setOfArray,
  emptyMap,
  mergeInter,
  mergeUnion,
  mergeDiff,
  randomRange,
}
/* Icmp Not a pure module */
