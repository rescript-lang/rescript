// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

let Mt = require("./mt.js");
let Belt_Id = require("rescript/lib/js/belt_Id.js");
let Belt_Set = require("rescript/lib/js/belt_Set.js");
let Belt_List = require("rescript/lib/js/belt_List.js");
let Belt_Array = require("rescript/lib/js/belt_Array.js");
let Belt_SetDict = require("rescript/lib/js/belt_SetDict.js");
let Primitive_int = require("rescript/lib/js/primitive_int.js");
let Belt_SortArray = require("rescript/lib/js/belt_SortArray.js");
let Array_data_util = require("./array_data_util.js");
let Primitive_object = require("rescript/lib/js/primitive_object.js");

let suites = {
  contents: /* [] */0
};

let test_id = {
  contents: 0
};

function eq(loc, x, y) {
  Mt.eq_suites(test_id, suites, loc, x, y);
}

function b(loc, x) {
  Mt.bool_suites(test_id, suites, loc, x);
}

function t(loc, x) {
  Mt.throw_suites(test_id, suites, loc, x);
}

let IntCmp = Belt_Id.comparable(Primitive_int.compare);

let u0 = Belt_Set.fromArray(Array_data_util.range(0, 30), IntCmp);

let u1 = Belt_Set.remove(u0, 0);

let u2 = Belt_Set.remove(u1, 0);

let u3 = Belt_Set.remove(u2, 30);

let u4 = Belt_Set.remove(u3, 20);

let r = Array_data_util.randomRange(0, 30);

let u5 = Belt_Set.add(u4, 3);

let u6 = Belt_Set.removeMany(u5, r);

let u7 = Belt_Set.mergeMany(u6, [
  0,
  1,
  2,
  0
]);

let u8 = Belt_Set.removeMany(u7, [
  0,
  1,
  2,
  3
]);

let u9 = Belt_Set.mergeMany(u8, Array_data_util.randomRange(0, 20000));

let u10 = Belt_Set.mergeMany(u9, Array_data_util.randomRange(0, 200));

let u11 = Belt_Set.removeMany(u10, Array_data_util.randomRange(0, 200));

let u12 = Belt_Set.removeMany(u11, Array_data_util.randomRange(0, 1000));

let u13 = Belt_Set.removeMany(u12, Array_data_util.randomRange(0, 1000));

let u14 = Belt_Set.removeMany(u13, Array_data_util.randomRange(1000, 10000));

let u15 = Belt_Set.removeMany(u14, Array_data_util.randomRange(10000, 19999));

let u16 = Belt_Set.removeMany(u15, Array_data_util.randomRange(20000, 21000));

b("File \"bs_poly_set_test.res\", line 34, characters 4-11", u0 !== u1);

b("File \"bs_poly_set_test.res\", line 35, characters 4-11", u2 === u1);

eq("File \"bs_poly_set_test.res\", line 36, characters 5-12", Belt_Set.size(u4), 28);

b("File \"bs_poly_set_test.res\", line 37, characters 4-11", 29 === Belt_Set.maxUndefined(u4));

b("File \"bs_poly_set_test.res\", line 38, characters 4-11", 1 === Belt_Set.minUndefined(u4));

b("File \"bs_poly_set_test.res\", line 39, characters 4-11", u4 === u5);

b("File \"bs_poly_set_test.res\", line 40, characters 4-11", Belt_Set.isEmpty(u6));

eq("File \"bs_poly_set_test.res\", line 41, characters 5-12", Belt_Set.size(u7), 3);

b("File \"bs_poly_set_test.res\", line 42, characters 4-11", !Belt_Set.isEmpty(u7));

b("File \"bs_poly_set_test.res\", line 43, characters 4-11", Belt_Set.isEmpty(u8));

b("File \"bs_poly_set_test.res\", line 46, characters 4-11", Belt_Set.has(u10, 20));

b("File \"bs_poly_set_test.res\", line 47, characters 4-11", Belt_Set.has(u10, 21));

eq("File \"bs_poly_set_test.res\", line 48, characters 5-12", Belt_Set.size(u10), 20001);

eq("File \"bs_poly_set_test.res\", line 49, characters 5-12", Belt_Set.size(u11), 19800);

eq("File \"bs_poly_set_test.res\", line 50, characters 5-12", Belt_Set.size(u12), 19000);

eq("File \"bs_poly_set_test.res\", line 52, characters 5-12", Belt_Set.size(u13), Belt_Set.size(u12));

eq("File \"bs_poly_set_test.res\", line 53, characters 5-12", Belt_Set.size(u14), 10000);

eq("File \"bs_poly_set_test.res\", line 54, characters 5-12", Belt_Set.size(u15), 1);

b("File \"bs_poly_set_test.res\", line 55, characters 4-11", Belt_Set.has(u15, 20000));

b("File \"bs_poly_set_test.res\", line 56, characters 4-11", !Belt_Set.has(u15, 2000));

b("File \"bs_poly_set_test.res\", line 57, characters 4-11", Belt_Set.isEmpty(u16));

let u17 = Belt_Set.fromArray(Array_data_util.randomRange(0, 100), IntCmp);

let u18 = Belt_Set.fromArray(Array_data_util.randomRange(59, 200), IntCmp);

let u19 = Belt_Set.union(u17, u18);

let u20 = Belt_Set.fromArray(Array_data_util.randomRange(0, 200), IntCmp);

let u21 = Belt_Set.intersect(u17, u18);

let u22 = Belt_Set.diff(u17, u18);

let u23 = Belt_Set.diff(u18, u17);

let u24 = Belt_Set.union(u18, u17);

let u25 = Belt_Set.add(u22, 59);

let u26 = Belt_Set.add(Belt_Set.make(IntCmp), 3);

let ss = Belt_Array.makeByAndShuffle(100, i => (i << 1));

let u27 = Belt_Set.fromArray(ss, IntCmp);

let u28 = Belt_Set.union(u27, u26);

let u29 = Belt_Set.union(u26, u27);

b("File \"bs_poly_set_test.res\", line 71, characters 4-11", Belt_Set.eq(u28, u29));

b("File \"bs_poly_set_test.res\", line 72, characters 4-11", Primitive_object.equal(Belt_Set.toArray(u29), Belt_SortArray.stableSortBy(Belt_Array.concat(ss, [3]), Primitive_int.compare)));

b("File \"bs_poly_set_test.res\", line 73, characters 4-11", Belt_Set.eq(u19, u20));

eq("File \"bs_poly_set_test.res\", line 74, characters 5-12", Belt_Set.toArray(u21), Array_data_util.range(59, 100));

eq("File \"bs_poly_set_test.res\", line 75, characters 5-12", Belt_Set.toArray(u22), Array_data_util.range(0, 58));

b("File \"bs_poly_set_test.res\", line 76, characters 4-11", Belt_Set.eq(u24, u19));

eq("File \"bs_poly_set_test.res\", line 77, characters 5-12", Belt_Set.toArray(u23), Array_data_util.range(101, 200));

b("File \"bs_poly_set_test.res\", line 78, characters 4-11", Belt_Set.subset(u23, u18));

b("File \"bs_poly_set_test.res\", line 79, characters 4-11", !Belt_Set.subset(u18, u23));

b("File \"bs_poly_set_test.res\", line 80, characters 4-11", Belt_Set.subset(u22, u17));

b("File \"bs_poly_set_test.res\", line 81, characters 4-11", Belt_Set.subset(u21, u17) && Belt_Set.subset(u21, u18));

b("File \"bs_poly_set_test.res\", line 82, characters 4-11", 47 === Belt_Set.getUndefined(u22, 47));

b("File \"bs_poly_set_test.res\", line 83, characters 4-11", Primitive_object.equal(47, Belt_Set.get(u22, 47)));

b("File \"bs_poly_set_test.res\", line 84, characters 4-11", Belt_Set.getUndefined(u22, 59) === undefined);

b("File \"bs_poly_set_test.res\", line 85, characters 4-11", undefined === Belt_Set.get(u22, 59));

eq("File \"bs_poly_set_test.res\", line 87, characters 5-12", Belt_Set.size(u25), 60);

b("File \"bs_poly_set_test.res\", line 88, characters 4-11", Belt_Set.minimum(Belt_Set.make(IntCmp)) === undefined);

b("File \"bs_poly_set_test.res\", line 89, characters 4-11", Belt_Set.maximum(Belt_Set.make(IntCmp)) === undefined);

b("File \"bs_poly_set_test.res\", line 90, characters 4-11", Belt_Set.minUndefined(Belt_Set.make(IntCmp)) === undefined);

b("File \"bs_poly_set_test.res\", line 91, characters 4-11", Belt_Set.maxUndefined(Belt_Set.make(IntCmp)) === undefined);

function testIterToList(xs) {
  let v = {
    contents: /* [] */0
  };
  Belt_Set.forEach(xs, x => {
    v.contents = {
      hd: x,
      tl: v.contents
    };
  });
  return Belt_List.reverse(v.contents);
}

function testIterToList2(xs) {
  let v = {
    contents: /* [] */0
  };
  Belt_SetDict.forEach(Belt_Set.getData(xs), x => {
    v.contents = {
      hd: x,
      tl: v.contents
    };
  });
  return Belt_List.reverse(v.contents);
}

let u0$1 = Belt_Set.fromArray(Array_data_util.randomRange(0, 20), IntCmp);

let u1$1 = Belt_Set.remove(u0$1, 17);

let u2$1 = Belt_Set.add(u1$1, 33);

b("File \"bs_poly_set_test.res\", line 110, characters 4-11", Belt_List.every2(testIterToList(u0$1), Belt_List.makeBy(21, i => i), (x, y) => x === y));

b("File \"bs_poly_set_test.res\", line 111, characters 4-11", Belt_List.every2(testIterToList2(u0$1), Belt_List.makeBy(21, i => i), (x, y) => x === y));

b("File \"bs_poly_set_test.res\", line 112, characters 4-11", Belt_List.every2(testIterToList(u0$1), Belt_Set.toList(u0$1), (x, y) => x === y));

b("File \"bs_poly_set_test.res\", line 113, characters 4-11", Belt_Set.some(u0$1, x => x === 17));

b("File \"bs_poly_set_test.res\", line 114, characters 4-11", !Belt_Set.some(u1$1, x => x === 17));

b("File \"bs_poly_set_test.res\", line 115, characters 4-11", Belt_Set.every(u0$1, x => x < 24));

b("File \"bs_poly_set_test.res\", line 116, characters 4-11", Belt_SetDict.every(Belt_Set.getData(u0$1), x => x < 24));

b("File \"bs_poly_set_test.res\", line 117, characters 4-11", !Belt_Set.every(u2$1, x => x < 24));

b("File \"bs_poly_set_test.res\", line 118, characters 4-11", !Belt_Set.every(Belt_Set.fromArray([
  1,
  2,
  3
], IntCmp), x => x === 2));

b("File \"bs_poly_set_test.res\", line 119, characters 4-11", Belt_Set.cmp(u1$1, u0$1) < 0);

b("File \"bs_poly_set_test.res\", line 120, characters 4-11", Belt_Set.cmp(u0$1, u1$1) > 0);

let a0 = Belt_Set.fromArray(Array_data_util.randomRange(0, 1000), IntCmp);

let a1 = Belt_Set.keep(a0, x => x % 2 === 0);

let a2 = Belt_Set.keep(a0, x => x % 2 !== 0);

let match = Belt_Set.partition(a0, x => x % 2 === 0);

let a4 = match[1];

let a3 = match[0];

b("File \"bs_poly_set_test.res\", line 127, characters 4-11", Belt_Set.eq(a1, a3));

b("File \"bs_poly_set_test.res\", line 128, characters 4-11", Belt_Set.eq(a2, a4));

eq("File \"bs_poly_set_test.res\", line 129, characters 5-12", Belt_Set.getExn(a0, 3), 3);

eq("File \"bs_poly_set_test.res\", line 130, characters 5-12", Belt_Set.getExn(a0, 4), 4);

t("File \"bs_poly_set_test.res\", line 131, characters 4-11", () => {
  Belt_Set.getExn(a0, 1002);
});

t("File \"bs_poly_set_test.res\", line 132, characters 4-11", () => {
  Belt_Set.getExn(a0, -1);
});

eq("File \"bs_poly_set_test.res\", line 133, characters 5-12", Belt_Set.size(a0), 1001);

b("File \"bs_poly_set_test.res\", line 134, characters 4-11", !Belt_Set.isEmpty(a0));

let match$1 = Belt_Set.split(a0, 200);

let match$2 = match$1[0];

b("File \"bs_poly_set_test.res\", line 136, characters 4-11", match$1[1]);

eq("File \"bs_poly_set_test.res\", line 137, characters 5-12", Belt_Set.toArray(match$2[0]), Belt_Array.makeBy(200, i => i));

eq("File \"bs_poly_set_test.res\", line 138, characters 5-12", Belt_Set.toList(match$2[1]), Belt_List.makeBy(800, i => i + 201 | 0));

let a7 = Belt_Set.remove(a0, 200);

let match$3 = Belt_Set.split(a7, 200);

let match$4 = match$3[0];

let a9 = match$4[1];

let a8 = match$4[0];

b("File \"bs_poly_set_test.res\", line 141, characters 4-11", !match$3[1]);

eq("File \"bs_poly_set_test.res\", line 142, characters 5-12", Belt_Set.toArray(a8), Belt_Array.makeBy(200, i => i));

eq("File \"bs_poly_set_test.res\", line 143, characters 5-12", Belt_Set.toList(a9), Belt_List.makeBy(800, i => i + 201 | 0));

eq("File \"bs_poly_set_test.res\", line 144, characters 5-12", Belt_Set.minimum(a8), 0);

eq("File \"bs_poly_set_test.res\", line 145, characters 5-12", Belt_Set.minimum(a9), 201);

Belt_List.forEach({
  hd: a0,
  tl: {
    hd: a1,
    tl: {
      hd: a2,
      tl: {
        hd: a3,
        tl: {
          hd: a4,
          tl: /* [] */0
        }
      }
    }
  }
}, Belt_Set.checkInvariantInternal);

let a = Belt_Set.fromArray([], IntCmp);

b("File \"bs_poly_set_test.res\", line 151, characters 4-11", Belt_Set.isEmpty(Belt_Set.keep(a, x => x % 2 === 0)));

let match$5 = Belt_Set.split(Belt_Set.make(IntCmp), 0);

let match$6 = match$5[0];

b("File \"bs_poly_set_test.res\", line 156, characters 4-11", Belt_Set.isEmpty(match$6[0]));

b("File \"bs_poly_set_test.res\", line 157, characters 4-11", Belt_Set.isEmpty(match$6[1]));

b("File \"bs_poly_set_test.res\", line 158, characters 4-11", !match$5[1]);

Mt.from_pair_suites("Bs_poly_set_test", suites.contents);

let N;

let D;

let I;

let A;

let S;

let L;

exports.suites = suites;
exports.test_id = test_id;
exports.eq = eq;
exports.b = b;
exports.t = t;
exports.N = N;
exports.D = D;
exports.I = I;
exports.A = A;
exports.S = S;
exports.IntCmp = IntCmp;
exports.L = L;
exports.testIterToList = testIterToList;
exports.testIterToList2 = testIterToList2;
/* IntCmp Not a pure module */
