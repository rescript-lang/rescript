// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mocha from "mocha";
import * as Belt_Id from "@rescript/runtime/lib/es6/Belt_Id.js";
import * as Belt_List from "@rescript/runtime/lib/es6/Belt_List.js";
import * as Belt_Array from "@rescript/runtime/lib/es6/Belt_Array.js";
import * as Test_utils from "./test_utils.mjs";
import * as Primitive_int from "@rescript/runtime/lib/es6/Primitive_int.js";
import * as Array_data_util from "./array_data_util.mjs";
import * as Belt_MutableSet from "@rescript/runtime/lib/es6/Belt_MutableSet.js";

let IntCmp = Belt_Id.comparable(Primitive_int.compare);

function fromArray(none) {
  return Belt_MutableSet.fromArray(none, IntCmp);
}

function empty() {
  return Belt_MutableSet.make(IntCmp);
}

Mocha.describe("Bs_poly_mutable_set_test", () => {
  Mocha.test("basic mutable set operations", () => {
    let u = Belt_MutableSet.fromArray(Array_data_util.range(0, 30), IntCmp);
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 15, characters 7-14", Belt_MutableSet.removeCheck(u, 0));
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 16, characters 7-14", !Belt_MutableSet.removeCheck(u, 0));
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 17, characters 7-14", Belt_MutableSet.removeCheck(u, 30));
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 18, characters 7-14", Belt_MutableSet.removeCheck(u, 20));
    Test_utils.eq("File \"bs_poly_mutable_set_test.res\", line 19, characters 7-14", Belt_MutableSet.size(u), 28);
    let r = Array_data_util.randomRange(0, 30);
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 21, characters 7-14", 29 === Belt_MutableSet.maxUndefined(u));
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 22, characters 7-14", 1 === Belt_MutableSet.minUndefined(u));
    Belt_MutableSet.add(u, 3);
    for (let i = 0, i_finish = r.length; i < i_finish; ++i) {
      Belt_MutableSet.remove(u, r[i]);
    }
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 27, characters 7-14", Belt_MutableSet.isEmpty(u));
    Belt_MutableSet.add(u, 0);
    Belt_MutableSet.add(u, 1);
    Belt_MutableSet.add(u, 2);
    Belt_MutableSet.add(u, 0);
    Test_utils.eq("File \"bs_poly_mutable_set_test.res\", line 32, characters 7-14", Belt_MutableSet.size(u), 3);
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 33, characters 7-14", !Belt_MutableSet.isEmpty(u));
    for (let i$1 = 0; i$1 <= 3; ++i$1) {
      Belt_MutableSet.remove(u, i$1);
    }
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 37, characters 7-14", Belt_MutableSet.isEmpty(u));
    Belt_MutableSet.mergeMany(u, Array_data_util.randomRange(0, 20000));
    Belt_MutableSet.mergeMany(u, Array_data_util.randomRange(0, 200));
    Test_utils.eq("File \"bs_poly_mutable_set_test.res\", line 40, characters 7-14", Belt_MutableSet.size(u), 20001);
    Belt_MutableSet.removeMany(u, Array_data_util.randomRange(0, 200));
    Test_utils.eq("File \"bs_poly_mutable_set_test.res\", line 42, characters 7-14", Belt_MutableSet.size(u), 19800);
    Belt_MutableSet.removeMany(u, Array_data_util.randomRange(0, 1000));
    Test_utils.eq("File \"bs_poly_mutable_set_test.res\", line 44, characters 7-14", Belt_MutableSet.size(u), 19000);
    Belt_MutableSet.removeMany(u, Array_data_util.randomRange(0, 1000));
    Test_utils.eq("File \"bs_poly_mutable_set_test.res\", line 46, characters 7-14", Belt_MutableSet.size(u), 19000);
    Belt_MutableSet.removeMany(u, Array_data_util.randomRange(1000, 10000));
    Test_utils.eq("File \"bs_poly_mutable_set_test.res\", line 48, characters 7-14", Belt_MutableSet.size(u), 10000);
    Belt_MutableSet.removeMany(u, Array_data_util.randomRange(10000, 19999));
    Test_utils.eq("File \"bs_poly_mutable_set_test.res\", line 50, characters 7-14", Belt_MutableSet.size(u), 1);
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 51, characters 7-14", Belt_MutableSet.has(u, 20000));
    Belt_MutableSet.removeMany(u, Array_data_util.randomRange(10000, 30000));
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 53, characters 7-14", Belt_MutableSet.isEmpty(u));
  });
  Mocha.test("mutable set add/remove operations", () => {
    let v = Belt_MutableSet.fromArray(Array_data_util.randomRange(1000, 2000), IntCmp);
    let bs = Belt_Array.map(Array_data_util.randomRange(500, 1499), x => Belt_MutableSet.removeCheck(v, x));
    let indeedRemoved = Belt_Array.reduce(bs, 0, (acc, x) => {
      if (x) {
        return acc + 1 | 0;
      } else {
        return acc;
      }
    });
    Test_utils.eq("File \"bs_poly_mutable_set_test.res\", line 69, characters 7-14", indeedRemoved, 500);
    Test_utils.eq("File \"bs_poly_mutable_set_test.res\", line 70, characters 7-14", Belt_MutableSet.size(v), 501);
    let cs = Belt_Array.map(Array_data_util.randomRange(500, 2000), x => Belt_MutableSet.addCheck(v, x));
    let indeedAded = Belt_Array.reduce(cs, 0, (acc, x) => {
      if (x) {
        return acc + 1 | 0;
      } else {
        return acc;
      }
    });
    Test_utils.eq("File \"bs_poly_mutable_set_test.res\", line 82, characters 7-14", indeedAded, 1000);
    Test_utils.eq("File \"bs_poly_mutable_set_test.res\", line 83, characters 7-14", Belt_MutableSet.size(v), 1501);
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 84, characters 7-14", Belt_MutableSet.isEmpty(Belt_MutableSet.make(IntCmp)));
    Test_utils.eq("File \"bs_poly_mutable_set_test.res\", line 85, characters 7-14", Belt_MutableSet.minimum(v), 500);
    Test_utils.eq("File \"bs_poly_mutable_set_test.res\", line 86, characters 7-14", Belt_MutableSet.maximum(v), 2000);
    Test_utils.eq("File \"bs_poly_mutable_set_test.res\", line 87, characters 7-14", Belt_MutableSet.minUndefined(v), 500);
    Test_utils.eq("File \"bs_poly_mutable_set_test.res\", line 88, characters 7-14", Belt_MutableSet.maxUndefined(v), 2000);
    Test_utils.eq("File \"bs_poly_mutable_set_test.res\", line 89, characters 7-14", Belt_MutableSet.reduce(v, 0, (x, y) => x + y | 0), 1876250);
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 90, characters 7-14", Belt_List.eq(Belt_MutableSet.toList(v), Belt_List.makeBy(1501, i => i + 500 | 0), (x, y) => x === y));
    Test_utils.eq("File \"bs_poly_mutable_set_test.res\", line 91, characters 7-14", Belt_MutableSet.toArray(v), Array_data_util.range(500, 2000));
    Belt_MutableSet.checkInvariantInternal(v);
    Test_utils.eq("File \"bs_poly_mutable_set_test.res\", line 93, characters 7-14", Belt_MutableSet.get(v, 3), undefined);
    Test_utils.eq("File \"bs_poly_mutable_set_test.res\", line 94, characters 7-14", Belt_MutableSet.get(v, 1200), 1200);
    let match = Belt_MutableSet.split(v, 1000);
    let match$1 = match[0];
    let bb = match$1[1];
    let aa = match$1[0];
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 96, characters 7-14", match[1]);
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 97, characters 7-14", Belt_Array.eq(Belt_MutableSet.toArray(aa), Array_data_util.range(500, 999), (x, y) => x === y));
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 98, characters 7-14", Belt_Array.eq(Belt_MutableSet.toArray(bb), Array_data_util.range(1001, 2000), (x, y) => x === y));
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 99, characters 7-14", Belt_MutableSet.subset(aa, v));
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 100, characters 7-14", Belt_MutableSet.subset(bb, v));
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 101, characters 7-14", Belt_MutableSet.isEmpty(Belt_MutableSet.intersect(aa, bb)));
    let c = Belt_MutableSet.removeCheck(v, 1000);
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 103, characters 7-14", c);
    let match$2 = Belt_MutableSet.split(v, 1000);
    let match$3 = match$2[0];
    let bb$1 = match$3[1];
    let aa$1 = match$3[0];
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 105, characters 7-14", !match$2[1]);
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 106, characters 7-14", Belt_Array.eq(Belt_MutableSet.toArray(aa$1), Array_data_util.range(500, 999), (x, y) => x === y));
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 107, characters 7-14", Belt_Array.eq(Belt_MutableSet.toArray(bb$1), Array_data_util.range(1001, 2000), (x, y) => x === y));
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 108, characters 7-14", Belt_MutableSet.subset(aa$1, v));
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 109, characters 7-14", Belt_MutableSet.subset(bb$1, v));
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 110, characters 7-14", Belt_MutableSet.isEmpty(Belt_MutableSet.intersect(aa$1, bb$1)));
  });
  Mocha.test("mutable set union and intersection operations", () => {
    let aa = Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 100), IntCmp);
    let bb = Belt_MutableSet.fromArray(Array_data_util.randomRange(40, 120), IntCmp);
    let cc = Belt_MutableSet.union(aa, bb);
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 120, characters 7-14", Belt_MutableSet.eq(cc, Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 120), IntCmp)));
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 123, characters 6-13", Belt_MutableSet.eq(Belt_MutableSet.union(Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 20), IntCmp), Belt_MutableSet.fromArray(Array_data_util.randomRange(21, 40), IntCmp)), Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 40), IntCmp)));
    let dd = Belt_MutableSet.intersect(aa, bb);
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 127, characters 7-14", Belt_MutableSet.eq(dd, Belt_MutableSet.fromArray(Array_data_util.randomRange(40, 100), IntCmp)));
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 128, characters 7-14", Belt_MutableSet.eq(Belt_MutableSet.intersect(Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 20), IntCmp), Belt_MutableSet.fromArray(Array_data_util.randomRange(21, 40), IntCmp)), Belt_MutableSet.make(IntCmp)));
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 129, characters 7-14", Belt_MutableSet.eq(Belt_MutableSet.intersect(Belt_MutableSet.fromArray(Array_data_util.randomRange(21, 40), IntCmp), Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 20), IntCmp)), Belt_MutableSet.make(IntCmp)));
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 130, characters 7-14", Belt_MutableSet.eq(Belt_MutableSet.intersect(Belt_MutableSet.fromArray([
      1,
      3,
      4,
      5,
      7,
      9
    ], IntCmp), Belt_MutableSet.fromArray([
      2,
      4,
      5,
      6,
      8,
      10
    ], IntCmp)), Belt_MutableSet.fromArray([
      4,
      5
    ], IntCmp)));
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 131, characters 7-14", Belt_MutableSet.eq(Belt_MutableSet.diff(aa, bb), Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 39), IntCmp)));
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 132, characters 7-14", Belt_MutableSet.eq(Belt_MutableSet.diff(bb, aa), Belt_MutableSet.fromArray(Array_data_util.randomRange(101, 120), IntCmp)));
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 134, characters 6-13", Belt_MutableSet.eq(Belt_MutableSet.diff(Belt_MutableSet.fromArray(Array_data_util.randomRange(21, 40), IntCmp), Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 20), IntCmp)), Belt_MutableSet.fromArray(Array_data_util.randomRange(21, 40), IntCmp)));
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 138, characters 6-13", Belt_MutableSet.eq(Belt_MutableSet.diff(Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 20), IntCmp), Belt_MutableSet.fromArray(Array_data_util.randomRange(21, 40), IntCmp)), Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 20), IntCmp)));
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 143, characters 6-13", Belt_MutableSet.eq(Belt_MutableSet.diff(Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 20), IntCmp), Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 40), IntCmp)), Belt_MutableSet.fromArray(Array_data_util.randomRange(0, -1), IntCmp)));
  });
  Mocha.test("mutable set keep and partition operations", () => {
    let a0 = Belt_MutableSet.fromArray(Array_data_util.randomRange(0, 1000), IntCmp);
    let a1 = Belt_MutableSet.keep(a0, x => x % 2 === 0);
    let a2 = Belt_MutableSet.keep(a0, x => x % 2 !== 0);
    let match = Belt_MutableSet.partition(a0, x => x % 2 === 0);
    let a4 = match[1];
    let a3 = match[0];
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 152, characters 7-14", Belt_MutableSet.eq(a1, a3));
    Test_utils.ok("File \"bs_poly_mutable_set_test.res\", line 153, characters 7-14", Belt_MutableSet.eq(a2, a4));
    Belt_List.forEach({
      hd: a0,
      tl: {
        hd: a1,
        tl: {
          hd: a2,
          tl: {
            hd: a3,
            tl: {
              hd: a4,
              tl: /* [] */0
            }
          }
        }
      }
    }, Belt_MutableSet.checkInvariantInternal);
  });
});

let N;

let I;

let A;

let L;

export {
  N,
  I,
  A,
  IntCmp,
  L,
  fromArray,
  empty,
}
/* IntCmp Not a pure module */
