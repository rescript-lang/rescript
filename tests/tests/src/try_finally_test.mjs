// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Primitive_exceptions from "@rescript/runtime/lib/es6/Primitive_exceptions.js";

let TestError = /* @__PURE__ */Primitive_exceptions.create("Try_finally_test.TestError");

function testFinallyBasic() {
  try {
    return 2;
  } catch (exn) {
    return 0;
  } finally {
    console.log("Finally executed!");
  }
}

function testFinallyWithException() {
  try {
    throw {
      RE_EXN_ID: TestError,
      Error: new Error()
    };
  } catch (raw_exn) {
    let exn = Primitive_exceptions.internalToException(raw_exn);
    if (exn.RE_EXN_ID === TestError) {
      return 1;
    }
    throw exn;
  } finally {
    console.log("Finally with exception executed!");
  }
}

function testFinallyWithoutCatch() {
  try {
    return 42;
  } catch (exn) {
    return 0;
  } finally {
    console.log("Finally without catch executed!");
  }
}

function testFinallyWithAssignment() {
  let x;
  try {
    x = 42;
  } catch (exn) {
    x = 0;
  } finally {
    console.log("Finally with assignment executed!");
  }
  console.log(x);
}

function testSingleLineFinally() {
  try {
    return 2;
  } catch (exn) {
    return 0;
  } finally {
    console.log("Single line!");
  }
}

function testMultiLineFinally() {
  try {
    throw {
      RE_EXN_ID: TestError,
      Error: new Error()
    };
  } catch (raw_exn) {
    let exn = Primitive_exceptions.internalToException(raw_exn);
    if (exn.RE_EXN_ID === TestError) {
      return 1;
    }
    throw exn;
  } finally {
    console.log("Line 1");
    console.log("Line 2");
    console.log("Line 3");
  }
}

function testTryFinallyWithoutCatch() {
  try {
    console.log("Doing operation");
    return 42;
  } finally {
    console.log("Finally without catch executed!");
  }
}

function testTryFinallyWithoutCatchWithException() {
  try {
    console.log("About to throw");
    throw {
      RE_EXN_ID: TestError,
      Error: new Error()
    };
  } finally {
    console.log("Finally without catch with exception executed!");
  }
}

function testTryFinallyWithoutCatchAssignment() {
  let x;
  try {
    console.log("Getting value");
    x = 42;
  } finally {
    console.log("Finally without catch with assignment executed!");
  }
  console.log(x);
}

export {
  TestError,
  testFinallyBasic,
  testFinallyWithException,
  testFinallyWithoutCatch,
  testFinallyWithAssignment,
  testSingleLineFinally,
  testMultiLineFinally,
  testTryFinallyWithoutCatch,
  testTryFinallyWithoutCatchWithException,
  testTryFinallyWithoutCatchAssignment,
}
/* No side effect */
