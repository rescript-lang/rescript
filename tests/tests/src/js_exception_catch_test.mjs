// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mocha from "mocha";
import * as Pervasives from "@rescript/runtime/lib/es6/Pervasives.js";
import * as Stdlib_Exn from "@rescript/runtime/lib/es6/Stdlib_Exn.js";
import * as Test_utils from "./test_utils.mjs";
import * as Primitive_exceptions from "@rescript/runtime/lib/es6/Primitive_exceptions.js";

Mocha.test("js_exception_catch_test_json_parse", () => {
  let e;
  try {
    e = JSON.parse(` {"x"}`);
  } catch (raw_x) {
    let x = Primitive_exceptions.internalToException(raw_x);
    if (x.RE_EXN_ID === Stdlib_Exn.$$Error) {
      return Test_utils.ok("File \"js_exception_catch_test.res\", line 7, characters 36-43", true);
    }
    throw x;
  }
  Test_utils.ok("File \"js_exception_catch_test.res\", line 8, characters 12-19", false);
});

let A = /* @__PURE__ */Primitive_exceptions.create("Js_exception_catch_test.A");

let B = /* @__PURE__ */Primitive_exceptions.create("Js_exception_catch_test.B");

let C = /* @__PURE__ */Primitive_exceptions.create("Js_exception_catch_test.C");

function testException(f) {
  try {
    f();
    return "No_error";
  } catch (raw_e) {
    let e = Primitive_exceptions.internalToException(raw_e);
    if (e.RE_EXN_ID === "Not_found") {
      return "Not_found";
    } else if (e.RE_EXN_ID === "Invalid_argument") {
      if (e._1 === "x") {
        return "Invalid_argument";
      } else {
        return "Invalid_any";
      }
    } else if (e.RE_EXN_ID === A) {
      if (e._1 !== 2) {
        return "A_any";
      } else {
        return "A2";
      }
    } else if (e.RE_EXN_ID === B) {
      return "B";
    } else if (e.RE_EXN_ID === C) {
      if (e._1 !== 1 || e._2 !== 2) {
        return "C_any";
      } else {
        return "C";
      }
    } else if (e.RE_EXN_ID === Stdlib_Exn.$$Error) {
      return "Js_error";
    } else {
      return "Any";
    }
  }
}

Mocha.describe("Js_exception_catch_test", () => {
  Mocha.test("js exception catch test", () => {
    Test_utils.eq("File \"js_exception_catch_test.res\", line 35, characters 7-14", testException(() => {}), "No_error");
    Test_utils.eq("File \"js_exception_catch_test.res\", line 36, characters 7-14", testException(() => {
      throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
    }), "Not_found");
    Test_utils.eq("File \"js_exception_catch_test.res\", line 37, characters 7-14", testException(() => Pervasives.invalid_arg("x")), "Invalid_argument");
    Test_utils.eq("File \"js_exception_catch_test.res\", line 38, characters 7-14", testException(() => Pervasives.invalid_arg("")), "Invalid_any");
    Test_utils.eq("File \"js_exception_catch_test.res\", line 39, characters 7-14", testException(() => {
      throw {
        RE_EXN_ID: A,
        _1: 2,
        Error: new Error()
      };
    }), "A2");
    Test_utils.eq("File \"js_exception_catch_test.res\", line 40, characters 7-14", testException(() => {
      throw {
        RE_EXN_ID: A,
        _1: 3,
        Error: new Error()
      };
    }), "A_any");
    Test_utils.eq("File \"js_exception_catch_test.res\", line 41, characters 7-14", testException(() => {
      throw {
        RE_EXN_ID: B,
        Error: new Error()
      };
    }), "B");
    Test_utils.eq("File \"js_exception_catch_test.res\", line 42, characters 7-14", testException(() => {
      throw {
        RE_EXN_ID: C,
        _1: 1,
        _2: 2,
        Error: new Error()
      };
    }), "C");
    Test_utils.eq("File \"js_exception_catch_test.res\", line 43, characters 7-14", testException(() => {
      throw {
        RE_EXN_ID: C,
        _1: 0,
        _2: 2,
        Error: new Error()
      };
    }), "C_any");
    Test_utils.eq("File \"js_exception_catch_test.res\", line 44, characters 7-14", testException(() => Stdlib_Exn.raiseError("x")), "Js_error");
    Test_utils.eq("File \"js_exception_catch_test.res\", line 45, characters 7-14", testException(() => Pervasives.failwith("x")), "Any");
  });
});

export {
  A,
  B,
  C,
  testException,
}
/*  Not a pure module */
