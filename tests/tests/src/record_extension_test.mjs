// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mt from "./mt.mjs";
import * as Belt_Int from "rescript/lib/es6/Belt_Int.js";
import * as Primitive_exceptions from "rescript/lib/es6/Primitive_exceptions.js";

let suites = {
  contents: /* [] */0
};

let test_id = {
  contents: 0
};

function eq(loc, x, y) {
  Mt.eq_suites(test_id, suites, loc, x, y);
}

let Inline_record = /* @__PURE__ */Primitive_exceptions.create("Record_extension_test.Inline_record");

let SinglePayload = /* @__PURE__ */Primitive_exceptions.create("Record_extension_test.SinglePayload");

let TuplePayload = /* @__PURE__ */Primitive_exceptions.create("Record_extension_test.TuplePayload");

function f(x) {
  if (x.RE_EXN_ID === Inline_record) {
    let y = Belt_Int.fromString(x.y);
    if (y !== undefined) {
      return x.x + y | 0;
    } else {
      return;
    }
  }
  if (x.RE_EXN_ID === SinglePayload) {
    return Belt_Int.fromString(x._1);
  }
  if (x.RE_EXN_ID !== TuplePayload) {
    return;
  }
  let v1 = Belt_Int.fromString(x._2);
  if (v1 !== undefined) {
    return x._1 + v1 | 0;
  }
  
}

eq("File \"record_extension_test.res\", line 26, characters 3-10", f({
  RE_EXN_ID: Inline_record,
  x: 3,
  y: "4"
}), 7);

eq("File \"record_extension_test.res\", line 27, characters 3-10", f({
  RE_EXN_ID: SinglePayload,
  _1: "1"
}), 1);

eq("File \"record_extension_test.res\", line 28, characters 3-10", f({
  RE_EXN_ID: TuplePayload,
  _1: 1,
  _2: "2"
}), 3);

function f2(x) {
  if (typeof x !== "object" || x.TAG !== "C") {
    return 0;
  } else {
    return x.x;
  }
}

function f2_with(x) {
  if (typeof x !== "object" || x.TAG !== "C") {
    return x;
  } else {
    return {
      TAG: "C",
      x: 0,
      y: x.y
    };
  }
}

let A = /* @__PURE__ */Primitive_exceptions.create("Record_extension_test.A");

let B = /* @__PURE__ */Primitive_exceptions.create("Record_extension_test.B");

let C = /* @__PURE__ */Primitive_exceptions.create("Record_extension_test.C");

function u(f) {
  try {
    return f();
  } catch (raw_x) {
    let x = Primitive_exceptions.internalToException(raw_x);
    if (x.RE_EXN_ID === A) {
      return x.name + x.x | 0;
    } else if (x.RE_EXN_ID === B) {
      return x._1 + x._2 | 0;
    } else if (x.RE_EXN_ID === C) {
      return x.name;
    } else {
      return -1;
    }
  }
}

eq("File \"record_extension_test.res\", line 65, characters 3-10", u(() => {
  throw {
    RE_EXN_ID: A,
    name: 1,
    x: 1,
    Error: new Error()
  };
}), 2);

eq("File \"record_extension_test.res\", line 66, characters 3-10", u(() => {
  throw {
    RE_EXN_ID: B,
    _1: 1,
    _2: 2,
    Error: new Error()
  };
}), 3);

eq("File \"record_extension_test.res\", line 67, characters 3-10", u(() => {
  throw {
    RE_EXN_ID: C,
    name: 4,
    Error: new Error()
  };
}), 4);

Mt.from_pair_suites("File \"record_extension_test.res\", line 69, characters 29-36", suites.contents);

export {
  suites,
  test_id,
  eq,
  Inline_record,
  SinglePayload,
  TuplePayload,
  f,
  f2,
  f2_with,
  A,
  B,
  C,
  u,
}
/*  Not a pure module */
