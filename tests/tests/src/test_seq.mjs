// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Pervasives from "rescript/lib/es6/Pervasives.js";
import * as Primitive_object from "rescript/lib/es6/Primitive_object.js";
import * as Primitive_exceptions from "rescript/lib/es6/Primitive_exceptions.js";

let Bad = /* @__PURE__ */Primitive_exceptions.create("Test_seq.Bad");

let Help = /* @__PURE__ */Primitive_exceptions.create("Test_seq.Help");

let Stop = /* @__PURE__ */Primitive_exceptions.create("Test_seq.Stop");

function assoc3(x, _l) {
  while (true) {
    let l = _l;
    if (l) {
      let match = l.hd;
      if (Primitive_object.equal(match[0], x)) {
        return match[1];
      }
      _l = l.tl;
      continue;
    }
    throw {
      RE_EXN_ID: "Not_found",
      Error: new Error()
    };
  };
}

function help_action() {
  throw {
    RE_EXN_ID: Stop,
    _1: {
      TAG: "Unknown",
      _0: "-help"
    },
    Error: new Error()
  };
}

function v(speclist) {
  assoc3("-help", speclist);
  return /* [] */0;
}

function f(g, speclist) {
  return g(assoc3("-help", speclist));
}

function add_help(speclist) {
  let add1;
  try {
    assoc3("-help", speclist);
    add1 = /* [] */0;
  } catch (raw_exn) {
    let exn = Primitive_exceptions.internalToException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      add1 = {
        hd: [
          "-help",
          {
            TAG: "Unit",
            _0: help_action
          },
          " Display this list of options"
        ],
        tl: /* [] */0
      };
    } else {
      throw exn;
    }
  }
  let add2;
  try {
    assoc3("--help", speclist);
    add2 = /* [] */0;
  } catch (raw_exn$1) {
    let exn$1 = Primitive_exceptions.internalToException(raw_exn$1);
    if (exn$1.RE_EXN_ID === "Not_found") {
      add2 = {
        hd: [
          "--help",
          {
            TAG: "Unit",
            _0: help_action
          },
          " Display this list of options"
        ],
        tl: /* [] */0
      };
    } else {
      throw exn$1;
    }
  }
  return Pervasives.$at(speclist, Pervasives.$at(add1, add2));
}

export {
  Bad,
  Help,
  Stop,
  assoc3,
  help_action,
  v,
  f,
  add_help,
}
/* No side effect */
