// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mocha from "mocha";
import * as Test_utils from "./test_utils.mjs";
import * as Primitive_object from "@rescript/runtime/lib/es6/Primitive_object.js";

function eq2(x, param) {
  let y = param.contents;
  return Primitive_object.equal(x.contents, y);
}

function ut3(param, param$1, param$2) {
  let x0 = param.contents;
  let x1 = param$1.contents;
  let x2 = param$2.contents;
  return [
    x0,
    x1,
    x2
  ];
}

function t3(param, param$1, param$2) {
  let x0 = param.contents;
  let x1 = param$1.contents;
  let x2 = param$2.contents;
  return [
    x0,
    x1,
    x2
  ];
}

function ut4(param, param$1, param$2, param$3) {
  let x0 = param.contents;
  let x1 = param$1.contents;
  return (param => {
    let x2 = param.contents;
    return param => {
      let x3 = param.contents;
      return [
        x0,
        x1,
        x2,
        x3
      ];
    };
  })(param$2)(param$3);
}

function t4(param, param$1, param$2, param$3) {
  let x0 = param.contents;
  let x1 = param$1.contents;
  return (param => {
    let x2 = param.contents;
    return param => {
      let x3 = param.contents;
      return [
        x0,
        x1,
        x2,
        x3
      ];
    };
  })(param$2)(param$3);
}

function ut5(param, param$1, param$2, param$3, param$4) {
  let x0 = param.contents;
  let x1 = param$1.contents;
  return (param => {
    let x2 = param.contents;
    return param => {
      let x3 = param.contents;
      return param => {
        let x4 = param.contents;
        return [
          x0,
          x1,
          x2,
          x3,
          x4
        ];
      };
    };
  })(param$2)(param$3)(param$4);
}

function t5(param, param$1, param$2, param$3, param$4) {
  let x0 = param.contents;
  let x1 = param$1.contents;
  return (param => {
    let x2 = param.contents;
    return param => {
      let x3 = param.contents;
      return param => {
        let x4 = param.contents;
        return [
          x0,
          x1,
          x2,
          x3,
          x4
        ];
      };
    };
  })(param$2)(param$3)(param$4);
}

function nested0(param, param$1, param$2) {
  let x0 = param.contents;
  let x1 = param$1.contents;
  let x2 = param$2.contents;
  let a = (x0 + x1 | 0) + x2 | 0;
  return (param, param$1, param$2) => {
    let x0 = param.contents;
    let x1 = param$1.contents;
    let x2 = param$2.contents;
    return ((a + x0 | 0) + x1 | 0) + x2 | 0;
  };
}

function nested1(param, param$1, param$2) {
  let x0 = param.contents;
  let x1 = param$1.contents;
  let x2 = param$2.contents;
  let a = (x0 + x1 | 0) + x2 | 0;
  return (param, param$1, param$2) => {
    let x0 = param.contents;
    let x1 = param$1.contents;
    let x2 = param$2.contents;
    return ((a + x0 | 0) + x1 | 0) + x2 | 0;
  };
}

Mocha.describe("Mutable_uncurry_test", () => {
  Mocha.test("eq with different refs", () => Test_utils.eq("File \"mutable_uncurry_test.res\", line 46, characters 42-49", false, eq2({
    contents: 1
  }, {
    contents: 2
  })));
  Mocha.test("eq with same refs", () => Test_utils.eq("File \"mutable_uncurry_test.res\", line 47, characters 37-44", true, eq2({
    contents: 2
  }, {
    contents: 2
  })));
  Mocha.test("ut3 function", () => Test_utils.eq("File \"mutable_uncurry_test.res\", line 48, characters 32-39", ut3({
    contents: 1
  }, {
    contents: 2
  }, {
    contents: 3
  }), [
    1,
    2,
    3
  ]));
  Mocha.test("t3 function", () => Test_utils.eq("File \"mutable_uncurry_test.res\", line 49, characters 31-38", t3({
    contents: 1
  }, {
    contents: 2
  }, {
    contents: 3
  }), [
    1,
    2,
    3
  ]));
  Mocha.test("ut5 function", () => Test_utils.eq("File \"mutable_uncurry_test.res\", line 51, characters 7-14", ut5({
    contents: 1
  }, {
    contents: 2
  }, {
    contents: 3
  }, {
    contents: 1
  }, {
    contents: 1
  }), [
    1,
    2,
    3,
    1,
    1
  ]));
});

export {
  eq2,
  ut3,
  t3,
  ut4,
  t4,
  ut5,
  t5,
  nested0,
  nested1,
}
/*  Not a pure module */
