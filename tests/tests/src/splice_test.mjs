// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mocha from "mocha";
import * as Belt_Array from "@rescript/runtime/lib/es6/Belt_Array.js";
import * as Test_utils from "./test_utils.mjs";

let Caml_splice_call = {};

Math.max(1);

function f00(a, b) {
  return a.send(b);
}

Mocha.test("splice_test_static", () => {
  let a = [];
  a.push(1, 2, 3, 4);
  Test_utils.eq("File \"splice_test.res\", line 23, characters 5-12", a, [
    1,
    2,
    3,
    4
  ]);
});

function dynamic(arr) {
  let a = [];
  a.push(1, ...arr);
  Test_utils.eq("File \"splice_test.res\", line 29, characters 5-12", a, Belt_Array.concatMany([
    [1],
    arr
  ]));
}

dynamic([
  2,
  3,
  4
]);

dynamic([]);

dynamic([
  1,
  1,
  3
]);

Mocha.test("splice_test_newArr_static", () => {
  let a = new Array(1, 2, 3, 4);
  Test_utils.eq("File \"splice_test.res\", line 44, characters 5-12", a, [
    1,
    2,
    3,
    4
  ]);
});

function dynamicNew(arr) {
  let a = new Array(1, 2, ...arr);
  Test_utils.eq("File \"splice_test.res\", line 49, characters 5-12", a, Belt_Array.concatMany([
    [
      1,
      2
    ],
    arr
  ]));
}

dynamicNew([
  3,
  4
]);

dynamicNew([]);

dynamicNew([
  1,
  3
]);

class Foo {
  constructor(...names) {
    this.names = names;
  }
}
;

Mocha.test("splice_test_foo_static", () => {
  let f = new Foo("a", "b", "c");
  Test_utils.eq("File \"splice_test.res\", line 71, characters 5-12", f.names, [
    "a",
    "b",
    "c"
  ]);
});

function dynamicFoo(arr) {
  let f = new Foo(...arr);
  Test_utils.eq("File \"splice_test.res\", line 76, characters 5-12", f.names, arr);
}

dynamicFoo([]);

dynamicFoo(["a"]);

dynamicFoo([
  "a",
  "b",
  "c"
]);

let a = [];

a.push(1, 2, 3, 4);

Test_utils.eq("File \"splice_test.res\", line 93, characters 7-14", a, [
  1,
  2,
  3,
  4
]);

function dynamic$1(arr) {
  let a = [];
  a.push(1, ...arr);
  Test_utils.eq("File \"splice_test.res\", line 99, characters 7-14", a, Belt_Array.concatMany([
    [1],
    arr
  ]));
}

dynamic$1([
  2,
  3,
  4
]);

dynamic$1([]);

dynamic$1([
  1,
  1,
  3
]);

let Pipe = {
  dynamic: dynamic$1
};

function f1(c) {
  return Math.max(1, ...c);
}

Mocha.describe("splice_test.res", () => {
  Mocha.test("f1 with [2, 3]", () => Test_utils.eq("File \"splice_test.res\", line 110, characters 34-41", 3, Math.max(1, 2, 3)));
  Mocha.test("f1 with empty", () => Test_utils.eq("File \"splice_test.res\", line 111, characters 33-40", 1, Math.max(1)));
  Mocha.test("f1 with many values", () => Test_utils.eq("File \"splice_test.res\", line 112, characters 39-46", 5, Math.max(1, 1, 2, 3, 4, 5, 2, 3)));
});

export {
  Caml_splice_call,
  f00,
  dynamic,
  dynamicNew,
  dynamicFoo,
  Pipe,
  f1,
}
/*  Not a pure module */
