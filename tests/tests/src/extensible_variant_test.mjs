// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mocha from "mocha";
import * as Test_utils from "./test_utils.mjs";
import * as Primitive_exceptions from "@rescript/runtime/lib/es6/Primitive_exceptions.js";

let Str = /* @__PURE__ */Primitive_exceptions.create("Extensible_variant_test.Str");

let Int = /* @__PURE__ */Primitive_exceptions.create("Extensible_variant_test.N.Int");

let N = {
  Int: Int
};

let Int$1 = /* @__PURE__ */Primitive_exceptions.create("Extensible_variant_test.Int");

function to_int(x) {
  if (x.RE_EXN_ID === Str) {
    return -1;
  }
  if (x.RE_EXN_ID === Int) {
    return x._1;
  }
  if (x.RE_EXN_ID === Int$1) {
    return x._2;
  }
  throw {
    RE_EXN_ID: "Assert_failure",
    _1: [
      "extensible_variant_test.res",
      19,
      9
    ],
    Error: new Error()
  };
}

Mocha.describe("Extensible_variant_test", () => {
  Mocha.test("test_int", () => Test_utils.eq("File \"extensible_variant_test.res\", line 24, characters 7-14", 3, to_int({
    RE_EXN_ID: Int,
    _1: 3,
    _2: 0
  })));
  Mocha.test("test_int2", () => Test_utils.eq("File \"extensible_variant_test.res\", line 28, characters 7-14", 0, to_int({
    RE_EXN_ID: Int$1,
    _1: 3,
    _2: 0
  })));
  Mocha.test("test_string", () => Test_utils.eq("File \"extensible_variant_test.res\", line 32, characters 7-14", -1, to_int({
    RE_EXN_ID: Str,
    _1: "x"
  })));
});

export {
  Str,
  N,
  Int$1 as Int,
  to_int,
}
/*  Not a pure module */
