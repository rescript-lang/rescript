// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mocha from "mocha";
import * as Test_utils from "./test_utils.mjs";
import * as Primitive_array from "@rescript/runtime/lib/es6/Primitive_array.js";
import * as Primitive_option from "@rescript/runtime/lib/es6/Primitive_option.js";

Mocha.describe("Js_re_test", () => {
  Mocha.test("fromString", () => {
    let contentOf = (tag, xmlString) => {
      let x = Primitive_option.fromNull(new RegExp("<" + (tag + (">(.*?)<\\/" + (tag + ">")))).exec(xmlString));
      if (x !== undefined) {
        return Primitive_option.fromNullable(Primitive_array.get(Primitive_option.valFromOption(x), 1));
      }
      
    };
    Test_utils.eq("File \"js_re_test.res\", line 33, characters 7-14", "Hi", contentOf("div", "<div>Hi</div>"));
  });
  Mocha.test("exec_literal", () => {
    let res = /[^.]+/.exec("http://xxx.domain.com");
    if (res !== null) {
      return Test_utils.eq("File \"js_re_test.res\", line 37, characters 22-29", "http://xxx", Primitive_array.get(res, 0));
    }
    throw {
      RE_EXN_ID: "Assert_failure",
      _1: [
        "js_re_test.res",
        38,
        14
      ],
      Error: new Error()
    };
  });
  Mocha.test("exec_no_match", () => {
    let match = /https:\/\/(.*)/.exec("http://xxx.domain.com");
    if (match !== null) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "js_re_test.res",
          43,
          17
        ],
        Error: new Error()
      };
    }
    Test_utils.eq("File \"js_re_test.res\", line 44, characters 17-24", true, true);
  });
  Mocha.test("test_str", () => {
    let res = new RegExp("foo").test("#foo#");
    Test_utils.eq("File \"js_re_test.res\", line 49, characters 7-14", true, res);
  });
  Mocha.test("fromStringWithFlags", () => {
    let res = new RegExp("foo", "g");
    Test_utils.eq("File \"js_re_test.res\", line 53, characters 7-14", true, res.global);
  });
  Mocha.test("result_index", () => {
    let res = new RegExp("zbar").exec("foobarbazbar");
    if (res !== null) {
      return Test_utils.eq("File \"js_re_test.res\", line 57, characters 22-29", 8, res.index);
    }
    throw {
      RE_EXN_ID: "Assert_failure",
      _1: [
        "js_re_test.res",
        58,
        14
      ],
      Error: new Error()
    };
  });
  Mocha.test("result_input", () => {
    let input = "foobar";
    let res = /foo/g.exec(input);
    if (res !== null) {
      return Test_utils.eq("File \"js_re_test.res\", line 64, characters 22-29", input, res.input);
    }
    throw {
      RE_EXN_ID: "Assert_failure",
      _1: [
        "js_re_test.res",
        65,
        14
      ],
      Error: new Error()
    };
  });
  Mocha.test("t_flags", () => Test_utils.eq("File \"js_re_test.res\", line 70, characters 7-14", "gi", /./ig.flags));
  Mocha.test("t_global", () => Test_utils.eq("File \"js_re_test.res\", line 73, characters 7-14", true, /./ig.global));
  Mocha.test("t_ignoreCase", () => Test_utils.eq("File \"js_re_test.res\", line 76, characters 7-14", true, /./ig.ignoreCase));
  Mocha.test("t_lastIndex", () => {
    let re = /na/g;
    re.exec("banana");
    Test_utils.eq("File \"js_re_test.res\", line 84, characters 7-14", 4, re.lastIndex);
  });
  Mocha.test("t_setLastIndex", () => {
    let re = /na/g;
    let before = re.lastIndex;
    re.lastIndex = 42;
    let after = re.lastIndex;
    Test_utils.eq("File \"js_re_test.res\", line 91, characters 7-14", [
      0,
      42
    ], [
      before,
      after
    ]);
  });
  Mocha.test("t_multiline", () => Test_utils.eq("File \"js_re_test.res\", line 94, characters 7-14", false, /./ig.multiline));
  Mocha.test("t_source", () => Test_utils.eq("File \"js_re_test.res\", line 97, characters 7-14", "f.+o", /f.+o/ig.source));
  Mocha.test("t_sticky", () => Test_utils.eq("File \"js_re_test.res\", line 101, characters 7-14", true, /./yg.sticky));
  Mocha.test("t_unicode", () => Test_utils.eq("File \"js_re_test.res\", line 104, characters 7-14", false, /./yg.unicode));
});

let $$Array;

export {
  $$Array,
}
/*  Not a pure module */
