// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_List from "rescript/lib/es6/Belt_List.js";
import * as Mt_global from "./mt_global.mjs";
import * as Belt_Array from "rescript/lib/es6/Belt_Array.js";
import * as Pervasives from "rescript/lib/es6/Pervasives.js";
import * as Primitive_float from "rescript/lib/es6/Primitive_float.js";
import * as Primitive_object from "rescript/lib/es6/Primitive_object.js";

let test_id = {
  contents: 0
};

let suites = {
  contents: /* [] */0
};

function eq(loc, x, y) {
  Mt_global.collect_eq(test_id, suites, loc, x, y);
}

function approx(loc, x, y) {
  Mt_global.collect_approx(test_id, suites, loc, x, y);
}

function from_pairs(ps) {
  return Belt_List.fromArray(Belt_Array.mapWithIndex(ps, (i, param) => {
    let b = param[1];
    let a = param[0];
    return [
      "pair " + i,
      param => ({
        TAG: "Approx",
        _0: a,
        _1: b
      })
    ];
  }));
}

let float_compare = Primitive_float.compare;

let generic_compare = Primitive_object.compare;

function float_equal(x, y) {
  return x === y;
}

let generic_equal = Primitive_object.equal;

function float_notequal(x, y) {
  return x !== y;
}

let generic_notequal = Primitive_object.notequal;

function float_lessthan(x, y) {
  return x < y;
}

let generic_lessthan = Primitive_object.lessthan;

function float_greaterthan(x, y) {
  return x > y;
}

let generic_greaterthan = Primitive_object.greaterthan;

function float_lessequal(x, y) {
  return x <= y;
}

let generic_lessequal = Primitive_object.lessequal;

function float_greaterequal(x, y) {
  return x >= y;
}

let generic_greaterequal = Primitive_object.greaterequal;

eq("File \"float_test.res\", line 28, characters 5-12", Pervasives.classify_float(3), "FP_normal");

eq("File \"float_test.res\", line 30, characters 4-11", [
  -1,
  1,
  1
], Belt_Array.map(Belt_Array.map([
  [
    1,
    3
  ],
  [
    2,
    1
  ],
  [
    3,
    2
  ]
], param => Primitive_float.compare(param[0], param[1])), x => {
  if (x > 0) {
    return 1;
  } else if (x < 0) {
    return -1;
  } else {
    return 0;
  }
}));

eq("File \"float_test.res\", line 44, characters 5-12", Math.log10(10), 1);

eq("File \"float_test.res\", line 45, characters 5-12", Number("3.0"), 3.0);

eq("File \"float_test.res\", line 46, characters 5-12", Primitive_float.compare(NaN, NaN), 0);

eq("File \"float_test.res\", line 47, characters 5-12", Primitive_object.compare(NaN, NaN), 0);

eq("File \"float_test.res\", line 48, characters 5-12", Primitive_float.compare(NaN, Pervasives.neg_infinity), -1);

eq("File \"float_test.res\", line 49, characters 5-12", Primitive_object.compare(NaN, Pervasives.neg_infinity), -1);

eq("File \"float_test.res\", line 50, characters 5-12", Primitive_float.compare(Pervasives.neg_infinity, NaN), 1);

eq("File \"float_test.res\", line 51, characters 5-12", Primitive_object.compare(Pervasives.neg_infinity, NaN), 1);

eq("File \"float_test.res\", line 52, characters 5-12", NaN === NaN, false);

eq("File \"float_test.res\", line 53, characters 5-12", Primitive_object.equal(NaN, NaN), false);

eq("File \"float_test.res\", line 54, characters 5-12", 4.2 === NaN, false);

eq("File \"float_test.res\", line 55, characters 5-12", Primitive_object.equal(4.2, NaN), false);

eq("File \"float_test.res\", line 56, characters 5-12", NaN === 4.2, false);

eq("File \"float_test.res\", line 57, characters 5-12", Primitive_object.equal(NaN, 4.2), false);

eq("File \"float_test.res\", line 58, characters 5-12", NaN !== NaN, true);

eq("File \"float_test.res\", line 59, characters 5-12", Primitive_object.notequal(NaN, NaN), true);

eq("File \"float_test.res\", line 60, characters 5-12", 4.2 !== NaN, true);

eq("File \"float_test.res\", line 61, characters 5-12", Primitive_object.notequal(4.2, NaN), true);

eq("File \"float_test.res\", line 62, characters 5-12", NaN !== 4.2, true);

eq("File \"float_test.res\", line 63, characters 5-12", Primitive_object.notequal(NaN, 4.2), true);

eq("File \"float_test.res\", line 64, characters 5-12", NaN < NaN, false);

eq("File \"float_test.res\", line 65, characters 5-12", Primitive_object.lessthan(NaN, NaN), false);

eq("File \"float_test.res\", line 66, characters 5-12", 4.2 < NaN, false);

eq("File \"float_test.res\", line 67, characters 5-12", Primitive_object.lessthan(4.2, NaN), false);

eq("File \"float_test.res\", line 68, characters 5-12", NaN < 4.2, false);

eq("File \"float_test.res\", line 69, characters 5-12", Primitive_object.lessthan(NaN, 4.2), false);

eq("File \"float_test.res\", line 70, characters 5-12", NaN > NaN, false);

eq("File \"float_test.res\", line 71, characters 5-12", Primitive_object.greaterthan(NaN, NaN), false);

eq("File \"float_test.res\", line 72, characters 5-12", 4.2 > NaN, false);

eq("File \"float_test.res\", line 73, characters 5-12", Primitive_object.greaterthan(4.2, NaN), false);

eq("File \"float_test.res\", line 74, characters 5-12", NaN > 4.2, false);

eq("File \"float_test.res\", line 75, characters 5-12", Primitive_object.greaterthan(NaN, 4.2), false);

eq("File \"float_test.res\", line 76, characters 5-12", NaN <= NaN, false);

eq("File \"float_test.res\", line 77, characters 5-12", Primitive_object.lessequal(NaN, NaN), false);

eq("File \"float_test.res\", line 78, characters 5-12", 4.2 <= NaN, false);

eq("File \"float_test.res\", line 79, characters 5-12", Primitive_object.lessequal(4.2, NaN), false);

eq("File \"float_test.res\", line 80, characters 5-12", NaN <= 4.2, false);

eq("File \"float_test.res\", line 81, characters 5-12", Primitive_object.lessequal(NaN, 4.2), false);

eq("File \"float_test.res\", line 82, characters 5-12", NaN >= NaN, false);

eq("File \"float_test.res\", line 83, characters 5-12", Primitive_object.greaterequal(NaN, NaN), false);

eq("File \"float_test.res\", line 84, characters 5-12", 4.2 >= NaN, false);

eq("File \"float_test.res\", line 85, characters 5-12", Primitive_object.greaterequal(4.2, NaN), false);

eq("File \"float_test.res\", line 86, characters 5-12", NaN >= 4.2, false);

eq("File \"float_test.res\", line 87, characters 5-12", Primitive_object.greaterequal(NaN, 4.2), false);

export {
  test_id,
  suites,
  eq,
  approx,
  from_pairs,
  float_compare,
  generic_compare,
  float_equal,
  generic_equal,
  float_notequal,
  generic_notequal,
  float_lessthan,
  generic_lessthan,
  float_greaterthan,
  generic_greaterthan,
  float_lessequal,
  generic_lessequal,
  float_greaterequal,
  generic_greaterequal,
}
/*  Not a pure module */
