// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mocha from "mocha";
import * as Belt_List from "@rescript/runtime/lib/es6/Belt_List.js";
import * as Stdlib_Exn from "@rescript/runtime/lib/es6/Stdlib_Exn.js";
import * as Test_utils from "./test_utils.mjs";
import * as Primitive_exceptions from "@rescript/runtime/lib/es6/Primitive_exceptions.js";

let Local = /* @__PURE__ */Primitive_exceptions.create("Exception_raise_test.Local");

let B = /* @__PURE__ */Primitive_exceptions.create("Exception_raise_test.B");

let C = /* @__PURE__ */Primitive_exceptions.create("Exception_raise_test.C");

let D = /* @__PURE__ */Primitive_exceptions.create("Exception_raise_test.D");

function appf(g, x) {
  let A = /* @__PURE__ */Primitive_exceptions.create("A");
  try {
    return g(x);
  } catch (raw_exn) {
    let exn = Primitive_exceptions.internalToException(raw_exn);
    if (exn.RE_EXN_ID === Local) {
      return 3;
    }
    if (exn.RE_EXN_ID === "Not_found") {
      return 2;
    }
    if (exn.RE_EXN_ID === A) {
      return 3;
    }
    if (exn.RE_EXN_ID !== B) {
      if (exn.RE_EXN_ID === C) {
        return exn._1;
      } else if (exn.RE_EXN_ID === D) {
        return exn._1[0];
      } else {
        return 4;
      }
    }
    let match = exn._1;
    if (match === 0) {
      return 4;
    }
    let match$1 = match.tl;
    if (match$1 === 0) {
      return 4;
    }
    let match$2 = match$1.tl;
    if (match$2 !== 0) {
      return match$2.hd;
    } else {
      return 4;
    }
  }
}

let A = /* @__PURE__ */Primitive_exceptions.create("Exception_raise_test.A");

let f;

try {
  f = (function () {throw (new Error ("x"))} ());
} catch (raw_x) {
  let x = Primitive_exceptions.internalToException(raw_x);
  f = x.RE_EXN_ID === A ? x._1 : 2;
}

let ff;

try {
  ff = (function () {throw 3} ());
} catch (raw_x$1) {
  let x$1 = Primitive_exceptions.internalToException(raw_x$1);
  ff = x$1.RE_EXN_ID === A ? x$1._1 : 2;
}

let fff;

try {
  fff = (function () {throw 2} ());
} catch (raw_x$2) {
  let x$2 = Primitive_exceptions.internalToException(raw_x$2);
  fff = x$2.RE_EXN_ID === A ? x$2._1 : 2;
}

let a0;

try {
  a0 = (function (){throw 2} ());
} catch (raw_x$3) {
  let x$3 = Primitive_exceptions.internalToException(raw_x$3);
  if (x$3.RE_EXN_ID === A || x$3.RE_EXN_ID === Stdlib_Exn.$$Error) {
    a0 = x$3._1;
  } else {
    throw {
      RE_EXN_ID: "Assert_failure",
      _1: [
        "exception_raise_test.res",
        46,
        7
      ],
      Error: new Error()
    };
  }
}

let a1;

try {
  a1 = (function (){throw 2} ());
} catch (raw_e) {
  a1 = Primitive_exceptions.internalToException(raw_e);
}

let a2;

try {
  a2 = (function (){throw (new Error("x"))} ());
} catch (raw_e$1) {
  a2 = Primitive_exceptions.internalToException(raw_e$1);
}

function fff0(x, g) {
  let val;
  try {
    val = x();
  } catch (exn) {
    return 1;
  }
  return g();
}

function input_lines(ic, _acc) {
  while (true) {
    let acc = _acc;
    let line;
    try {
      line = input_line(ic);
    } catch (exn) {
      return Belt_List.reverse(acc);
    }
    _acc = {
      hd: line,
      tl: acc
    };
    continue;
  };
}

Mocha.describe("Exception_raise_test", () => {
  Mocha.test("exception values", () => Test_utils.eq("File \"exception_raise_test.res\", line 72, characters 7-14", [
    f,
    ff,
    fff,
    a0
  ], [
    2,
    2,
    2,
    2
  ]));
  Mocha.test("Js.Exn.Error conversion", () => {
    if (a1.RE_EXN_ID === Stdlib_Exn.$$Error) {
      return Test_utils.eq("File \"exception_raise_test.res\", line 77, characters 28-35", a1._1, 2);
    }
    throw {
      RE_EXN_ID: "Assert_failure",
      _1: [
        "exception_raise_test.res",
        78,
        11
      ],
      Error: new Error()
    };
  });
  Mocha.test("Js.Exn.asJsExn with raw throw", () => {
    let testValue;
    try {
      testValue = (()=>{throw 2})();
    } catch (raw_e) {
      let e = Primitive_exceptions.internalToException(raw_e);
      testValue = Stdlib_Exn.asJsExn(e) !== undefined;
    }
    Test_utils.eq("File \"exception_raise_test.res\", line 86, characters 7-14", testValue, true);
  });
  Mocha.test("raw function call", () => Test_utils.eq("File \"exception_raise_test.res\", line 90, characters 7-14", ((a,b,c,_) => a + b + c)(1, 2, 3, 4), 6));
});

export {
  Local,
  B,
  C,
  D,
  appf,
  A,
  f,
  ff,
  fff,
  a0,
  a1,
  a2,
  fff0,
  input_lines,
}
/* f Not a pure module */
