// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function foo(x, y) {
  return x + y | 0;
}

let z = 7;

function bar(x, y) {
  return x + y | 0;
}

let b = 7;

let w = 7;

let a = 7;

console.log(a);

[1].map(x => x + 1 | 0);

function ptl(extra) {
  return 10 + extra | 0;
}

function foo2(x, y) {
  return x + y | 0;
}

function bar2(__x) {
  return __x + 3 | 0;
}

function foo3(x, y, z) {
  return (x + y | 0) + z | 0;
}

function bar3(__x) {
  return foo3(__x, 3, 4);
}

function q(param) {
  return null;
}

function inl() {
  
}

function inl2(x, y) {
  return x + y | 0;
}

function foo$1(x, y, z) {
  return [
    x,
    y,
    z
  ];
}

function ptl$1(none, extra) {
  return [
    none,
    "y",
    extra
  ];
}

let a1 = [
  "x",
  "y",
  "z"
];

console.log("a1:", a1);

let AllLabels = {
  foo: foo$1,
  ptl: ptl$1,
  a1: a1
};

function foo$2(x, y, z, dOpt) {
  let d = dOpt !== undefined ? dOpt : "d=0";
  return [
    x,
    y,
    z,
    d
  ];
}

function ptl$2(none, extra, extra$1) {
  return foo$2(none, "y", extra, extra$1);
}

let b1 = ptl$2("x", "z", undefined);

console.log("b1:", b1);

let b2 = ptl$2("x", "z", "d<-100");

console.log("b2:", b2);

let OptAtEnd = {
  foo: foo$2,
  ptl: ptl$2,
  b1: b1,
  b2: b2
};

function foo$3(d1Opt, x, d2Opt, y, d3Opt, z, d4Opt, w, d5Opt) {
  let d1 = d1Opt !== undefined ? d1Opt : "d1=0";
  let d2 = d2Opt !== undefined ? d2Opt : "d2=0";
  let d3 = d3Opt !== undefined ? d3Opt : "d3=0";
  let d4 = d4Opt !== undefined ? d4Opt : "d4=0";
  let d5 = d5Opt !== undefined ? d5Opt : "d5=0";
  return [
    d1,
    x,
    d2,
    y,
    d3,
    z,
    d4,
    w,
    d5
  ];
}

function ptl$3(none, none$1, none$2, none$3, none$4, none$5, extra) {
  return foo$3(none, none$1, none$2, "y", none$3, none$4, none$5, "w", extra);
}

let c1 = ptl$3(undefined, "x", undefined, undefined, "z", undefined, undefined);

console.log("c1:", c1);

let c2 = ptl$3("d1<-100", "x", undefined, undefined, "z", undefined, undefined);

console.log("c2:", c2);

let c3 = ptl$3(undefined, "x", "d2<-200", undefined, "z", "d4<-400", undefined);

console.log("c3:", c3);

let OptMixed = {
  foo: foo$3,
  ptl: ptl$3,
  c1: c1,
  c2: c2,
  c3: c3
};

function fn(cb) {
  return cb();
}

console.log({
  NAME: "foo",
  VAL: undefined
});

function fn1(a, b, param) {
  return a() + b | 0;
}

function a$1(__x) {
  return 3;
}

function f3(x, y, z) {
  console.log(x);
  return (x + y | 0) + z | 0;
}

function fx(extra, extra$1) {
  return f3(1, extra, extra$1);
}

function fy(none, extra) {
  return f3(none, 1, extra);
}

function fz(none, none$1) {
  return f3(none, none$1, 1);
}

let fxyz = f3(1, 1, 1);

let PartialApplication = {
  f3: f3,
  fx: fx,
  fy: fy,
  fz: fz,
  fxyz: fxyz
};

function hello1(y, f) {
  return f(y);
}

function hello2(y, f) {
  return f(y);
}

let ReverseApplication = {
  hello1: hello1,
  hello2: hello2
};

function f(a, b, c) {
  return [
    b(a),
    c(a)
  ];
}

function f2(a, b, c, d, e) {
  let __tuple_internal_obj = a(b);
  let param_0 = c(__tuple_internal_obj, d);
  let param_1 = d(__tuple_internal_obj, 1, 2);
  let param_2 = e(__tuple_internal_obj);
  return (param_0 + param_1 | 0) + param_2 | 0;
}

function f3$1(foo, x) {
  return foo(x);
}

function f4(x, f) {
  return f(x, 3);
}

let Pipe = {
  f: f,
  f2: f2,
  f3: f3$1,
  f4: f4
};

exports.foo = foo;
exports.z = z;
exports.bar = bar;
exports.b = b;
exports.w = w;
exports.ptl = ptl;
exports.foo2 = foo2;
exports.bar2 = bar2;
exports.foo3 = foo3;
exports.bar3 = bar3;
exports.q = q;
exports.inl = inl;
exports.inl2 = inl2;
exports.AllLabels = AllLabels;
exports.OptAtEnd = OptAtEnd;
exports.OptMixed = OptMixed;
exports.fn = fn;
exports.fn1 = fn1;
exports.a = a$1;
exports.PartialApplication = PartialApplication;
exports.ReverseApplication = ReverseApplication;
exports.Pipe = Pipe;
/*  Not a pure module */
