// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mocha from "mocha";
import * as Belt_List from "@rescript/runtime/lib/es6/Belt_List.js";
import * as Belt_Array from "@rescript/runtime/lib/es6/Belt_Array.js";
import * as Belt_Range from "@rescript/runtime/lib/es6/Belt_Range.js";
import * as Test_utils from "./test_utils.mjs";
import * as Array_data_util from "./array_data_util.mjs";
import * as Primitive_array from "@rescript/runtime/lib/es6/Primitive_array.js";
import * as Belt_MutableSetInt from "@rescript/runtime/lib/es6/Belt_MutableSetInt.js";

Mocha.describe("Bs_mutable_set_test", () => {
  Mocha.test("mutable set basic operations", () => {
    let u = Belt_MutableSetInt.fromArray(Array_data_util.range(0, 30));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 17, characters 7-14", Belt_MutableSetInt.removeCheck(u, 0));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 18, characters 7-14", !Belt_MutableSetInt.removeCheck(u, 0));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 19, characters 7-14", Belt_MutableSetInt.removeCheck(u, 30));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 20, characters 7-14", Belt_MutableSetInt.removeCheck(u, 20));
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 21, characters 7-14", Belt_MutableSetInt.size(u), 28);
    let r = Array_data_util.randomRange(0, 30);
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 23, characters 7-14", 29 === Belt_MutableSetInt.maxUndefined(u));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 24, characters 7-14", 1 === Belt_MutableSetInt.minUndefined(u));
    Belt_MutableSetInt.add(u, 3);
    for (let i = 0, i_finish = r.length; i < i_finish; ++i) {
      Belt_MutableSetInt.remove(u, r[i]);
    }
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 29, characters 7-14", Belt_MutableSetInt.isEmpty(u));
    Belt_MutableSetInt.add(u, 0);
    Belt_MutableSetInt.add(u, 1);
    Belt_MutableSetInt.add(u, 2);
    Belt_MutableSetInt.add(u, 0);
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 34, characters 7-14", Belt_MutableSetInt.size(u), 3);
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 35, characters 7-14", !Belt_MutableSetInt.isEmpty(u));
    for (let i$1 = 0; i$1 <= 3; ++i$1) {
      Belt_MutableSetInt.remove(u, i$1);
    }
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 39, characters 7-14", Belt_MutableSetInt.isEmpty(u));
    Belt_MutableSetInt.mergeMany(u, Array_data_util.randomRange(0, 20000));
    Belt_MutableSetInt.mergeMany(u, Array_data_util.randomRange(0, 200));
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 42, characters 7-14", Belt_MutableSetInt.size(u), 20001);
    Belt_MutableSetInt.removeMany(u, Array_data_util.randomRange(0, 200));
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 44, characters 7-14", Belt_MutableSetInt.size(u), 19800);
    Belt_MutableSetInt.removeMany(u, Array_data_util.randomRange(0, 1000));
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 46, characters 7-14", Belt_MutableSetInt.size(u), 19000);
    Belt_MutableSetInt.removeMany(u, Array_data_util.randomRange(0, 1000));
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 48, characters 7-14", Belt_MutableSetInt.size(u), 19000);
    Belt_MutableSetInt.removeMany(u, Array_data_util.randomRange(1000, 10000));
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 50, characters 7-14", Belt_MutableSetInt.size(u), 10000);
    Belt_MutableSetInt.removeMany(u, Array_data_util.randomRange(10000, 19999));
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 52, characters 7-14", Belt_MutableSetInt.size(u), 1);
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 53, characters 7-14", Belt_MutableSetInt.has(u, 20000));
    Belt_MutableSetInt.removeMany(u, Array_data_util.randomRange(10000, 30000));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 55, characters 7-14", Belt_MutableSetInt.isEmpty(u));
  });
  Mocha.test("mutable set add/remove operations", () => {
    let v = Belt_MutableSetInt.fromArray(Array_data_util.randomRange(1000, 2000));
    let bs = Belt_Array.map(Array_data_util.randomRange(500, 1499), x => Belt_MutableSetInt.removeCheck(v, x));
    let indeedRemoved = Belt_Array.reduce(bs, 0, (acc, x) => {
      if (x) {
        return acc + 1 | 0;
      } else {
        return acc;
      }
    });
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 71, characters 7-14", indeedRemoved, 500);
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 72, characters 7-14", Belt_MutableSetInt.size(v), 501);
    let cs = Belt_Array.map(Array_data_util.randomRange(500, 2000), x => Belt_MutableSetInt.addCheck(v, x));
    let indeedAded = Belt_Array.reduce(cs, 0, (acc, x) => {
      if (x) {
        return acc + 1 | 0;
      } else {
        return acc;
      }
    });
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 84, characters 7-14", indeedAded, 1000);
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 85, characters 7-14", Belt_MutableSetInt.size(v), 1501);
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 86, characters 7-14", Belt_MutableSetInt.isEmpty(Belt_MutableSetInt.make()));
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 87, characters 7-14", Belt_MutableSetInt.minimum(v), 500);
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 88, characters 7-14", Belt_MutableSetInt.maximum(v), 2000);
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 89, characters 7-14", Belt_MutableSetInt.minUndefined(v), 500);
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 90, characters 7-14", Belt_MutableSetInt.maxUndefined(v), 2000);
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 91, characters 7-14", Belt_MutableSetInt.reduce(v, 0, (x, y) => x + y | 0), 1876250);
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 92, characters 7-14", Belt_List.eq(Belt_MutableSetInt.toList(v), Belt_List.makeBy(1501, i => i + 500 | 0), (x, y) => x === y));
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 93, characters 7-14", Belt_MutableSetInt.toArray(v), Array_data_util.range(500, 2000));
    Belt_MutableSetInt.checkInvariantInternal(v);
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 95, characters 7-14", Belt_MutableSetInt.get(v, 3), undefined);
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 96, characters 7-14", Belt_MutableSetInt.get(v, 1200), 1200);
    let match = Belt_MutableSetInt.split(v, 1000);
    let match$1 = match[0];
    let bb = match$1[1];
    let aa = match$1[0];
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 98, characters 7-14", match[1]);
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 99, characters 7-14", Belt_Array.eq(Belt_MutableSetInt.toArray(aa), Array_data_util.range(500, 999), (x, y) => x === y));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 100, characters 7-14", Belt_Array.eq(Belt_MutableSetInt.toArray(bb), Array_data_util.range(1001, 2000), (x, y) => x === y));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 101, characters 7-14", Belt_MutableSetInt.subset(aa, v));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 102, characters 7-14", Belt_MutableSetInt.subset(bb, v));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 103, characters 7-14", Belt_MutableSetInt.isEmpty(Belt_MutableSetInt.intersect(aa, bb)));
    let c = Belt_MutableSetInt.removeCheck(v, 1000);
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 105, characters 7-14", c);
    let match$2 = Belt_MutableSetInt.split(v, 1000);
    let match$3 = match$2[0];
    let bb$1 = match$3[1];
    let aa$1 = match$3[0];
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 107, characters 7-14", !match$2[1]);
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 108, characters 7-14", Belt_Array.eq(Belt_MutableSetInt.toArray(aa$1), Array_data_util.range(500, 999), (x, y) => x === y));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 109, characters 7-14", Belt_Array.eq(Belt_MutableSetInt.toArray(bb$1), Array_data_util.range(1001, 2000), (x, y) => x === y));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 110, characters 7-14", Belt_MutableSetInt.subset(aa$1, v));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 111, characters 7-14", Belt_MutableSetInt.subset(bb$1, v));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 112, characters 7-14", Belt_MutableSetInt.isEmpty(Belt_MutableSetInt.intersect(aa$1, bb$1)));
  });
  Mocha.test("mutable set union operations", () => {
    let aa = Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 100));
    let bb = Belt_MutableSetInt.fromArray(Array_data_util.randomRange(40, 120));
    let cc = Belt_MutableSetInt.union(aa, bb);
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 122, characters 7-14", Belt_MutableSetInt.eq(cc, Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 120))));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 125, characters 6-13", Belt_MutableSetInt.eq(Belt_MutableSetInt.union(Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 20)), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(21, 40))), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 40))));
    let dd = Belt_MutableSetInt.intersect(aa, bb);
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 129, characters 7-14", Belt_MutableSetInt.eq(dd, Belt_MutableSetInt.fromArray(Array_data_util.randomRange(40, 100))));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 130, characters 7-14", Belt_MutableSetInt.eq(Belt_MutableSetInt.intersect(Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 20)), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(21, 40))), Belt_MutableSetInt.make()));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 131, characters 7-14", Belt_MutableSetInt.eq(Belt_MutableSetInt.intersect(Belt_MutableSetInt.fromArray(Array_data_util.randomRange(21, 40)), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 20))), Belt_MutableSetInt.make()));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 132, characters 7-14", Belt_MutableSetInt.eq(Belt_MutableSetInt.intersect(Belt_MutableSetInt.fromArray([
      1,
      3,
      4,
      5,
      7,
      9
    ]), Belt_MutableSetInt.fromArray([
      2,
      4,
      5,
      6,
      8,
      10
    ])), Belt_MutableSetInt.fromArray([
      4,
      5
    ])));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 133, characters 7-14", Belt_MutableSetInt.eq(Belt_MutableSetInt.diff(aa, bb), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 39))));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 134, characters 7-14", Belt_MutableSetInt.eq(Belt_MutableSetInt.diff(bb, aa), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(101, 120))));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 136, characters 6-13", Belt_MutableSetInt.eq(Belt_MutableSetInt.diff(Belt_MutableSetInt.fromArray(Array_data_util.randomRange(21, 40)), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 20))), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(21, 40))));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 140, characters 6-13", Belt_MutableSetInt.eq(Belt_MutableSetInt.diff(Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 20)), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(21, 40))), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 20))));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 145, characters 6-13", Belt_MutableSetInt.eq(Belt_MutableSetInt.diff(Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 20)), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 40))), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, -1))));
  });
  Mocha.test("mutable set keep/partition operations", () => {
    let a0 = Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 1000));
    let a1 = Belt_MutableSetInt.keep(a0, x => x % 2 === 0);
    let a2 = Belt_MutableSetInt.keep(a0, x => x % 2 !== 0);
    let match = Belt_MutableSetInt.partition(a0, x => x % 2 === 0);
    let a4 = match[1];
    let a3 = match[0];
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 154, characters 7-14", Belt_MutableSetInt.eq(a1, a3));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 155, characters 7-14", Belt_MutableSetInt.eq(a2, a4));
    Belt_List.forEach({
      hd: a0,
      tl: {
        hd: a1,
        tl: {
          hd: a2,
          tl: {
            hd: a3,
            tl: {
              hd: a4,
              tl: /* [] */0
            }
          }
        }
      }
    }, Belt_MutableSetInt.checkInvariantInternal);
  });
  Mocha.test("mutable set large scale operations", () => {
    let v = Belt_MutableSetInt.make();
    for (let i = 0; i <= 100000; ++i) {
      Belt_MutableSetInt.add(v, i);
    }
    Belt_MutableSetInt.checkInvariantInternal(v);
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 165, characters 7-14", Belt_Range.every(0, 100000, i => Belt_MutableSetInt.has(v, i)));
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 166, characters 7-14", Belt_MutableSetInt.size(v), 100001);
  });
  Mocha.test("mutable set merge operations", () => {
    let u = Belt_Array.concat(Array_data_util.randomRange(30, 100), Array_data_util.randomRange(40, 120));
    let v = Belt_MutableSetInt.make();
    Belt_MutableSetInt.mergeMany(v, u);
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 173, characters 7-14", Belt_MutableSetInt.size(v), 91);
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 174, characters 7-14", Belt_MutableSetInt.toArray(v), Array_data_util.range(30, 120));
  });
  Mocha.test("mutable set remove many operations", () => {
    let u = Belt_Array.concat(Array_data_util.randomRange(0, 100000), Array_data_util.randomRange(0, 100));
    let v = Belt_MutableSetInt.fromArray(u);
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 180, characters 7-14", Belt_MutableSetInt.size(v), 100001);
    let u$1 = Array_data_util.randomRange(50000, 80000);
    for (let i = 0, i_finish = u$1.length; i < i_finish; ++i) {
      Belt_MutableSetInt.remove(v, i);
    }
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 187, characters 7-14", Belt_MutableSetInt.size(v), 70000);
    let vv = Array_data_util.randomRange(0, 100000);
    for (let i$1 = 0, i_finish$1 = vv.length; i$1 < i_finish$1; ++i$1) {
      Belt_MutableSetInt.remove(v, Primitive_array.get(vv, i$1));
    }
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 193, characters 7-14", Belt_MutableSetInt.size(v), 0);
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 194, characters 7-14", Belt_MutableSetInt.isEmpty(v));
  });
  Mocha.test("mutable set min/max operations", () => {
    let v = Belt_MutableSetInt.fromArray(Belt_Array.makeBy(30, i => i));
    Belt_MutableSetInt.remove(v, 30);
    Belt_MutableSetInt.remove(v, 29);
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 201, characters 7-14", 28 === Belt_MutableSetInt.maxUndefined(v));
    Belt_MutableSetInt.remove(v, 0);
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 203, characters 7-14", 1 === Belt_MutableSetInt.minUndefined(v));
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 204, characters 7-14", Belt_MutableSetInt.size(v), 28);
    let vv = Array_data_util.randomRange(1, 28);
    for (let i = 0, i_finish = vv.length; i < i_finish; ++i) {
      Belt_MutableSetInt.remove(v, Primitive_array.get(vv, i));
    }
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 209, characters 7-14", Belt_MutableSetInt.size(v), 0);
  });
  Mocha.test("mutable set fromSortedArrayUnsafe", () => {
    let id = (loc, x) => {
      let u = Belt_MutableSetInt.fromSortedArrayUnsafe(x);
      Belt_MutableSetInt.checkInvariantInternal(u);
      Test_utils.ok(loc, Belt_Array.every2(Belt_MutableSetInt.toArray(u), x, (x, y) => x === y));
    };
    id("File \"bs_mutable_set_test.res\", line 219, characters 7-14", []);
    id("File \"bs_mutable_set_test.res\", line 220, characters 7-14", [0]);
    id("File \"bs_mutable_set_test.res\", line 221, characters 7-14", [
      0,
      1
    ]);
    id("File \"bs_mutable_set_test.res\", line 222, characters 7-14", [
      0,
      1,
      2
    ]);
    id("File \"bs_mutable_set_test.res\", line 223, characters 7-14", [
      0,
      1,
      2,
      3
    ]);
    id("File \"bs_mutable_set_test.res\", line 224, characters 7-14", [
      0,
      1,
      2,
      3,
      4
    ]);
    id("File \"bs_mutable_set_test.res\", line 225, characters 7-14", [
      0,
      1,
      2,
      3,
      4,
      5
    ]);
    id("File \"bs_mutable_set_test.res\", line 226, characters 7-14", [
      0,
      1,
      2,
      3,
      4,
      6
    ]);
    id("File \"bs_mutable_set_test.res\", line 227, characters 7-14", [
      0,
      1,
      2,
      3,
      4,
      6,
      7
    ]);
    id("File \"bs_mutable_set_test.res\", line 228, characters 7-14", [
      0,
      1,
      2,
      3,
      4,
      6,
      7,
      8
    ]);
    id("File \"bs_mutable_set_test.res\", line 229, characters 7-14", [
      0,
      1,
      2,
      3,
      4,
      6,
      7,
      8,
      9
    ]);
    id("File \"bs_mutable_set_test.res\", line 230, characters 7-14", Array_data_util.range(0, 1000));
  });
  Mocha.test("mutable set keep/partition with mod 8", () => {
    let v = Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 1000));
    let copyV = Belt_MutableSetInt.keep(v, x => x % 8 === 0);
    let match = Belt_MutableSetInt.partition(v, x => x % 8 === 0);
    let cc = Belt_MutableSetInt.keep(v, x => x % 8 !== 0);
    for (let i = 0; i <= 200; ++i) {
      Belt_MutableSetInt.remove(v, i);
    }
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 241, characters 7-14", Belt_MutableSetInt.size(copyV), 126);
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 242, characters 7-14", Belt_MutableSetInt.toArray(copyV), Belt_Array.makeBy(126, i => (i << 3)));
    Test_utils.eq("File \"bs_mutable_set_test.res\", line 243, characters 7-14", Belt_MutableSetInt.size(v), 800);
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 244, characters 7-14", Belt_MutableSetInt.eq(copyV, match[0]));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 245, characters 7-14", Belt_MutableSetInt.eq(cc, match[1]));
  });
  Mocha.test("mutable set split operations", () => {
    let v = Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 1000));
    let match = Belt_MutableSetInt.split(v, 400);
    let match$1 = match[0];
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 251, characters 7-14", Belt_MutableSetInt.eq(match$1[0], Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 399))));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 252, characters 7-14", Belt_MutableSetInt.eq(match$1[1], Belt_MutableSetInt.fromArray(Array_data_util.randomRange(401, 1000))));
    let d = Belt_MutableSetInt.fromArray(Belt_Array.map(Array_data_util.randomRange(0, 1000), x => (x << 1)));
    let match$2 = Belt_MutableSetInt.split(d, 1001);
    let match$3 = match$2[0];
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 255, characters 7-14", Belt_MutableSetInt.eq(match$3[0], Belt_MutableSetInt.fromArray(Belt_Array.makeBy(501, x => (x << 1)))));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 256, characters 7-14", Belt_MutableSetInt.eq(match$3[1], Belt_MutableSetInt.fromArray(Belt_Array.makeBy(500, x => 1002 + (x << 1) | 0))));
  });
  Mocha.test("mutable set final union operations", () => {
    let aa = Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 100));
    let bb = Belt_MutableSetInt.fromArray(Array_data_util.randomRange(40, 120));
    let cc = Belt_MutableSetInt.union(aa, bb);
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 266, characters 7-14", Belt_MutableSetInt.eq(cc, Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 120))));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 269, characters 6-13", Belt_MutableSetInt.eq(Belt_MutableSetInt.union(Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 20)), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(21, 40))), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 40))));
    let dd = Belt_MutableSetInt.intersect(aa, bb);
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 273, characters 7-14", Belt_MutableSetInt.eq(dd, Belt_MutableSetInt.fromArray(Array_data_util.randomRange(40, 100))));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 274, characters 7-14", Belt_MutableSetInt.eq(Belt_MutableSetInt.intersect(Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 20)), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(21, 40))), Belt_MutableSetInt.make()));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 275, characters 7-14", Belt_MutableSetInt.eq(Belt_MutableSetInt.intersect(Belt_MutableSetInt.fromArray(Array_data_util.randomRange(21, 40)), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 20))), Belt_MutableSetInt.make()));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 276, characters 7-14", Belt_MutableSetInt.eq(Belt_MutableSetInt.intersect(Belt_MutableSetInt.fromArray([
      1,
      3,
      4,
      5,
      7,
      9
    ]), Belt_MutableSetInt.fromArray([
      2,
      4,
      5,
      6,
      8,
      10
    ])), Belt_MutableSetInt.fromArray([
      4,
      5
    ])));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 277, characters 7-14", Belt_MutableSetInt.eq(Belt_MutableSetInt.diff(aa, bb), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 39))));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 278, characters 7-14", Belt_MutableSetInt.eq(Belt_MutableSetInt.diff(bb, aa), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(101, 120))));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 280, characters 6-13", Belt_MutableSetInt.eq(Belt_MutableSetInt.diff(Belt_MutableSetInt.fromArray(Array_data_util.randomRange(21, 40)), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 20))), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(21, 40))));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 284, characters 6-13", Belt_MutableSetInt.eq(Belt_MutableSetInt.diff(Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 20)), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(21, 40))), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 20))));
    Test_utils.ok("File \"bs_mutable_set_test.res\", line 289, characters 6-13", Belt_MutableSetInt.eq(Belt_MutableSetInt.diff(Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 20)), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, 40))), Belt_MutableSetInt.fromArray(Array_data_util.randomRange(0, -1))));
  });
});

let N;

let $$Array;

let I;

let R;

let A;

let L;

let empty = Belt_MutableSetInt.make;

let fromArray = Belt_MutableSetInt.fromArray;

export {
  N,
  $$Array,
  I,
  R,
  A,
  L,
  empty,
  fromArray,
}
/*  Not a pure module */
