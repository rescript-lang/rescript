// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mocha from "mocha";
import * as Test_utils from "./test_utils.mjs";
import * as Stdlib_Lazy from "@rescript/runtime/lib/es6/Stdlib_Lazy.js";
import * as Primitive_module from "@rescript/runtime/lib/es6/Primitive_module.js";
import * as Primitive_exceptions from "@rescript/runtime/lib/es6/Primitive_exceptions.js";

let Xx = {
  f: (prim0, prim1) => hfiehi(prim0, prim1)
};

let Int3 = Primitive_module.init([
  "recursive_module.res",
  24,
  4
], {
  TAG: "Module",
  _0: [[
      "Function",
      "u"
    ]]
});

Primitive_module.update({
  TAG: "Module",
  _0: [[
      "Function",
      "u"
    ]]
}, Int3, Int3);

let a = Stdlib_Lazy.make(() => 2);

let Intb = {
  a: a
};

let a$1 = Stdlib_Lazy.make(() => Stdlib_Lazy.get(Intb.a) + 1 | 0);

let Inta = {
  a: a$1
};

let A = {
  Inta: Inta,
  Intb: Intb
};

Mocha.describe("Recursive_module", () => {
  Mocha.test("recursive module test", () => {
    Test_utils.eq("File \"recursive_module.res\", line 41, characters 7-14", Stdlib_Lazy.get(a$1), 3);
    let tmp;
    try {
      Int3.u(3);
      tmp = 3;
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID === "Undefined_recursive_module") {
        tmp = 4;
      } else {
        throw exn;
      }
    }
    Test_utils.eq("File \"recursive_module.res\", line 44, characters 6-13", 4, tmp);
  });
});

let Int32;

let uuu = Xx.f;

export {
  Int32,
  Xx,
  uuu,
  Int3,
  A,
}
/* Int3 Not a pure module */
