// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mt from "./mt.mjs";
import * as Stdlib_Lazy from "rescript/lib/es6/Stdlib_Lazy.js";
import * as Primitive_module from "rescript/lib/es6/Primitive_module.js";
import * as Primitive_exceptions from "rescript/lib/es6/Primitive_exceptions.js";

let suites = {
  contents: /* [] */0
};

let test_id = {
  contents: 0
};

function eq(loc, x, y) {
  Mt.eq_suites(test_id, suites, loc, x, y);
}

let Xx = {
  f: (prim0, prim1) => hfiehi(prim0, prim1)
};

let Int3 = Primitive_module.init([
  "recursive_module.res",
  25,
  4
], {
  TAG: "Module",
  _0: [[
      "Function",
      "u"
    ]]
});

Primitive_module.update({
  TAG: "Module",
  _0: [[
      "Function",
      "u"
    ]]
}, Int3, Int3);

let a = Stdlib_Lazy.make(() => 2);

let Intb = {
  a: a
};

let a$1 = Stdlib_Lazy.make(() => Stdlib_Lazy.get(Intb.a) + 1 | 0);

let Inta = {
  a: a$1
};

let A = {
  Inta: Inta,
  Intb: Intb
};

eq("File \"recursive_module.res\", line 40, characters 3-10", Stdlib_Lazy.get(a$1), 3);

let tmp;

try {
  Int3.u(3);
  tmp = 3;
} catch (raw_exn) {
  let exn = Primitive_exceptions.internalToException(raw_exn);
  if (exn.RE_EXN_ID === "Undefined_recursive_module") {
    tmp = 4;
  } else {
    throw exn;
  }
}

eq("File \"recursive_module.res\", line 43, characters 2-9", 4, tmp);

Mt.from_pair_suites("Recursive_module", suites.contents);

let Int32;

let uuu = Xx.f;

export {
  suites,
  test_id,
  eq,
  Int32,
  Xx,
  uuu,
  Int3,
  A,
}
/* Int3 Not a pure module */
