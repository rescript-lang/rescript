// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

let Belt_List = require("rescript/lib/js/belt_List.js");
let Test_order = require("./test_order.js");

function Make(U) {
  return {
    v: U.compare
  };
}

let U = {
  v: Test_order.compare
};

let N;

let v = Belt_List.length;

let N0;

let N1;

let N2;

let N3;

let N4;

let N5;

let N6;

let length = Belt_List.length;

let size = Belt_List.size;

let head = Belt_List.head;

let headExn = Belt_List.headExn;

let tail = Belt_List.tail;

let tailExn = Belt_List.tailExn;

let add = Belt_List.add;

let get = Belt_List.get;

let getExn = Belt_List.getExn;

let make = Belt_List.make;

let makeByU = Belt_List.makeByU;

let makeBy = Belt_List.makeBy;

let shuffle = Belt_List.shuffle;

let drop = Belt_List.drop;

let take = Belt_List.take;

let splitAt = Belt_List.splitAt;

let concat = Belt_List.concat;

let concatMany = Belt_List.concatMany;

let reverseConcat = Belt_List.reverseConcat;

let flatten = Belt_List.flatten;

let mapU = Belt_List.mapU;

let map = Belt_List.map;

let zip = Belt_List.zip;

let zipByU = Belt_List.zipByU;

let zipBy = Belt_List.zipBy;

let mapWithIndexU = Belt_List.mapWithIndexU;

let mapWithIndex = Belt_List.mapWithIndex;

let fromArray = Belt_List.fromArray;

let toArray = Belt_List.toArray;

let reverse = Belt_List.reverse;

let mapReverseU = Belt_List.mapReverseU;

let mapReverse = Belt_List.mapReverse;

let forEachU = Belt_List.forEachU;

let forEach = Belt_List.forEach;

let forEachWithIndexU = Belt_List.forEachWithIndexU;

let forEachWithIndex = Belt_List.forEachWithIndex;

let reduceU = Belt_List.reduceU;

let reduce = Belt_List.reduce;

let reduceWithIndexU = Belt_List.reduceWithIndexU;

let reduceWithIndex = Belt_List.reduceWithIndex;

let reduceReverseU = Belt_List.reduceReverseU;

let reduceReverse = Belt_List.reduceReverse;

let mapReverse2U = Belt_List.mapReverse2U;

let mapReverse2 = Belt_List.mapReverse2;

let forEach2U = Belt_List.forEach2U;

let forEach2 = Belt_List.forEach2;

let reduce2U = Belt_List.reduce2U;

let reduce2 = Belt_List.reduce2;

let reduceReverse2U = Belt_List.reduceReverse2U;

let reduceReverse2 = Belt_List.reduceReverse2;

let everyU = Belt_List.everyU;

let every = Belt_List.every;

let someU = Belt_List.someU;

let some = Belt_List.some;

let every2U = Belt_List.every2U;

let every2 = Belt_List.every2;

let some2U = Belt_List.some2U;

let some2 = Belt_List.some2;

let cmpByLength = Belt_List.cmpByLength;

let cmpU = Belt_List.cmpU;

let cmp = Belt_List.cmp;

let eqU = Belt_List.eqU;

let eq = Belt_List.eq;

let hasU = Belt_List.hasU;

let has = Belt_List.has;

let getByU = Belt_List.getByU;

let getBy = Belt_List.getBy;

let keepU = Belt_List.keepU;

let keep = Belt_List.keep;

let filter = Belt_List.filter;

let keepWithIndexU = Belt_List.keepWithIndexU;

let keepWithIndex = Belt_List.keepWithIndex;

let filterWithIndex = Belt_List.filterWithIndex;

let keepMapU = Belt_List.keepMapU;

let keepMap = Belt_List.keepMap;

let partitionU = Belt_List.partitionU;

let partition = Belt_List.partition;

let unzip = Belt_List.unzip;

let getAssocU = Belt_List.getAssocU;

let getAssoc = Belt_List.getAssoc;

let hasAssocU = Belt_List.hasAssocU;

let hasAssoc = Belt_List.hasAssoc;

let removeAssocU = Belt_List.removeAssocU;

let removeAssoc = Belt_List.removeAssoc;

let setAssocU = Belt_List.setAssocU;

let setAssoc = Belt_List.setAssoc;

let sortU = Belt_List.sortU;

let sort = Belt_List.sort;

exports.N = N;
exports.v = v;
exports.Make = Make;
exports.U = U;
exports.N0 = N0;
exports.N1 = N1;
exports.N2 = N2;
exports.N3 = N3;
exports.N4 = N4;
exports.N5 = N5;
exports.N6 = N6;
exports.length = length;
exports.size = size;
exports.head = head;
exports.headExn = headExn;
exports.tail = tail;
exports.tailExn = tailExn;
exports.add = add;
exports.get = get;
exports.getExn = getExn;
exports.make = make;
exports.makeByU = makeByU;
exports.makeBy = makeBy;
exports.shuffle = shuffle;
exports.drop = drop;
exports.take = take;
exports.splitAt = splitAt;
exports.concat = concat;
exports.concatMany = concatMany;
exports.reverseConcat = reverseConcat;
exports.flatten = flatten;
exports.mapU = mapU;
exports.map = map;
exports.zip = zip;
exports.zipByU = zipByU;
exports.zipBy = zipBy;
exports.mapWithIndexU = mapWithIndexU;
exports.mapWithIndex = mapWithIndex;
exports.fromArray = fromArray;
exports.toArray = toArray;
exports.reverse = reverse;
exports.mapReverseU = mapReverseU;
exports.mapReverse = mapReverse;
exports.forEachU = forEachU;
exports.forEach = forEach;
exports.forEachWithIndexU = forEachWithIndexU;
exports.forEachWithIndex = forEachWithIndex;
exports.reduceU = reduceU;
exports.reduce = reduce;
exports.reduceWithIndexU = reduceWithIndexU;
exports.reduceWithIndex = reduceWithIndex;
exports.reduceReverseU = reduceReverseU;
exports.reduceReverse = reduceReverse;
exports.mapReverse2U = mapReverse2U;
exports.mapReverse2 = mapReverse2;
exports.forEach2U = forEach2U;
exports.forEach2 = forEach2;
exports.reduce2U = reduce2U;
exports.reduce2 = reduce2;
exports.reduceReverse2U = reduceReverse2U;
exports.reduceReverse2 = reduceReverse2;
exports.everyU = everyU;
exports.every = every;
exports.someU = someU;
exports.some = some;
exports.every2U = every2U;
exports.every2 = every2;
exports.some2U = some2U;
exports.some2 = some2;
exports.cmpByLength = cmpByLength;
exports.cmpU = cmpU;
exports.cmp = cmp;
exports.eqU = eqU;
exports.eq = eq;
exports.hasU = hasU;
exports.has = has;
exports.getByU = getByU;
exports.getBy = getBy;
exports.keepU = keepU;
exports.keep = keep;
exports.filter = filter;
exports.keepWithIndexU = keepWithIndexU;
exports.keepWithIndex = keepWithIndex;
exports.filterWithIndex = filterWithIndex;
exports.keepMapU = keepMapU;
exports.keepMap = keepMap;
exports.partitionU = partitionU;
exports.partition = partition;
exports.unzip = unzip;
exports.getAssocU = getAssocU;
exports.getAssoc = getAssoc;
exports.hasAssocU = hasAssocU;
exports.hasAssoc = hasAssoc;
exports.removeAssocU = removeAssocU;
exports.removeAssoc = removeAssoc;
exports.setAssocU = setAssocU;
exports.setAssoc = setAssoc;
exports.sortU = sortU;
exports.sort = sort;
/* No side effect */
