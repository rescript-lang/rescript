// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mocha from "mocha";
import * as Js_math from "@rescript/runtime/lib/es6/Js_math.js";
import * as Test_utils from "./test_utils.mjs";

Mocha.describe("Js_math_test", () => {
  Mocha.test("_E", () => Test_utils.approxEq("File \"js_math_test.res\", line 7, characters 13-20", 0.001, 2.718, Math.E));
  Mocha.test("_LN2", () => Test_utils.approxEq("File \"js_math_test.res\", line 10, characters 13-20", 0.001, 0.693, Math.LN2));
  Mocha.test("_LN10", () => Test_utils.approxEq("File \"js_math_test.res\", line 13, characters 13-20", 0.001, 2.303, Math.LN10));
  Mocha.test("_LOG2E", () => Test_utils.approxEq("File \"js_math_test.res\", line 16, characters 13-20", 0.001, 1.443, Math.LOG2E));
  Mocha.test("_LOG10E", () => Test_utils.approxEq("File \"js_math_test.res\", line 19, characters 13-20", 0.001, 0.434, Math.LOG10E));
  Mocha.test("_PI", () => Test_utils.approxEq("File \"js_math_test.res\", line 22, characters 13-20", 0.001, 3.14159, Math.PI));
  Mocha.test("_SQRT1_2", () => Test_utils.approxEq("File \"js_math_test.res\", line 25, characters 13-20", 0.001, 0.707, Math.SQRT1_2));
  Mocha.test("_SQRT2", () => Test_utils.approxEq("File \"js_math_test.res\", line 28, characters 13-20", 0.001, 1.414, Math.SQRT2));
  Mocha.test("abs_int", () => Test_utils.eq("File \"js_math_test.res\", line 31, characters 7-14", 4, Math.abs(-4)));
  Mocha.test("abs_float", () => Test_utils.eq("File \"js_math_test.res\", line 34, characters 7-14", 1.2, Math.abs(-1.2)));
  Mocha.test("acos", () => Test_utils.approxEq("File \"js_math_test.res\", line 37, characters 13-20", 0.001, 1.159, Math.acos(0.4)));
  Mocha.test("acosh", () => Test_utils.approxEq("File \"js_math_test.res\", line 40, characters 13-20", 0.001, 0.622, Math.acosh(1.2)));
  Mocha.test("asin", () => Test_utils.approxEq("File \"js_math_test.res\", line 43, characters 13-20", 0.001, 0.411, Math.asin(0.4)));
  Mocha.test("asinh", () => Test_utils.approxEq("File \"js_math_test.res\", line 46, characters 13-20", 0.001, 0.390, Math.asinh(0.4)));
  Mocha.test("atan", () => Test_utils.approxEq("File \"js_math_test.res\", line 49, characters 13-20", 0.001, 0.380, Math.atan(0.4)));
  Mocha.test("atanh", () => Test_utils.approxEq("File \"js_math_test.res\", line 52, characters 13-20", 0.001, 0.423, Math.atanh(0.4)));
  Mocha.test("atan2", () => Test_utils.approxEq("File \"js_math_test.res\", line 55, characters 13-20", 0.001, 0.588, Math.atan2(0.4, 0.6)));
  Mocha.test("cbrt", () => Test_utils.eq("File \"js_math_test.res\", line 58, characters 7-14", 2, Math.cbrt(8)));
  Mocha.test("unsafe_ceil_int", () => Test_utils.eq("File \"js_math_test.res\", line 61, characters 7-14", 4, Math.ceil(3.2)));
  Mocha.test("ceil_int", () => Test_utils.eq("File \"js_math_test.res\", line 64, characters 7-14", 4, Js_math.ceil_int(3.2)));
  Mocha.test("ceil_float", () => Test_utils.eq("File \"js_math_test.res\", line 67, characters 7-14", 4, Math.ceil(3.2)));
  Mocha.test("cos", () => Test_utils.approxEq("File \"js_math_test.res\", line 70, characters 13-20", 0.001, 0.921, Math.cos(0.4)));
  Mocha.test("cosh", () => Test_utils.approxEq("File \"js_math_test.res\", line 73, characters 13-20", 0.001, 1.081, Math.cosh(0.4)));
  Mocha.test("exp", () => Test_utils.approxEq("File \"js_math_test.res\", line 76, characters 13-20", 0.001, 1.491, Math.exp(0.4)));
  Mocha.test("expm1", () => Test_utils.approxEq("File \"js_math_test.res\", line 79, characters 13-20", 0.001, 0.491, Math.expm1(0.4)));
  Mocha.test("unsafe_floor_int", () => Test_utils.eq("File \"js_math_test.res\", line 82, characters 7-14", 3, Math.floor(3.2)));
  Mocha.test("floor_int", () => Test_utils.eq("File \"js_math_test.res\", line 85, characters 7-14", 3, Js_math.floor_int(3.2)));
  Mocha.test("floor_float", () => Test_utils.eq("File \"js_math_test.res\", line 88, characters 7-14", 3, Math.floor(3.2)));
  Mocha.test("fround", () => Test_utils.approxEq("File \"js_math_test.res\", line 91, characters 13-20", 0.001, 3.2, Math.fround(3.2)));
  Mocha.test("hypot", () => Test_utils.approxEq("File \"js_math_test.res\", line 94, characters 13-20", 0.001, 0.721, Math.hypot(0.4, 0.6)));
  Mocha.test("hypotMany", () => Test_utils.approxEq("File \"js_math_test.res\", line 97, characters 13-20", 0.001, 1.077, Math.hypot(0.4, 0.6, 0.8)));
  Mocha.test("imul", () => Test_utils.eq("File \"js_math_test.res\", line 100, characters 7-14", 8, Math.imul(4, 2)));
  Mocha.test("log", () => Test_utils.approxEq("File \"js_math_test.res\", line 103, characters 13-20", 0.001, -0.916, Math.log(0.4)));
  Mocha.test("log1p", () => Test_utils.approxEq("File \"js_math_test.res\", line 106, characters 13-20", 0.001, 0.336, Math.log1p(0.4)));
  Mocha.test("log10", () => Test_utils.approxEq("File \"js_math_test.res\", line 109, characters 13-20", 0.001, -0.397, Math.log10(0.4)));
  Mocha.test("log2", () => Test_utils.approxEq("File \"js_math_test.res\", line 112, characters 13-20", 0.001, -1.321, Math.log2(0.4)));
  Mocha.test("max_int", () => Test_utils.eq("File \"js_math_test.res\", line 115, characters 7-14", 4, Math.max(2, 4)));
  Mocha.test("maxMany_int", () => Test_utils.eq("File \"js_math_test.res\", line 118, characters 7-14", 4, Math.max(2, 4, 3)));
  Mocha.test("max_float", () => Test_utils.eq("File \"js_math_test.res\", line 121, characters 7-14", 4.2, Math.max(2.7, 4.2)));
  Mocha.test("maxMany_float", () => Test_utils.eq("File \"js_math_test.res\", line 124, characters 7-14", 4.2, Math.max(2.7, 4.2, 3.9)));
  Mocha.test("min_int", () => Test_utils.eq("File \"js_math_test.res\", line 127, characters 7-14", 2, Math.min(2, 4)));
  Mocha.test("minMany_int", () => Test_utils.eq("File \"js_math_test.res\", line 130, characters 7-14", 2, Math.min(2, 4, 3)));
  Mocha.test("min_float", () => Test_utils.eq("File \"js_math_test.res\", line 133, characters 7-14", 2.7, Math.min(2.7, 4.2)));
  Mocha.test("minMany_float", () => Test_utils.eq("File \"js_math_test.res\", line 136, characters 7-14", 2.7, Math.min(2.7, 4.2, 3.9)));
  Mocha.test("random", () => {
    let a = Math.random();
    Test_utils.eq("File \"js_math_test.res\", line 140, characters 7-14", true, a >= 0 && a < 1);
  });
  Mocha.test("random_int", () => {
    let a = Js_math.random_int(1, 3);
    Test_utils.eq("File \"js_math_test.res\", line 144, characters 7-14", true, a >= 1 && a < 3);
  });
  Mocha.test("unsafe_round", () => Test_utils.eq("File \"js_math_test.res\", line 147, characters 7-14", 3, Math.round(3.2)));
  Mocha.test("round", () => Test_utils.eq("File \"js_math_test.res\", line 150, characters 7-14", 3, Math.round(3.2)));
  Mocha.test("sign_int", () => Test_utils.eq("File \"js_math_test.res\", line 153, characters 7-14", -1, Math.sign(-4)));
  Mocha.test("sign_float", () => Test_utils.eq("File \"js_math_test.res\", line 156, characters 7-14", -1, Math.sign(-4.2)));
  Mocha.test("sign_float -0", () => Test_utils.eq("File \"js_math_test.res\", line 159, characters 7-14", -0, Math.sign(-0)));
  Mocha.test("sin", () => Test_utils.approxEq("File \"js_math_test.res\", line 162, characters 13-20", 0.001, 0.389, Math.sin(0.4)));
  Mocha.test("sinh", () => Test_utils.approxEq("File \"js_math_test.res\", line 165, characters 13-20", 0.001, 0.410, Math.sinh(0.4)));
  Mocha.test("sqrt", () => Test_utils.approxEq("File \"js_math_test.res\", line 168, characters 13-20", 0.001, 0.632, Math.sqrt(0.4)));
  Mocha.test("tan", () => Test_utils.approxEq("File \"js_math_test.res\", line 171, characters 13-20", 0.001, 0.422, Math.tan(0.4)));
  Mocha.test("tanh", () => Test_utils.approxEq("File \"js_math_test.res\", line 174, characters 13-20", 0.001, 0.379, Math.tanh(0.4)));
  Mocha.test("unsafe_trunc", () => Test_utils.eq("File \"js_math_test.res\", line 177, characters 7-14", 4, Math.trunc(4.2156)));
  Mocha.test("trunc", () => Test_utils.eq("File \"js_math_test.res\", line 180, characters 7-14", 4, Math.trunc(4.2156)));
});

/*  Not a pure module */
