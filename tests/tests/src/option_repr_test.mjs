// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mt from "./mt.mjs";
import * as Belt_List from "rescript/lib/es6/Belt_List.js";
import * as Primitive_object from "rescript/lib/es6/Primitive_object.js";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";

let suites = {
  contents: /* [] */0
};

let test_id = {
  contents: 0
};

function eq(loc, x, y) {
  Mt.eq_suites(test_id, suites, loc, x, y);
}

function b(loc, v) {
  Mt.bool_suites(test_id, suites, loc, v);
}

function f0(x) {
  let match = x[1];
  if (match !== undefined && match) {
    return 1;
  } else {
    return 2;
  }
}

function f1(u) {
  if (typeof u !== "object") {
    return 1;
  } else {
    return 0;
  }
}

function f2(x, y, zOpt, param) {
  let z = zOpt !== undefined ? zOpt : 3;
  console.log(x);
  if (y !== undefined) {
    return y + z | 0;
  } else {
    return 0;
  }
}

function f3(x) {
  if (x !== undefined) {
    return 1;
  } else {
    return 0;
  }
}

function f4(x) {
  if (x !== undefined) {
    return x + 1 | 0;
  } else {
    return 0;
  }
}

function f5(a) {
  return false;
}

function f6(a) {
  return true;
}

let f10 = Primitive_option.some(Primitive_option.some(Primitive_option.some(Primitive_option.some(undefined))));

let f11 = Primitive_option.some(f10);

let randomized = {
  contents: false
};

function create(randomOpt, param) {
  let random = randomOpt !== undefined ? randomOpt : randomized.contents;
  if (random) {
    return 2;
  } else {
    return 1;
  }
}

let ff = create(false, undefined);

function f13(xOpt, yOpt, param) {
  let x = xOpt !== undefined ? xOpt : 3;
  let y = yOpt !== undefined ? yOpt : 4;
  return x + y | 0;
}

let a = f13(2, undefined, undefined);

function f12(x) {
  return x;
}

let length_8_id = Belt_List.makeBy(8, x => x);

let length_10_id = Belt_List.makeBy(10, x => x);

function f13$1() {
  return Primitive_object.equal(Belt_List.take(length_10_id, 8), {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  });
}

b("File \"option_repr_test.res\", line 93, characters 4-11", Primitive_object.lessthan(undefined, null));

b("File \"option_repr_test.res\", line 94, characters 4-11", !Primitive_object.greaterthan(undefined, null));

b("File \"option_repr_test.res\", line 95, characters 4-11", Primitive_object.greaterthan(null, undefined));

b("File \"option_repr_test.res\", line 96, characters 4-11", Primitive_object.lessthan(undefined, Primitive_option.some(undefined)));

b("File \"option_repr_test.res\", line 97, characters 4-11", Primitive_object.greaterthan(Primitive_option.some(undefined), undefined));

console.log(6, undefined);

function ltx(a, b) {
  if (Primitive_object.lessthan(a, b)) {
    return Primitive_object.greaterthan(b, a);
  } else {
    return false;
  }
}

function gtx(a, b) {
  if (Primitive_object.greaterthan(a, b)) {
    return Primitive_object.lessthan(b, a);
  } else {
    return false;
  }
}

function eqx(a, b) {
  if (Primitive_object.equal(a, b)) {
    return Primitive_object.equal(b, a);
  } else {
    return false;
  }
}

function neqx(a, b) {
  if (Primitive_object.notequal(a, b)) {
    return Primitive_object.notequal(b, a);
  } else {
    return false;
  }
}

function all_true(xs) {
  return Belt_List.every(xs, x => x);
}

let xs_0 = gtx(Primitive_option.some(null), Primitive_option.some(undefined));

let xs = {
  hd: xs_0,
  tl: /* [] */0
};

b("File \"option_repr_test.res\", line 125, characters 8-15", Belt_List.every(xs, x => x));

let xs_0$1 = Primitive_object.lessthan(Primitive_option.some(undefined), 3) && Primitive_object.greaterthan(3, Primitive_option.some(undefined));

let xs_1 = {
  hd: Primitive_object.lessthan(Primitive_option.some(undefined), Primitive_option.some(Primitive_option.some(undefined))) && Primitive_object.greaterthan(Primitive_option.some(Primitive_option.some(undefined)), Primitive_option.some(undefined)),
  tl: {
    hd: Primitive_object.lessthan(Primitive_option.some(undefined), "3") && Primitive_object.greaterthan("3", Primitive_option.some(undefined)),
    tl: {
      hd: Primitive_object.lessthan(Primitive_option.some(undefined), true) && Primitive_object.greaterthan(true, Primitive_option.some(undefined)),
      tl: {
        hd: Primitive_object.lessthan(Primitive_option.some(undefined), false) && Primitive_object.greaterthan(false, Primitive_option.some(undefined)),
        tl: {
          hd: Primitive_object.lessthan(false, true) && Primitive_object.greaterthan(true, false),
          tl: {
            hd: Primitive_object.lessthan(false, true) && Primitive_object.greaterthan(true, false),
            tl: {
              hd: Primitive_object.lessthan(undefined, Primitive_option.some(undefined)) && Primitive_object.greaterthan(Primitive_option.some(undefined), undefined),
              tl: {
                hd: ltx(undefined, null),
                tl: {
                  hd: ltx(undefined, x => x),
                  tl: {
                    hd: ltx(null, 3),
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

let xs$1 = {
  hd: xs_0$1,
  tl: xs_1
};

b("File \"option_repr_test.res\", line 128, characters 4-11", Belt_List.every(xs$1, x => x));

let xs_0$2 = true && true;

let xs_1$1 = {
  hd: neqx(undefined, null),
  tl: {
    hd: Primitive_object.equal(Primitive_option.some(undefined), Primitive_option.some(undefined)) && Primitive_object.equal(Primitive_option.some(undefined), Primitive_option.some(undefined)),
    tl: {
      hd: Primitive_object.equal(Primitive_option.some(Primitive_option.some(undefined)), Primitive_option.some(Primitive_option.some(undefined))) && Primitive_object.equal(Primitive_option.some(Primitive_option.some(undefined)), Primitive_option.some(Primitive_option.some(undefined))),
      tl: {
        hd: Primitive_object.notequal(Primitive_option.some(Primitive_option.some(Primitive_option.some(undefined))), Primitive_option.some(Primitive_option.some(undefined))) && Primitive_object.notequal(Primitive_option.some(Primitive_option.some(undefined)), Primitive_option.some(Primitive_option.some(Primitive_option.some(undefined)))),
        tl: /* [] */0
      }
    }
  }
};

let xs$2 = {
  hd: xs_0$2,
  tl: xs_1$1
};

b("File \"option_repr_test.res\", line 145, characters 4-11", Belt_List.every(xs$2, x => x));

function v(x) {
  return x;
}

function v0(x) {
  return x;
}

let N0 = {
  v: v,
  v0: v0
};

Mt.from_pair_suites("Option_repr_test", suites.contents);

let f7;

let f8 = Primitive_option.some(undefined);

let f9 = Primitive_option.some(Primitive_option.some(undefined));

let N;

let none_arg;

export {
  suites,
  test_id,
  eq,
  b,
  f0,
  f1,
  f2,
  f3,
  f4,
  f5,
  f6,
  f7,
  f8,
  f9,
  f10,
  f11,
  randomized,
  create,
  ff,
  a,
  f12,
  N,
  length_8_id,
  length_10_id,
  f13$1 as f13,
  none_arg,
  ltx,
  gtx,
  eqx,
  neqx,
  all_true,
  N0,
}
/* ff Not a pure module */
