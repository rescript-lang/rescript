// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mocha from "mocha";
import * as Test_utils from "./test_utils.mjs";

Mocha.describe("Js_array_test", () => {
  Mocha.test("isArray_array", () => Test_utils.eq("File \"js_array_test.res\", line 25, characters 7-14", true, Array.isArray([])));
  Mocha.test("isArray_int", () => Test_utils.eq("File \"js_array_test.res\", line 28, characters 7-14", false, Array.isArray(34)));
  Mocha.test("length", () => Test_utils.eq("File \"js_array_test.res\", line 31, characters 7-14", 3, 3));
  Mocha.test("copyWithin", () => Test_utils.eq("File \"js_array_test.res\", line 35, characters 7-14", [
    1,
    2,
    3,
    1,
    2
  ], [
    1,
    2,
    3,
    4,
    5
  ].copyWithin(-2)));
  Mocha.test("copyWithinFrom", () => Test_utils.eq("File \"js_array_test.res\", line 38, characters 7-14", [
    4,
    5,
    3,
    4,
    5
  ], [
    1,
    2,
    3,
    4,
    5
  ].copyWithin(0, 3)));
  Mocha.test("copyWithinFromRange", () => Test_utils.eq("File \"js_array_test.res\", line 42, characters 6-13", [
    4,
    2,
    3,
    4,
    5
  ], [
    1,
    2,
    3,
    4,
    5
  ].copyWithin(0, 3, 4)));
  Mocha.test("fillInPlace", () => Test_utils.eq("File \"js_array_test.res\", line 49, characters 7-14", [
    4,
    4,
    4
  ], [
    1,
    2,
    3
  ].fill(4)));
  Mocha.test("fillFromInPlace", () => Test_utils.eq("File \"js_array_test.res\", line 52, characters 7-14", [
    1,
    4,
    4
  ], [
    1,
    2,
    3
  ].fill(4, 1)));
  Mocha.test("fillRangeInPlace", () => Test_utils.eq("File \"js_array_test.res\", line 55, characters 7-14", [
    1,
    4,
    3
  ], [
    1,
    2,
    3
  ].fill(4, 1, 2)));
  Mocha.test("pop", () => Test_utils.eq("File \"js_array_test.res\", line 58, characters 7-14", 3, [
    1,
    2,
    3
  ].pop()));
  Mocha.test("pop - empty array", () => Test_utils.eq("File \"js_array_test.res\", line 61, characters 7-14", undefined, [].pop()));
  Mocha.test("push", () => Test_utils.eq("File \"js_array_test.res\", line 64, characters 7-14", 4, [
    1,
    2,
    3
  ].push(4)));
  Mocha.test("pushMany", () => Test_utils.eq("File \"js_array_test.res\", line 67, characters 7-14", 5, [
    1,
    2,
    3
  ].push(4, 5)));
  Mocha.test("reverseInPlace", () => Test_utils.eq("File \"js_array_test.res\", line 70, characters 7-14", [
    3,
    2,
    1
  ], [
    1,
    2,
    3
  ].reverse()));
  Mocha.test("shift", () => Test_utils.eq("File \"js_array_test.res\", line 73, characters 7-14", 1, [
    1,
    2,
    3
  ].shift()));
  Mocha.test("shift - empty array", () => Test_utils.eq("File \"js_array_test.res\", line 76, characters 7-14", undefined, [].shift()));
  Mocha.test("sortInPlace", () => Test_utils.eq("File \"js_array_test.res\", line 79, characters 7-14", [
    1,
    2,
    3
  ], [
    3,
    1,
    2
  ].sort()));
  Mocha.test("sortInPlaceWith", () => Test_utils.eq("File \"js_array_test.res\", line 82, characters 7-14", [
    3,
    2,
    1
  ], [
    3,
    1,
    2
  ].sort((a, b) => b - a | 0)));
  Mocha.test("spliceInPlace", () => {
    let arr = [
      1,
      2,
      3,
      4
    ];
    let removed = arr.splice(2, 0, 5);
    Test_utils.eq("File \"js_array_test.res\", line 88, characters 7-14", [
      [
        1,
        2,
        5,
        3,
        4
      ],
      []
    ], [
      arr,
      removed
    ]);
  });
  Mocha.test("removeFromInPlace", () => {
    let arr = [
      1,
      2,
      3,
      4
    ];
    let removed = arr.splice(2);
    Test_utils.eq("File \"js_array_test.res\", line 94, characters 7-14", [
      [
        1,
        2
      ],
      [
        3,
        4
      ]
    ], [
      arr,
      removed
    ]);
  });
  Mocha.test("removeCountInPlace", () => {
    let arr = [
      1,
      2,
      3,
      4
    ];
    let removed = arr.splice(2, 1);
    Test_utils.eq("File \"js_array_test.res\", line 100, characters 7-14", [
      [
        1,
        2,
        4
      ],
      [3]
    ], [
      arr,
      removed
    ]);
  });
  Mocha.test("unshift", () => Test_utils.eq("File \"js_array_test.res\", line 103, characters 7-14", 4, [
    1,
    2,
    3
  ].unshift(4)));
  Mocha.test("unshiftMany", () => Test_utils.eq("File \"js_array_test.res\", line 106, characters 7-14", 5, [
    1,
    2,
    3
  ].unshift(4, 5)));
  Mocha.test("append", () => Test_utils.eq("File \"js_array_test.res\", line 109, characters 7-14", [
    1,
    2,
    3,
    4
  ], [
    1,
    2,
    3
  ].concat([4])));
  Mocha.test("concat", () => Test_utils.eq("File \"js_array_test.res\", line 112, characters 7-14", [
    1,
    2,
    3,
    4,
    5
  ], [
    1,
    2,
    3
  ].concat([
    4,
    5
  ])));
  Mocha.test("concatMany", () => Test_utils.eq("File \"js_array_test.res\", line 115, characters 7-14", [
    1,
    2,
    3,
    4,
    5,
    6,
    7
  ], [
    1,
    2,
    3
  ].concat([
    4,
    5
  ], [
    6,
    7
  ])));
  Mocha.test("includes", () => Test_utils.eq("File \"js_array_test.res\", line 119, characters 7-14", true, [
    1,
    2,
    3
  ].includes(3)));
  Mocha.test("indexOf", () => Test_utils.eq("File \"js_array_test.res\", line 122, characters 7-14", 1, [
    1,
    2,
    3
  ].indexOf(2)));
  Mocha.test("indexOfFrom", () => Test_utils.eq("File \"js_array_test.res\", line 125, characters 7-14", 3, [
    1,
    2,
    3,
    2
  ].indexOf(2, 2)));
  Mocha.test("join", () => Test_utils.eq("File \"js_array_test.res\", line 128, characters 7-14", "1,2,3", [
    1,
    2,
    3
  ].join()));
  Mocha.test("joinWith", () => Test_utils.eq("File \"js_array_test.res\", line 131, characters 7-14", "1;2;3", [
    1,
    2,
    3
  ].join(";")));
  Mocha.test("lastIndexOf", () => Test_utils.eq("File \"js_array_test.res\", line 134, characters 7-14", 1, [
    1,
    2,
    3
  ].lastIndexOf(2)));
  Mocha.test("lastIndexOfFrom", () => Test_utils.eq("File \"js_array_test.res\", line 137, characters 7-14", 1, [
    1,
    2,
    3,
    2
  ].lastIndexOf(2, 2)));
  Mocha.test("slice", () => Test_utils.eq("File \"js_array_test.res\", line 140, characters 7-14", [
    2,
    3
  ], [
    1,
    2,
    3,
    4,
    5
  ].slice(1, 3)));
  Mocha.test("copy", () => Test_utils.eq("File \"js_array_test.res\", line 143, characters 7-14", [
    1,
    2,
    3,
    4,
    5
  ], [
    1,
    2,
    3,
    4,
    5
  ].slice()));
  Mocha.test("sliceFrom", () => Test_utils.eq("File \"js_array_test.res\", line 146, characters 7-14", [
    3,
    4,
    5
  ], [
    1,
    2,
    3,
    4,
    5
  ].slice(2)));
  Mocha.test("toString", () => Test_utils.eq("File \"js_array_test.res\", line 149, characters 7-14", "1,2,3", [
    1,
    2,
    3
  ].toString()));
  Mocha.test("toLocaleString", () => Test_utils.eq("File \"js_array_test.res\", line 152, characters 7-14", "1,2,3", [
    1,
    2,
    3
  ].toLocaleString()));
  Mocha.test("every", () => Test_utils.eq("File \"js_array_test.res\", line 163, characters 7-14", true, [
    1,
    2,
    3
  ].every(n => n > 0)));
  Mocha.test("everyi", () => Test_utils.eq("File \"js_array_test.res\", line 166, characters 7-14", false, [
    1,
    2,
    3
  ].every((param, i) => i > 0)));
  Mocha.test("filter", () => Test_utils.eq("File \"js_array_test.res\", line 169, characters 7-14", [
    2,
    4
  ], [
    1,
    2,
    3,
    4
  ].filter(n => n % 2 === 0)));
  Mocha.test("filteri", () => Test_utils.eq("File \"js_array_test.res\", line 172, characters 7-14", [
    1,
    3
  ], [
    1,
    2,
    3,
    4
  ].filter((param, i) => i % 2 === 0)));
  Mocha.test("find", () => Test_utils.eq("File \"js_array_test.res\", line 176, characters 7-14", 2, [
    1,
    2,
    3,
    4
  ].find(n => n % 2 === 0)));
  Mocha.test("find - no match", () => Test_utils.eq("File \"js_array_test.res\", line 179, characters 7-14", undefined, [
    1,
    2,
    3,
    4
  ].find(n => n % 2 === 5)));
  Mocha.test("findi", () => Test_utils.eq("File \"js_array_test.res\", line 182, characters 7-14", 1, [
    1,
    2,
    3,
    4
  ].find((param, i) => i % 2 === 0)));
  Mocha.test("findi - no match", () => Test_utils.eq("File \"js_array_test.res\", line 185, characters 7-14", undefined, [
    1,
    2,
    3,
    4
  ].find((param, i) => i % 2 === 5)));
  Mocha.test("findIndex", () => Test_utils.eq("File \"js_array_test.res\", line 189, characters 7-14", 1, [
    1,
    2,
    3,
    4
  ].findIndex(n => n % 2 === 0)));
  Mocha.test("findIndexi", () => Test_utils.eq("File \"js_array_test.res\", line 192, characters 7-14", 0, [
    1,
    2,
    3,
    4
  ].findIndex((param, i) => i % 2 === 0)));
  Mocha.test("forEach", () => {
    let sum = {
      contents: 0
    };
    [
      1,
      2,
      3
    ].forEach(n => {
      sum.contents = sum.contents + n | 0;
    });
    Test_utils.eq("File \"js_array_test.res\", line 198, characters 7-14", 6, sum.contents);
  });
  Mocha.test("forEachi", () => {
    let sum = {
      contents: 0
    };
    [
      1,
      2,
      3
    ].forEach((param, i) => {
      sum.contents = sum.contents + i | 0;
    });
    Test_utils.eq("File \"js_array_test.res\", line 204, characters 7-14", 3, sum.contents);
  });
  Mocha.test("map", () => Test_utils.eq("File \"js_array_test.res\", line 215, characters 7-14", [
    2,
    4,
    6,
    8
  ], [
    1,
    2,
    3,
    4
  ].map(n => (n << 1))));
  Mocha.test("mapi", () => Test_utils.eq("File \"js_array_test.res\", line 218, characters 7-14", [
    0,
    2,
    4,
    6
  ], [
    1,
    2,
    3,
    4
  ].map((param, i) => (i << 1))));
  Mocha.test("reduce", () => Test_utils.eq("File \"js_array_test.res\", line 221, characters 7-14", -10, [
    1,
    2,
    3,
    4
  ].reduce((acc, n) => acc - n | 0, 0)));
  Mocha.test("reducei", () => Test_utils.eq("File \"js_array_test.res\", line 224, characters 7-14", -6, [
    1,
    2,
    3,
    4
  ].reduce((acc, param, i) => acc - i | 0, 0)));
  Mocha.test("reduceRight", () => Test_utils.eq("File \"js_array_test.res\", line 227, characters 7-14", -10, [
    1,
    2,
    3,
    4
  ].reduceRight((acc, n) => acc - n | 0, 0)));
  Mocha.test("reduceRighti", () => Test_utils.eq("File \"js_array_test.res\", line 230, characters 7-14", -6, [
    1,
    2,
    3,
    4
  ].reduceRight((acc, param, i) => acc - i | 0, 0)));
  Mocha.test("some", () => Test_utils.eq("File \"js_array_test.res\", line 233, characters 7-14", false, [
    1,
    2,
    3,
    4
  ].some(n => n <= 0)));
  Mocha.test("somei", () => Test_utils.eq("File \"js_array_test.res\", line 236, characters 7-14", true, [
    1,
    2,
    3,
    4
  ].some((param, i) => i <= 0)));
});

/*  Not a pure module */
