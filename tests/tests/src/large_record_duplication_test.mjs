// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mocha from "mocha";
import * as Test_utils from "./test_utils.mjs";
import * as Primitive_object from "@rescript/runtime/lib/es6/Primitive_object.js";
import * as Primitive_exceptions from "@rescript/runtime/lib/es6/Primitive_exceptions.js";

let v0 = {
  x0: 9,
  x1: 9,
  x2: 9,
  x3: 9,
  x4: 9,
  x5: 9,
  x6: 9,
  x7: 9,
  x8: 9,
  x9: 9,
  x10: 9,
  x11: 9,
  x12: 9,
  x13: 9,
  x14: 9,
  x15: 9,
  x16: 9,
  x17: 9,
  x18: 9,
  x19: 9,
  x20: 9,
  x21: 9,
  x22: 9
};

let A0 = /* @__PURE__ */Primitive_exceptions.create("Large_record_duplication_test.A0");

Mocha.describe("Large_record_duplication_test", () => {
  Mocha.test("large record spread operation", () => {
    let f0 = x => {
      let newrecord = {...x};
      newrecord.x0 = 1;
      return newrecord;
    };
    let result = f0(v0);
    Test_utils.eq("File \"large_record_duplication_test.res\", line 143, characters 7-14", result.x0, 1);
    Test_utils.eq("File \"large_record_duplication_test.res\", line 144, characters 7-14", result.x1, 9);
  });
  Mocha.test("exception with record spread", () => {
    let Small = /* @__PURE__ */Primitive_exceptions.create("Small");
    let f_small = x => {
      if (x.RE_EXN_ID === Small) {
        return {
          RE_EXN_ID: Small,
          x: 2,
          y: x.y
        };
      } else {
        return {
          RE_EXN_ID: "Not_found"
        };
      }
    };
    let h = {
      RE_EXN_ID: Small,
      x: 1,
      y: ""
    };
    Test_utils.eq("File \"large_record_duplication_test.res\", line 157, characters 7-14", f_small(h), {
      RE_EXN_ID: Small,
      x: 2,
      y: ""
    });
    Test_utils.eq("File \"large_record_duplication_test.res\", line 159, characters 7-14", Primitive_object.equal(h, {
      RE_EXN_ID: Small,
      x: 2,
      y: ""
    }), false);
  });
  Mocha.test("variant with large record", () => {
    let get_x0 = x => {
      if (typeof x !== "object") {
        return;
      } else {
        return x.x0;
      }
    };
    let f1 = x => {
      if (typeof x !== "object") {
        return "A1";
      }
      let newrecord = {...x};
      newrecord.x0 = 1;
      return newrecord;
    };
    Test_utils.eq("File \"large_record_duplication_test.res\", line 201, characters 7-14", get_x0(f1({
      TAG: "A0",
      x0: 9,
      x1: 9,
      x2: 9,
      x3: 9,
      x4: 9,
      x5: 9,
      x6: 9,
      x7: 9,
      x8: 9,
      x9: 9,
      x10: 9,
      x11: 9,
      x12: 9,
      x13: 9,
      x14: 9,
      x15: 9,
      x16: 9,
      x17: 9,
      x18: 9,
      x19: 9,
      x20: 9,
      x21: 9,
      x22: 9
    })), 1);
  });
  Mocha.test("variant with large record and int payload", () => {
    let get_x0 = x => {
      if (x.TAG === "A0") {
        return x.x0;
      }
      
    };
    let f2 = x => {
      if (x.TAG !== "A0") {
        return x;
      }
      let newrecord = {...x};
      newrecord.x0 = 1;
      return newrecord;
    };
    Test_utils.eq("File \"large_record_duplication_test.res\", line 243, characters 7-14", get_x0(f2({
      TAG: "A0",
      x0: 9,
      x1: 9,
      x2: 9,
      x3: 9,
      x4: 9,
      x5: 9,
      x6: 9,
      x7: 9,
      x8: 9,
      x9: 9,
      x10: 9,
      x11: 9,
      x12: 9,
      x13: 9,
      x14: 9,
      x15: 9,
      x16: 9,
      x17: 9,
      x18: 9,
      x19: 9,
      x20: 9,
      x21: 9,
      x22: 9
    })), 1);
  });
  Mocha.test("exception extension with large record", () => {
    let f3 = x => {
      if (x.RE_EXN_ID !== A0) {
        return x;
      }
      let newrecord = {...x};
      newrecord.x0 = 1;
      return newrecord;
    };
    let get_x0 = x => {
      if (x.RE_EXN_ID === A0) {
        return x.x0;
      }
      
    };
    let v3 = {
      RE_EXN_ID: A0,
      x0: 9,
      x1: 9,
      x2: 9,
      x3: 9,
      x4: 9,
      x5: 9,
      x6: 9,
      x7: 9,
      x8: 9,
      x9: 9,
      x10: 9,
      x11: 9,
      x12: 9,
      x13: 9,
      x14: 9,
      x15: 9,
      x16: 9,
      x17: 9,
      x18: 9,
      x19: 9,
      x20: 9,
      x21: 9,
      x22: 9
    };
    Test_utils.eq("File \"large_record_duplication_test.res\", line 285, characters 7-14", get_x0(f3(v3)), 1);
    Test_utils.eq("File \"large_record_duplication_test.res\", line 286, characters 7-14", get_x0(v3), 9);
    Test_utils.eq("File \"large_record_duplication_test.res\", line 287, characters 7-14", get_x0({
      RE_EXN_ID: "Not_found"
    }), undefined);
  });
});

export {
  v0,
  A0,
}
/*  Not a pure module */
