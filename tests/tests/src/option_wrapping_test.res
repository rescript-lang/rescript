type test = {x: int}

let x1 = Some("hello")
let x2 = Some(1)
let x3 = Some(Ok("hi"))
let x4 = Some(#polyvar)
let x5 = Some({x: 42})
let x6 = Some({"x": 42})
let x7 = Some([1, 2, 3])
let x8 = Some(() => ())

let x10 = Some(Nullable.null)
let x11 = Some(Nullable.undefined)
let x12 = Some(Nullable.Value("test"))

let x20 = Some(Jsx.null)
let x21 = Some(Date.make())
let x22 = Some(/test/)
let x23 = Some((Map.make(): Map.t<string, string>))
let x24 = Some((Set.make(): Set.t<string>))
let x25 = Some((WeakMap.make(): WeakMap.t<string, string>))
let x26 = Some((WeakSet.make(): WeakSet.t<string>))
let x27 = Some(Float32Array.fromArray([1.0]))
let x28 = Some(Symbol.make(""))
let x29 = Some(JsError.make(""))
let x30 = Some(ArrayBuffer.make(0))
let x31 = Some(ArrayBuffer.make(0)->DataView.fromBuffer)
let x32 = Some((Map.make(): Map.t<string, string>)->Map.values)
let x33 = Some(AsyncIterator.make(_ => AsyncIterator.value(true)->Promise.resolve))

let x34 = Some(Intl.ListFormat.make())
let x35 = Some(Intl.Segmenter.make())
let x36 = Some(Intl.Segmenter.make()->Intl.Segmenter.segment(""))
let x37 = Some(Intl.DateTimeFormat.make())
let x38 = Some(Intl.NumberFormat.make())
let x39 = Some(Intl.NumberFormat.Grouping.fromBool(true))
let x40 = Some(Intl.Collator.make())
let x41 = Some(Intl.RelativeTimeFormat.make())
let x42 = Some(Intl.PluralRules.make())
let x43 = Some(Intl.Locale.make("en"))

let x44 = Some((1, 2))
let x45 = Some(Promise.resolve(true))
let x46 = Some(list{})
let x47 = Some((Dict.make(): dict<string>))
let x48 = Some(Lazy.make(_ => true))
