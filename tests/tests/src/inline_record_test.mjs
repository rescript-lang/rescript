// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mocha from "mocha";
import * as Belt_List from "@rescript/runtime/lib/es6/Belt_List.js";
import * as Test_utils from "./test_utils.mjs";
import * as Primitive_exceptions from "@rescript/runtime/lib/es6/Primitive_exceptions.js";

let v = {
  TAG: "A0",
  lbl: 3,
  more: /* [] */0
};

let v1 = {
  TAG: "A1",
  more: {
    hd: 1,
    tl: {
      hd: 2,
      tl: /* [] */0
    }
  }
};

function f(x) {
  if (x.TAG === "A0") {
    return Belt_List.reduceReverse(x.more, x.lbl, (a, b) => a + b | 0);
  } else {
    return Belt_List.reduceReverse(x.more, 0, (a, b) => a + b | 0);
  }
}

let A0 = /* @__PURE__ */Primitive_exceptions.create("Inline_record_test.A0");

let v3 = {
  RE_EXN_ID: A0,
  lbl: 3,
  more: /* [] */0
};

function ff(x) {
  if (x.TAG === "A0") {
    x.x = x.x + 1 | 0;
  } else {
    x.z = x.z + 2 | 0;
  }
}

let v4 = {
  TAG: "A0",
  x: 0,
  y: 0,
  z: 0
};

let v5 = {
  TAG: "A1",
  z: 0
};

let A4 = /* @__PURE__ */Primitive_exceptions.create("Inline_record_test.A4");

let v6 = {
  RE_EXN_ID: A4,
  x: 0,
  y: 0,
  z: 0
};

function ff0(x) {
  if (x.RE_EXN_ID === A4) {
    x.x = x.x + 1 | 0;
    x.z = x.z + 1 | 0;
    return;
  }
  
}

function ff1(x) {
  if (typeof x !== "object") {
    return "A1";
  } else {
    return {
      TAG: "A0",
      lbl: x.lbl + 1 | 0,
      more: x.more
    };
  }
}

let b = {
  TAG: "B"
};

Mocha.describe("Inline_record_test", () => {
  Mocha.test("inline record basic operations", () => {
    Test_utils.eq("File \"inline_record_test.res\", line 75, characters 7-14", f(v), 3);
    Test_utils.eq("File \"inline_record_test.res\", line 76, characters 7-14", f(v1), 3);
    console.log(f(v));
    console.log(f(v1));
  });
  Mocha.test("inline record variant switch", () => {
    let tmp;
    if (A0 === A0) {
      tmp = 3;
    } else {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "inline_record_test.res",
          86,
          13
        ],
        Error: new Error()
      };
    }
    Test_utils.eq("File \"inline_record_test.res\", line 83, characters 6-13", tmp, 3);
  });
  Mocha.test("inline record mutable operations", () => {
    for (let i = 0; i <= 10; ++i) {
      ff(v4);
      ff(v5);
    }
    let tmp;
    if (v4.TAG === "A0") {
      tmp = v4.x;
    } else {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "inline_record_test.res",
          102,
          13
        ],
        Error: new Error()
      };
    }
    Test_utils.eq("File \"inline_record_test.res\", line 99, characters 6-13", tmp, 11);
    let tmp$1;
    if (v5.TAG === "A0") {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "inline_record_test.res",
          111,
          13
        ],
        Error: new Error()
      };
    }
    tmp$1 = v5.z;
    Test_utils.eq("File \"inline_record_test.res\", line 108, characters 6-13", tmp$1, 22);
  });
  Mocha.test("inline record exception operations", () => {
    for (let i = 0; i <= 10; ++i) {
      ff0(v6);
    }
    let tmp;
    if (v6.RE_EXN_ID === A4) {
      tmp = v6.x;
    } else {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "inline_record_test.res",
          126,
          13
        ],
        Error: new Error()
      };
    }
    Test_utils.eq("File \"inline_record_test.res\", line 123, characters 6-13", tmp, 11);
  });
  Mocha.test("empty record operations", () => {
    if (typeof b !== "object") {
      console.log("A!");
      return;
    }
    console.log("B");
  });
  Mocha.test("record pattern matching", () => {
    console.log("10!");
  });
});

let v2 = {
  TAG: "A0",
  lbl: 3,
  more: /* [] */0
};

let vvv = {
  TAG: "A0",
  lbl: 3,
  more: /* [] */0
};

let r = {
  y: 10
};

export {
  v,
  v1,
  f,
  v2,
  A0,
  v3,
  vvv,
  ff,
  v4,
  v5,
  A4,
  v6,
  ff0,
  ff1,
  b,
  r,
}
/*  Not a pure module */
