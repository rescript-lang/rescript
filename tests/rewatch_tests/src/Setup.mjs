// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Nodeurl from "node:url";
import * as Nodepath from "node:path";
import * as Stdlib_Promise from "@rescript/runtime/lib/es6/Stdlib_Promise.js";
import * as Promises from "node:fs/promises";

let processUtils = await import(Nodepath.resolve(Nodepath.dirname(Nodeurl.fileURLToPath(import.meta.url)), "../../../lib_dev/process.js"));

async function commands(workingDirectory) {
  let pwdExists = await Stdlib_Promise.$$catch(Promises.access(workingDirectory).then(() => true), param => Promise.resolve(false));
  if (!pwdExists) {
    throw {
      RE_EXN_ID: "Failure",
      _1: "Working directory does not exist: " + workingDirectory,
      Error: new Error()
    };
  }
  let build = async () => {
    await processUtils.rewatch("build", [], {
      cwd: workingDirectory
    });
  };
  let clean = async () => {
    await processUtils.rewatch("clean", [], {
      cwd: workingDirectory
    });
  };
  let rescript = {
    build: build,
    clean: clean
  };
  let install = async () => {
    await processUtils.npm(["install"], {
      cwd: workingDirectory
    });
  };
  let checkout = async () => {
    await processUtils.git([
      "checkout",
      "."
    ], {
      cwd: workingDirectory
    });
  };
  return {
    rescript: rescript,
    npm: {
      install: install
    },
    git: {
      checkout: checkout
    }
  };
}

function sleep(ms) {
  return new Promise((res, param) => {
    setTimeout(res, ms);
  });
}

export {
  processUtils,
  commands,
  sleep,
}
/* processUtils Not a pure module */
