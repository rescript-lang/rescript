
  Syntax error!
  syntax_tests/parsing/infiniteLoops/equalAfterBinaryExpr.res:169:17

  167 ┆ if isLeaf(. successor) {
  168 ┆   if rbt->root === Some(successor) {
  169 ┆     rbt->root = None
  170 ┆   }
  171 ┆ }

  Did you mean `==` here?

let rec _addLoop =
  ((Function$
      (fun rbt ->
         fun currentNode ->
           ((if (Some currentNode) == (rbt |.u root)
             then currentNode.color <- Black
             else
               if (currentNode.parent |.u castNotOption).color == Black
               then ()
               else
                 if
                   (((let uncle = uncleOf currentNode in
                      (uncle != None) &&
                        ((uncle |.u castNotOption).color == Red)))
                   [@res.braces ])
                 then
                   ((currentNode.parent |.u castNotOption).color <- Black;
                    ((uncleOf currentNode) |.u castNotOption).color <- Black;
                    ((grandParentOf currentNode) |.u castNotOption).color <-
                      Red;
                    _addLoop rbt
                      ((grandParentOf currentNode) |.u castNotOption))
                 else
                   (let currentNode =
                      if
                        (not (isLeft currentNode)) &&
                          (isLeft (currentNode.parent |.u castNotOption))
                      then
                        (rotateLeft rbt
                           (currentNode.parent |.u castNotOption);
                         currentNode.left |.u castNotOption)
                      else
                        if
                          (isLeft currentNode) &&
                            (not
                               (isLeft (currentNode.parent |.u castNotOption)))
                        then
                          (rotateRight rbt
                             (currentNode.parent |.u castNotOption);
                           currentNode.right |.u castNotOption)
                        else currentNode in
                    (currentNode.parent |.u castNotOption).color <- Black;
                    ((grandParentOf currentNode) |.u castNotOption).color <-
                      Red;
                    if isLeft currentNode
                    then
                      rotateRight rbt
                        ((grandParentOf currentNode) |.u castNotOption)
                    else
                      rotateLeft rbt
                        ((grandParentOf currentNode) |.u castNotOption)))
           [@res.braces ])))
  [@res.arity 2])
let removeNode =
  ((Function$
      (fun rbt ->
         fun node ->
           ((if nodeToRemove.color == Black
             then
               (if successor.color == Red
                then
                  (successor.color <- Black;
                   if successor.parent == None
                   then rbt |.u (rootSet (Some successor)))
                else
                  (let break = ref false in
                   let successorRef = ref successor in
                   while not break.contents do
                     let successor = successorRef.contents in
                     match successor.parent with
                     | None ->
                         (rbt |.u (rootSet (Some successor));
                          break.contents <- true)
                     | Some successorParent ->
                         let sibling = siblingOf successor in
                         (if
                            (sibling != None) &&
                              ((sibling |.u castNotOption).color == Red)
                          then
                            (successorParent.color <- Red;
                             (sibling |.u castNotOption).color <- Black;
                             if isLeft successor
                             then rotateLeft rbt successorParent
                             else rotateRight rbt successorParent);
                          (let sibling = siblingOf successor in
                           let siblingNN = sibling |.u castNotOption in
                           if
                             (successorParent.color == Black) &&
                               ((sibling == None) ||
                                  (((siblingNN.color == Black) &&
                                      ((siblingNN.left == None) ||
                                         ((siblingNN.left |.u castNotOption).color
                                            == Black)))
                                     &&
                                     ((siblingNN.right == None) ||
                                        ((siblingNN.right |.u castNotOption).color
                                           == Black))))
                           then
                             (if sibling != None then siblingNN.color <- Red;
                              successorRef.contents <- successorParent)
                           else
                             if
                               (successorParent.color == Red) &&
                                 ((sibling == None) ||
                                    (((siblingNN.color == Black) &&
                                        ((siblingNN.left == None) ||
                                           ((siblingNN.left |.u castNotOption).color
                                              == Black)))
                                       &&
                                       ((siblingNN.right == None) ||
                                          ((siblingNN.right |.u castNotOption).color
                                             == Black))))
                             then
                               (if sibling != None
                                then siblingNN.color <- Red;
                                successorParent.color <- Black;
                                break.contents <- true)
                             else
                               if
                                 (sibling != None) &&
                                   ((sibling |.u castNotOption).color ==
                                      Black)
                               then
                                 (let sibling = sibling |.u castNotOption in
                                  if
                                    (((isLeft successor) &&
                                        ((sibling.right == None) ||
                                           ((sibling.right |.u castNotOption).color
                                              == Black)))
                                       && (sibling.left != None))
                                      &&
                                      ((sibling.left |.u castNotOption).color
                                         == Red)
                                  then
                                    (sibling.color <- Red;
                                     (sibling.left |.u castNotOption).color
                                       <- Black;
                                     rotateRight rbt sibling)
                                  else
                                    if
                                      (((not (isLeft successor)) &&
                                          ((sibling.left == None) ||
                                             ((sibling.left |.u castNotOption).color
                                                == Black)))
                                         && (sibling.right != None))
                                        &&
                                        ((sibling.right |.u castNotOption).color
                                           == Red)
                                    then
                                      (sibling.color <- Red;
                                       (sibling.right |.u castNotOption).color
                                         <- Black;
                                       rotateLeft rbt sibling);
                                  break.contents <- true)
                               else
                                 (let sibling = siblingOf successor in
                                  let sibling = sibling |.u castNotOption in
                                  sibling.color <- (successorParent.color);
                                  if isLeft successor
                                  then
                                    ((sibling.right |.u castNotOption).color
                                       <- Black;
                                     rotateRight rbt successorParent)
                                  else
                                    ((sibling.left |.u castNotOption).color
                                       <- Black;
                                     rotateLeft rbt successorParent))))
                     done));
             if isLeaf successor
             then
               (if (rbt |.u root) == (Some successor)
                then (rbt |.u root) = None))
           [@res.braces ])))
  [@res.arity 2])