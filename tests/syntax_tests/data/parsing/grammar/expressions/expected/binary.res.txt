;;node := (if newBalance === 2 then avl -> (rotateRight node) else node)
;;node := ((if newBalance === 2 then avl -> (rotateRight node) else node)
    [@attr ])
let x = z -> (match z with | _ -> false)
let x = z -> ((match z with | _ -> false)[@attr ])
let x = z -> (assert z)
let x = z -> ((assert z)[@attr ])
let x = z -> (try sideEffect () with | _ -> f ())
let x = z -> ((try sideEffect () with | _ -> f ())[@attr ])
let x = z -> for i = 0 to 10 do () done
let x = z -> ((for i = 0 to 10 do () done)[@attr ])
let x = z -> while condition do () done
let x = z -> ((while condition do () done)[@attr ])
let x = (a + (-1)) + (-2)
let x = (a + (((-1))[@attr ])) + (((-2))[@attr ])
let x = (a % a) == 0
let x = a ^^^ (a == 0)
let x = a &&& (a == 0)
let x = a ||| (a == 0)
let x = (a << a) == 0
let x = (a >> a) == 0
let x = (a >>> a) == 0
let x = a - b
let x = a -. b
;;Constructor (a, b)
;;`Constructor (a, b)
let _ = ((Constructor (a, b); `Constructor (a, b))[@res.braces ])
;;(library.getBalance account) ->
    (Promise.Js.catch
       (fun [arity:1]_ -> ((Promise.resolved None)[@res.braces ])))