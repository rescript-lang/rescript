let cApp = foo 3
let uApp = foo 3
let cFun = Function$ (fun [arity:1]x -> 3)
let uFun = Function$ (fun [arity:1]x -> 3)
let mixFun =
  Function$
    (fun [arity:3]a ->
       fun b ->
         fun c ->
           Function$
             (fun [arity:3]d ->
                fun e -> fun f -> Function$ (fun [arity:2]g -> fun h -> 4)))
let bracesFun =
  Function$ (fun [arity:1]x -> Function$ (fun [arity:1]y -> x + y))
let cFun2 = Function$ (fun [arity:2]x -> fun y -> 3)
let uFun2 = Function$ (fun [arity:2]x -> fun y -> 3)
type nonrec cTyp = (string -> int, [ `Has_arity1 ]) function$
type nonrec uTyp = (string -> int, [ `Has_arity1 ]) function$
type nonrec mixTyp =
  (string ->
     string ->
       string ->
         (string ->
            string ->
              string -> (string -> string -> int, [ `Has_arity2 ]) function$,
           [ `Has_arity3 ]) function$,
    [ `Has_arity3 ]) function$
type nonrec bTyp =
  (string -> (string -> int, [ `Has_arity1 ]) function$, [ `Has_arity1 ])
    function$
type nonrec cTyp2 = (string -> string -> int, [ `Has_arity2 ]) function$
type nonrec uTyp2 = (string -> string -> int, [ `Has_arity2 ]) function$
type nonrec cu = (unit -> int, [ `Has_arity1 ]) function$
type nonrec cp = (unit -> int, [ `Has_arity1 ]) function$
type nonrec cuu =
  (unit -> (unit -> int, [ `Has_arity1 ]) function$, [ `Has_arity1 ])
    function$
type nonrec cpu =
  (unit -> (unit -> int, [ `Has_arity1 ]) function$, [ `Has_arity1 ])
    function$
type nonrec cup =
  (unit -> (unit -> int, [ `Has_arity1 ]) function$, [ `Has_arity1 ])
    function$
type nonrec cpp =
  (unit -> (unit -> int, [ `Has_arity1 ]) function$, [ `Has_arity1 ])
    function$
type nonrec cu2 = (unit -> unit -> unit, [ `Has_arity2 ]) function$
type nonrec cp2 = (unit -> unit -> unit, [ `Has_arity2 ]) function$
type nonrec uu = (unit -> int, [ `Has_arity1 ]) function$
type nonrec up = (unit -> int, [ `Has_arity1 ]) function$
type nonrec uuu =
  (unit -> (unit -> int, [ `Has_arity1 ]) function$, [ `Has_arity1 ])
    function$
type nonrec upu =
  (unit -> (unit -> int, [ `Has_arity1 ]) function$, [ `Has_arity1 ])
    function$
type nonrec uup =
  (unit -> (unit -> int, [ `Has_arity1 ]) function$, [ `Has_arity1 ])
    function$
type nonrec upp =
  (unit -> (unit -> int, [ `Has_arity1 ]) function$, [ `Has_arity1 ])
    function$
type nonrec uu2 = (unit -> unit -> unit, [ `Has_arity2 ]) function$
type nonrec up2 = (unit -> unit -> unit, [ `Has_arity2 ]) function$
type nonrec cnested =
  ((string -> unit, [ `Has_arity1 ]) function$ -> unit, [ `Has_arity1 ])
    function$
type nonrec unested =
  ((string -> unit, [ `Has_arity1 ]) function$ -> unit, [ `Has_arity1 ])
    function$
let (uannpoly : ('a -> string, [ `Has_arity1 ]) function$) = xx
let (uannint : (int -> string, [ `Has_arity1 ]) function$) = xx
let _ = Function$ ((fun [arity:1]x -> 34)[@att ])
let _ = Function$ ((fun [arity:1]x -> 34)[@res.async ][@att ])
let _ = preserveAttr (Function$ ((fun [arity:1]x -> 34)[@att ]))
let _ = preserveAttr (Function$ ((fun [arity:1]x -> 34)[@res.async ][@att ]))
let t0 (type a) (type b) =
  Function$ (fun [arity:2](l : a list) -> fun (x : a) -> x :: l)
let t1 (type a) (type b) =
  Function$ (fun [arity:2](l : a list) -> fun (x : a) -> x :: l)
let t2 (type a) (type b) =
  Function$ (fun [arity:2](l : a list) -> fun (x : a) -> x :: l)
let t3 (type a) (type b) =
  Function$ (fun [arity:2](l : a list) -> fun (x : a) -> x :: l)
let t4 (type a) (type b) =
  Function$ (fun [arity:2](l : a list) -> fun (x : a) -> x :: l)
let t5 (type a) (type b) =
  Function$ (fun [arity:2](l : a list) -> fun (x : a) -> x :: l)
let t6 (type a) (type b) =
  Function$ (fun [arity:2](l : a list) -> fun (x : a) -> x :: l)
type nonrec arrowPath1 = (int -> string, [ `Has_arity1 ]) function$
type nonrec arrowPath2 = (I.t -> string, [ `Has_arity1 ]) function$
type nonrec arrowPath3 = (int -> string, [ `Has_arity1 ]) function$
type nonrec arrowPath4 = (I.t -> string, [ `Has_arity1 ]) function$
type nonrec callback1 =
  (ReactEvent.Mouse.t -> unit, [ `Has_arity1 ]) function$ as 'callback
type nonrec callback2 =
  (ReactEvent.Mouse.t -> unit as 'u, [ `Has_arity1 ]) function$
type nonrec callback3 =
  (ReactEvent.Mouse.t -> unit, [ `Has_arity1 ]) function$ as 'callback
let cApp = foo 3
let uApp = foo 3
let cFun = Function$ (fun [arity:1]x -> 3)
let uFun = Function$ (fun [arity:1]x -> 3)
let mixFun =
  Function$
    (fun [arity:1]a ->
       Function$
         (fun [arity:2]b ->
            fun c ->
              Function$
                (fun [arity:3]d ->
                   fun e ->
                     fun f ->
                       Function$
                         (fun [arity:1]g -> Function$ (fun [arity:1]h -> 4)))))
let bracesFun =
  Function$ (fun [arity:1]x -> Function$ (fun [arity:1]y -> x + y))
let cFun2 = Function$ (fun [arity:2]x -> fun y -> 3)
let uFun2 = Function$ (fun [arity:2]x -> fun y -> 3)
let cFun2Dots = Function$ (fun [arity:2]x -> fun y -> 3)
type nonrec cTyp = (string -> int, [ `Has_arity1 ]) function$
type nonrec uTyp = (string -> int, [ `Has_arity1 ]) function$
type nonrec mixTyp =
  (string ->
     (string ->
        string ->
          (string ->
             string ->
               string -> string -> (string -> int, [ `Has_arity1 ]) function$,
            [ `Has_arity4 ]) function$,
       [ `Has_arity2 ]) function$,
    [ `Has_arity1 ]) function$
type nonrec bTyp =
  (string -> (string -> int, [ `Has_arity1 ]) function$, [ `Has_arity1 ])
    function$
type nonrec cTyp2 = (string -> string -> int, [ `Has_arity2 ]) function$
type nonrec uTyp2 = (string -> string -> int, [ `Has_arity2 ]) function$
type nonrec cu = (unit -> int, [ `Has_arity1 ]) function$
type nonrec cp = (unit -> int, [ `Has_arity1 ]) function$
type nonrec cuu =
  (unit -> (unit -> int, [ `Has_arity1 ]) function$, [ `Has_arity1 ])
    function$
type nonrec cpu =
  (unit -> (unit -> int, [ `Has_arity1 ]) function$, [ `Has_arity1 ])
    function$
type nonrec cup =
  (unit -> (unit -> int, [ `Has_arity1 ]) function$, [ `Has_arity1 ])
    function$
type nonrec cpp =
  (unit -> (unit -> int, [ `Has_arity1 ]) function$, [ `Has_arity1 ])
    function$
type nonrec cu2 = (unit -> unit -> unit, [ `Has_arity2 ]) function$
type nonrec cp2 = (unit -> unit -> unit, [ `Has_arity2 ]) function$
type nonrec uu = (unit -> int, [ `Has_arity1 ]) function$
type nonrec up = (unit -> int, [ `Has_arity1 ]) function$
type nonrec uuu =
  (unit -> (unit -> int, [ `Has_arity1 ]) function$, [ `Has_arity1 ])
    function$
type nonrec upu =
  (unit -> (unit -> int, [ `Has_arity1 ]) function$, [ `Has_arity1 ])
    function$
type nonrec uup =
  (unit -> (unit -> int, [ `Has_arity1 ]) function$, [ `Has_arity1 ])
    function$
type nonrec upp =
  (unit -> (unit -> int, [ `Has_arity1 ]) function$, [ `Has_arity1 ])
    function$
type nonrec uu2 = (unit -> unit -> unit, [ `Has_arity2 ]) function$
type nonrec up2 = (unit -> unit -> unit, [ `Has_arity2 ]) function$
type nonrec cnested =
  ((string -> unit, [ `Has_arity1 ]) function$ -> unit, [ `Has_arity1 ])
    function$
type nonrec unested =
  ((string -> unit, [ `Has_arity1 ]) function$ -> unit, [ `Has_arity1 ])
    function$
let pipe1 = 3 |.u f
let (uannpoly : ('a -> string, [ `Has_arity1 ]) function$) = xx
let (uannint : (int -> string, [ `Has_arity1 ]) function$) = xx
let _ = Function$ ((fun [arity:1]x -> 34)[@att ])
let _ = Function$ ((fun [arity:1]x -> 34)[@res.async ][@att ])
let _ = preserveAttr (Function$ ((fun [arity:1]x -> 34)[@att ]))
let _ = preserveAttr (Function$ ((fun [arity:1]x -> 34)[@res.async ][@att ]))
let t0 (type a) (type b) =
  Function$ (fun [arity:2](l : a list) -> fun (x : a) -> x :: l)
let t1 (type a) (type b) =
  Function$ (fun [arity:2](l : a list) -> fun (x : a) -> x :: l)
let t2 (type a) (type b) =
  Function$ (fun [arity:2](l : a list) -> fun (x : a) -> x :: l)
let t3 (type a) (type b) =
  Function$ (fun [arity:2](l : a list) -> fun (x : a) -> x :: l)
type nonrec arrowPath1 = (int -> string, [ `Has_arity1 ]) function$
type nonrec arrowPath2 = (I.t -> string, [ `Has_arity1 ]) function$
type nonrec arrowPath3 = (int -> string, [ `Has_arity1 ]) function$
type nonrec arrowPath4 = (I.t -> string, [ `Has_arity1 ]) function$
type nonrec callback1 =
  (ReactEvent.Mouse.t -> unit, [ `Has_arity1 ]) function$ as 'callback
type nonrec callback2 =
  (ReactEvent.Mouse.t -> unit as 'u, [ `Has_arity1 ]) function$
type nonrec callback3 =
  (ReactEvent.Mouse.t -> unit, [ `Has_arity1 ]) function$ as 'callback