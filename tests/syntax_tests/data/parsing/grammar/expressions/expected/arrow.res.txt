let f = Function$ (fun [arity:1]x -> x + 1)
let f = Function$ (fun [arity:1]_ -> Js.log {js|test|js})
let f = Function$ (fun [arity:1]() -> Js.log {js|unit|js})
let f = Function$ (fun [arity:1](Reducer (inst, comp)) -> inst.render comp)
let f = Function$ (fun [arity:1](Instance) -> ())
let f = Function$ (fun [arity:2]a -> fun [arity:1]b -> a + b)
let f = Function$ (fun [arity:2]1 -> fun [arity:1]2 -> ())
let f = Function$ (fun [arity:1]{js|stringPattern|js} -> ())
let f =
  Function$
    (fun [arity:2]{js|stringPattern|js} ->
       fun [arity:1]{js|stringPattern|js} -> ())
let f = Function$ (fun [arity:1]() -> ())
let f = Function$ (fun [arity:2](a : int) -> fun [arity:1](b : int) -> a + b)
let f = Function$ (fun [arity:2]_ -> fun [arity:1]_ -> ())
let f =
  Function$
    (fun [arity:2][|a;b|] -> fun [arity:1][|c;d|] -> ((a + b) + c) + d)
let f = Function$ (fun [arity:1]{ a } -> a + 1)
let f =
  Function$
    (fun [arity:2]{ a; b } -> fun [arity:1]{ c; d } -> ((a + b) + c) + d)
let f = Function$ (fun [arity:1](a, b) -> a + b)
let f =
  Function$ (fun [arity:2](a, b) -> fun [arity:1](c, d) -> ((a + b) + c) + d)
let f = Function$ (fun [arity:1]exception Terminate -> ())
let f =
  Function$
    (fun [arity:2]exception Terminate -> fun [arity:1]exception Exit -> ())
let f = Function$ (fun [arity:1][] -> ())
let f = Function$ (fun [arity:1](x::xs) -> x + (xs |.u Belt.List.length))
let f = Function$ (fun [arity:2](x : int) -> fun [arity:1](y : int) -> x + y)
let f =
  Function$
    (fun [arity:2]~a:((a)[@res.namedArgLoc ]) ->
       fun [arity:1]~b:((b)[@res.namedArgLoc ]) -> a + b)
let f =
  Function$
    (fun [arity:2]~a:((x)[@res.namedArgLoc ]) ->
       fun [arity:1]~b:((y)[@res.namedArgLoc ]) -> x + y)
let f =
  Function$
    (fun [arity:2]~a:(((x : int))[@res.namedArgLoc ]) ->
       fun [arity:1]~b:(((y : int))[@res.namedArgLoc ]) -> x + y)
let f =
  Function$
    (fun [arity:3]?a:(((a)[@res.namedArgLoc ])= 1) ->
       fun [arity:2]?b:(((b)[@res.namedArgLoc ])= 2) ->
         fun [arity:1]c -> (a + b) + c)
let f =
  Function$
    (fun [arity:3]?a:(((x)[@res.namedArgLoc ])= 1) ->
       fun [arity:2]?b:(((y)[@res.namedArgLoc ])= 2) ->
         fun [arity:1]c -> (x + y) + c)
let f =
  Function$
    (fun [arity:3]?a:((((x : int))[@res.namedArgLoc ])= 1) ->
       fun [arity:2]?b:((((y : int))[@res.namedArgLoc ])= 2) ->
         fun [arity:1]c -> (x + y) + c)
let f =
  Function$
    (fun [arity:3]?a:((a)[@res.namedArgLoc ]) ->
       fun [arity:2]?b:((b)[@res.namedArgLoc ]) ->
         fun [arity:1]c ->
           match (a, b) with | (Some a, Some b) -> (a + b) + c | _ -> 3)
let f =
  Function$
    (fun [arity:3]?a:((x)[@res.namedArgLoc ]) ->
       fun [arity:2]?b:((y)[@res.namedArgLoc ]) ->
         fun [arity:1]c ->
           match (x, y) with | (Some a, Some b) -> (a + b) + c | _ -> 3)
let f =
  Function$
    (fun [arity:3]?a:(((x : int option))[@res.namedArgLoc ]) ->
       fun [arity:2]?b:(((y : int option))[@res.namedArgLoc ]) ->
         fun [arity:1]c ->
           match (x, y) with | (Some a, Some b) -> (a + b) + c | _ -> 3)
let f = Function$ (fun [arity:2]a -> fun [arity:1]b -> a + b)
let f = Function$ (fun [arity:1]() -> ())
let f = Function$ (fun [arity:1]() -> ())
let f = Function$ (fun [arity:3]a -> fun [arity:2]b -> fun [arity:1]c -> ())
let f =
  Function$
    (fun [arity:4]a ->
       fun [arity:3]b -> fun [arity:2]c -> fun [arity:1]d -> ())
let f = Function$ (fun [arity:3]a -> fun [arity:2]b -> fun [arity:1]c -> ())
let f =
  Function$
    (fun [arity:4]~a:((a)[@res.namedArgLoc ][@attr ]) ->
       fun [arity:3]b ->
         fun [arity:2]~c:((c)[@res.namedArgLoc ][@attr ]) ->
           fun [arity:1]d -> ())
let f =
  Function$
    (fun [arity:4]~a:((a)[@res.namedArgLoc ][@attr ]) ->
       fun [arity:3]((b)[@attrOnB ]) ->
         fun [arity:2]~c:((c)[@res.namedArgLoc ][@attr ]) ->
           fun [arity:1]((d)[@attrOnD ]) -> ())
let f = Function$ (fun [arity:1]list -> list ())
;;match colour with
  | Red when
      (l = l') ||
        (Clflags.classic.contents &&
           ((l = Nolabel) && (not (is_optional l'))))
      -> (t1, t2)
  | _ -> ()
let arr =
  [|(Function$ ((fun [arity:1]_ -> doThings ())));(Function$
                                                     ((fun [arity:1]_ ->
                                                         doThings ())));(
    Function$ ((fun [arity:1]_ -> doThings ())))|]
let list =
  [Function$ ((fun [arity:1]_ -> doThings ()));
  Function$ ((fun [arity:1]_ -> doThings ()));
  Function$ ((fun [arity:1]_ -> doThings ()))]
let tuple =
  ((Function$ (fun [arity:1]_ -> doThings ())),
    (Function$ (fun [arity:1]_ -> doThings ())),
    (Function$ (fun [arity:1]_ -> doThings ())))
;;Function$ (fun [arity:1]_ -> doThings ())
let x =
  Constructore
    ((Function$ (fun [arity:1]_ -> copyChecklistItemCB ())),
      (Function$ (fun [arity:1]_ -> copyChecklistItemCB ())))
let y =
  `Constructore
    ((Function$ (fun [arity:1]_ -> copyChecklistItemCB ())),
      (Function$ (fun [arity:1]_ -> copyChecklistItemCB ())))
let f = Function$ (fun [arity:1]list -> list + 1)
let foo = (() : unit)
type nonrec u = unit
let un = (() : u)
type nonrec ('a, 'b) d = ('a * 'b)
let c = Function$ (fun [arity:1]() -> ((1, 2) : ('a, 'b) d))
let fn = Function$ (fun [arity:1]f -> f)
type nonrec f = (int -> unit, [ `Has_arity1 ]) function$
let a = fn (Function$ (fun [arity:1]_ -> ()) : f)