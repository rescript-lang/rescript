let l =
  ([1; 2; 3] -> (fun [arity:1]__x -> List.map (fun [arity:1]i -> i + 1) __x))
    -> (fun [arity:1]__x -> List.filter (fun [arity:1]i -> i > 0) __x)
let l =
  (fun [arity:1]i -> i + 1) -> (fun [arity:1]__x -> List.map __x [1; 2; 3])
let x [arity:1]__x = List.length __x
let nested [arity:1]x [arity:1]__x = List.length __x
let incr [arity:1]~v  = v + 1
let l1 =
  ([1; 2; 3] -> (List.map (fun [arity:1]__x -> incr ~v:__x))) -> List.length
let l2 =
  ([1; 2; 3] -> (List.map (fun [arity:1]__x -> incr ~v:__x))) -> List.length
let optParam [arity:2]?v  () = ((if v == None then 0 else 1)[@res.ternary ])
let l1 =
  ([Some 1; None; Some 2] ->
     (List.map (fun [arity:1]__x -> optParam ?v:__x ())))
    -> List.length
let l2 =
  ([Some 1; None; Some 2] ->
     (List.map (fun [arity:1]__x -> optParam ?v:__x ())))
    -> List.length
;;fun [arity:1]__x ->
    underscoreWithComments (fun [arity:1]x -> ((something ())[@res.braces ]))
      __x