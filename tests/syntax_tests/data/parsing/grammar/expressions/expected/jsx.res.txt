let _ = <div></div>
let _ = <div></div>
let _ = <div className={js|menu|js}></div>
let _ = <div className={js|menu|js}></div>
let _ = <div className={js|menu|js}></div>
let _ = <div className={js|menu|js}></div>
let _ =
  <div className={js|menu|js} onClick=((fun [arity:1]_ ->
                                          Js.log {js|click|js})
  [@res.braces ])></div>
let _ =
  <div className={js|menu|js} onClick=((fun [arity:1]_ ->
                                          Js.log {js|click|js})
  [@res.braces ])></div>
let _ = <Navbar />
let _ = <Navbar></Navbar>
let _ = <Navbar></Navbar>
let _ = <Navbar className={js|menu|js}></Navbar>
let _ = <Dot.Up />
let _ = <Dot.Up></Dot.Up>
let _ = <Dot.Up></Dot.Up>
let _ = <Dot.Up><Dot.low /></Dot.Up>
let _ = <Dot.Up><Dot.Up /></Dot.Up>
let _ = <Dot.Up className={js|menu|js}></Dot.Up>
let _ = <Dot.low />
let _ = <Dot.low></Dot.low>
let _ = <Dot.low></Dot.low>
let _ = <Dot.low><Dot.Up /></Dot.low>
let _ = <Dot.low><Dot.low /></Dot.low>
let _ = <Dot.low className={js|menu|js}></Dot.low>
let _ = <el punned></el>
let _ = <el ?punned></el>
let _ = <el punned />
let _ = <el ?punned />
let _ = <el a=?b></el>
let _ = <el a=?b />
let _ = <></>
let _ = <></>
let _ = <div className={js|menu|js}><div className={js|submenu|js}>sub1</div>
  <div className={js|submenu|js}>sub2</div></div>
let _ = <div className={js|menu|js}><div className={js|submenu|js}>sub1</div>
  <div className={js|submenu|js}>sub2</div></div>
let _ = <div>child</div>
let _ = <Foo>(fun [arity:1]a -> 1)</Foo>
let _ = <Foo><Foo2 /></Foo>
let _ = <Foo>[|a|]</Foo>
let _ = <Foo>(1, 2)</Foo>
let _ = <Foo>(1, 2)</Foo>
let _ = <div>ident [|1;2;3|] ((call a b)[@res.braces ]) ((x.y).z)</div>
let _ = <Outer inner=<Inner /> />
let _ = <div onClick=onClickHandler><>{js|foobar|js}</></div>
let _ =
  <Window style={
                  width = 10;
                  height = 10;
                  paddingTop = 10;
                  paddingLeft = 10;
                  paddingRight = 10;
                  paddingBottom = 10
                } />
let _ = <OverEager fiber=Metal.fiber />
let arrayOfListOfJsx = [|<></>|]
let arrayOfListOfJsx = [|<><Foo></Foo></>|]
let arrayOfListOfJsx = [|<><Foo /></>;<><Bar /></>|]
let sameButWithSpaces = [|<></>|]
let sameButWithSpaces = [|<><Foo /></>|]
let sameButWithSpaces = [|<><Foo /></>;<><Bar /></>|]
let sameButWithSpaces = [|<><Foo /></>;<><Bar /></>|]
let arrayOfJsx = [||]
let arrayOfJsx = [|<Foo></Foo>|]
let arrayOfJsx = [|<Foo />;<Bar />|]
let sameButWithSpaces = [||]
let sameButWithSpaces = [|<Foo />|]
let sameButWithSpaces = [|<Foo />;<Bar />|]
let _ = <a /> < <b />
let _ = <a /> > <b />
let _ = <a></a> < <b></b>
let _ = <a></a> > <b></b>
let y =
  <Routes path=(Routes.stateToPath state) isHistorical=true onHashChange=((
  fun [arity:3]_oldPath ->
    fun _oldUrl ->
      fun newUrl ->
        updater
          (fun [arity:2]latestComponentBag ->
             fun _ ->
               ((let currentActualPath = Routes.hashOfUri newUrl in
                 let pathFromState =
                   Routes.stateToPath latestComponentBag.state in
                 ((if currentActualPath == pathFromState
                   then None
                   else
                     dispatchEventless (State.UriNavigated currentActualPath)
                       latestComponentBag ())
                   [@res.ternary ]))
               [@res.braces ])) ())
  [@res.braces ]) />
let z =
  <div style=(ReactDOMRe.Style.make ~width ~height ~color ~backgroundColor
                ~margin ~padding ~border ~borderColor ~someOtherAttribute ()) key=(
  string_of_int 1) />
let omega =
  <div aList=[width;
             height;
             color;
             backgroundColor;
             margin;
             padding;
             border;
             borderColor;
             someOtherAttribute] key=(string_of_int 1) />
let someArray =
  <div anArray=[|width;height;color;backgroundColor;margin;padding;border;borderColor;someOtherAttribute|] key=(
  string_of_int 1) />
let tuples =
  <div aTuple=(width, height, color, backgroundColor, margin, padding,
                border, borderColor, someOtherAttribute, definitelyBreakere) key=(
  string_of_int 1) />
let icon =
  <Icon name=((match state.volume with
               | v when v < 0.1 -> {js|sound-off|js}
               | v when v < 0.11 -> {js|sound-min|js}
               | v when v < 0.51 -> {js|sound-med|js}
               | _ -> {js|sound-max|js})
  [@res.braces ]) />
let _ =
  <MessengerSharedPhotosAlbumViewPhotoReact ref=?((if foo#bar === baz
                                                   then
                                                     Some
                                                       (foooooooooooooooooooooooo
                                                          setRefChild)
                                                   else None)
  [@res.ternary ]) key=(node#legacy_attachment_id) />
let _ = <Foo bar />
let _ = <Foo bar=?bar />
let _ = <Foo bar=?Baz.bar />
let x = <div />
let _ = <div asd=1></div>
;;foo#bar #= <bar />
;;foo #= <bar />
;;foo #= <bar />
let x = [|<div />|]
let z = <div />
let z =
  (<Button onClick=handleStaleClick />, <Button onClick=handleStaleClick />)
let y = [|<div />;<div />|]
let y =
  [|<Button onClick=handleStaleClick />;<Button onClick=handleStaleClick />|]
let _ = <Description term=((<Text text={js|Age|js} />)
  [@res.braces ])>child</Description>
let _ =
  <Description term=((Text.createElement ~text:{js|Age|js} ~children:[||] ())
  [@res.braces ])>child</Description>
let _ = <Description term=((Text.createElement ~text:{js|Age|js} ())
  [@res.braces ][@JSX ])>child</Description>
let _ =
  <Description term=((<Text superLongPunnedProp anotherSuperLongOneCrazyLongThingHere text={js|Age|js} />)
  [@res.braces ])>child</Description>
let _ =
  <Foo bar=((<Baz superLongPunnedProp anotherSuperLongOneCrazyLongThingHere />)
  [@res.braces ]) />
let _ = <div><span>(str {js|hello|js})</span></div>
let _ = <description term=((<text text={js|Age|js} />)
  [@res.braces ])>child</description>
let _ = <description term=((text ~text:{js|Age|js} ~children:[||] ())
  [@res.braces ])>child</description>
let _ = <description term=((text ~text:{js|Age|js} ~children:[||])
  [@res.braces ][@JSX ])>child</description>
let _ = <description term=((text ~text:{js|Age|js} ())
  [@res.braces ][@JSX ])>child</description>
let _ =
  <description term=((<div superLongPunnedProp anotherSuperLongOneCrazyLongThingHere text={js|Age|js} />)
  [@res.braces ])>child</description>
let _ = <div onClick=((fun [arity:1]event -> handleChange event)
  [@res.braces ]) />
let _ =
  <div onClick=((fun [arity:1]eventWithLongIdent ->
                   handleChange eventWithLongIdent)
  [@res.braces ]) />
let _ =
  <div onClick=((fun [arity:1]event -> ((Js.log event; handleChange event)
                   [@res.braces ]))
  [@res.braces ]) />
let _ =
  <StaticDiv onClick=((fun [arity:5]foo ->
                         fun bar ->
                           fun baz ->
                             fun lineBreak ->
                               fun identifier ->
                                 ((doStuff foo bar baz;
                                   bar lineBreak identifier)
                                 [@res.braces ]))
  [@res.braces ]) />
let _ = <AttrDiv onClick=((fun [arity:1]event -> handleChange event)
  [@res.braces ][@bar ]) />
let _ =
  <AttrDiv onClick=((fun [arity:1]eventLongIdentifier ->
                       handleChange eventLongIdentifier)
  [@res.braces ][@bar ]) />
let _ =
  <StaticDivNamed onClick=((fun [arity:6]~foo ->
                              fun ~bar ->
                                fun ~baz ->
                                  fun ~lineBreak ->
                                    fun ~identifier ->
                                      fun () -> bar lineBreak identifier)
  [@res.braces ]) />
let _ =
  <div onClick=((fun [arity:1]e -> (((doStuff (); bar foo)
                   [@res.braces ]) : event))
  [@res.braces ]) />
let _ =
  <div onClick=((fun [arity:2]e ->
                   fun e2 -> (((doStuff (); bar foo)[@res.braces ]) : event))
  [@res.braces ]) />
let _ =
  <div onClick=((fun [arity:5]foo ->
                   fun bar ->
                     fun baz ->
                       fun superLongIdent ->
                         fun breakLine -> (((doStuff (); bar foo)
                           [@res.braces ]) : (event * event2 * event3 *
                                               event4 * event5)))
  [@res.braces ]) />
let _ =
  <div onClick=((fun [arity:5]foo ->
                   fun bar ->
                     fun baz ->
                       fun superLongIdent ->
                         fun breakLine ->
                           (doStuff () : (event * event2 * event3 * event4 *
                                           event5)))
  [@res.braces ]) />
let _ =
  <div>((match color with
         | Black -> ReasonReact.string {js|black|js}
         | Red -> ReasonReact.string {js|red|js})
  [@res.braces ])</div>
let _ =
  <div style=((ReactDOMRe.Style.make ~width:{js|20px|js} ~height:{js|20px|js}
                 ~borderRadius:{js|100%|js} ~backgroundColor:{js|red|js})
  [@res.braces ][@foo ]) />
let _ =
  <Animated initialValue=0.0 value>((ReactDOMRe.Style.make
                                       ~width:{js|20px|js}
                                       ~height:{js|20px|js}
                                       ~borderRadius:{js|100%|js}
                                       ~backgroundColor:{js|red|js})
  [@res.braces ])</Animated>
let _ =
  <Animated initialValue=0.0 value>((fun [arity:1]value ->
                                       <div style=((ReactDOMRe.Style.make
                                                      ~width:{js|20px|js}
                                                      ~height:{js|20px|js}
                                                      ~borderRadius:{js|100%|js}
                                                      ~backgroundColor:{js|red|js})
                                       [@res.braces ]) />)
  [@res.braces ])</Animated>
let _ =
  <Animated initialValue=0.0 value>((fun [arity:1]value ->
                                       (<div style=((ReactDOMRe.Style.make
                                                       ~width:{js|20px|js}
                                                       ~height:{js|20px|js}
                                                       ~borderRadius:{js|100%|js}
                                                       ~backgroundColor:{js|red|js})
                                       [@res.braces ]) /> : ReasonReact.element))
  [@res.braces ])</Animated>
let _ =
  <Animated initialValue=0.0 value>((fun [arity:1]value ->
                                       ((<div style=((ReactDOMRe.Style.make
                                                        ~width:{js|20px|js}
                                                        ~height:{js|20px|js}
                                                        ~borderRadius:{js|100%|js}
                                                        ~backgroundColor:{js|red|js})
                                       [@res.braces ]) />)[@res.braces ]))
  [@res.braces ][@foo ])</Animated>
let _ =
  <Animated initialValue=0.0 value>((fun [arity:1]value ->
                                       ((let width = {js|20px|js} in
                                         let height = {js|20px|js} in
                                         <div style=((ReactDOMRe.Style.make
                                                        ~width ~height
                                                        ~borderRadius:{js|100%|js}
                                                        ~backgroundColor:{js|red|js})
                                           [@res.braces ]) />)
                                       [@res.braces ]))
  [@res.braces ])</Animated>
let _ = <div callback=((reduce (fun [arity:1]() -> not state))
  [@res.braces ]) />
let _ =
  <button ?id className=((Cn.make [|{js|button|js};{js|is-fullwidth|js}|])
  [@res.braces ]) onClick>(({js|Submit|js} -> ste)[@res.braces ])</button>
let _ =
  <button ?id className=((Cn.make [{js|button|js}; {js|is-fullwidth|js}])
  [@res.braces ]) onClick>(({js|Submit|js} -> ste)[@res.braces ])</button>
let _ =
  <button ?id className=((Cn.make ({js|button|js}, {js|is-fullwidth|js}))
  [@res.braces ]) onClick>(({js|Submit|js} -> ste)[@res.braces ])</button>
let _ = <button ?id className=((Cn.make { a = b })
  [@res.braces ]) onClick>(({js|Submit|js} -> ste)[@res.braces ])</button>
let _ = <X y=((z -> (Belt.Option.getWithDefault {js||js}))[@res.braces ]) />
let _ = <div style=((getStyle ())
  [@res.braces ])>((ReasonReact.string {js|BugTest|js})[@res.braces ])</div>
let _ =
  <div>((let left = limit -> Int.toString in
         (((((({js||js})[@res.template ]) ++ left)[@res.template ]) ++
             (({js| characters left|js})[@res.template ]))
           [@res.template ]) -> React.string)
  [@res.braces ])</div>
let _ =
  <View style=(styles#backgroundImageWrapper)>((let uri =
                                                  {js|/images/header-background.png|js} in
                                                <Image resizeMode=Contain style=(
                                                  styles#backgroundImage) uri />)
  [@res.braces ])</View>
;;<div>(((((possibleGradeValues ->
              (List.filter (fun [arity:1]g -> g <= state.maxGrade)))
             ->
             (List.map
                (fun [arity:1]possibleGradeValue ->
                   <option key=((possibleGradeValue -> string_of_int)
                   [@res.braces ]) value=((possibleGradeValue ->
                                             string_of_int)
                   [@res.braces ])>(((possibleGradeValue -> string_of_int) ->
                                       str)
                   [@res.braces ])</option>)))
            -> Array.of_list)
           -> ReasonReact.array)[@res.braces ])</div>
;;<div>((Js.log (a <= 10))[@res.braces ])</div>
;;<div><div>((Js.log (a <= 10))[@res.braces ])</div></div>
;;<div><div onClick=((fun [arity:1]_ -> Js.log (a <= 10))
  [@res.braces ])><div>((Js.log (a <= 10))[@res.braces ])</div></div></div>
;;<div>element</div>
;;<div>((fun [arity:1]a -> 1)[@res.braces ])</div>
;;<div><span /></div>
;;<div>[|a|]</div>
;;<div>(1, 2)</div>
;;<div>((array -> f)[@res.braces ])</div>
;;<>element</>
;;<>((fun [arity:1]a -> 1)[@res.braces ])</>
;;<><span /></>
;;<>[|a|]</>
;;<>(1, 2)</>
;;<>((array -> f)[@res.braces ])</>
let _ = <A x={js|y|js} {...str} />
let _ = <p-x-y></p-x-y>
let _ = <V.x-y></V.x-y>
let _ = <a-b-c />
let _ = <V.x-y-z></V.x-y-z>