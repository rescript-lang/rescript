let greetUser =
  ((fun [arity:1]userId ->
      ((let name = ((getUserName userId)[@res.await ]) in
        ({js|Hello |js} ^ name) ^ {js|!|js})
      [@res.braces ]))
  [@res.async ])
;;((fun [arity:1]() -> 123)[@res.async ])
let fetch = ((fun [arity:1]url -> browserFetch url)
  [@res.braces ][@res.async ])
let fetch2 =
  (((((fun [arity:1]url -> browserFetch url))
    [@res.async ]);
    (((fun [arity:1]url -> browserFetch2 url))
    [@res.async ]))
  [@res.braces ])
let async =
  ((let f = async () in
    () |.u async;
    async ();
    async.async;
    { async = (async.(async)) };
    (result |.u async) |.u (mapAsync (fun [arity:1]a -> doStuff a)))
  [@res.braces ])
let f =
  ((if isPositive
    then ((fun [arity:2]a -> fun b -> (a + b : int))[@res.async ])
    else (((fun [arity:2]c -> fun d -> (c - d : int)))[@res.async ]))
  [@res.ternary ])
let foo = async ~a:((34)[@res.namedArgLoc ])
let bar = ((fun [arity:1]~a:((a)[@res.namedArgLoc ]) -> a + 1)[@res.async ])
let ex1 = ((3)[@res.await ]) + ((4)[@res.await ])
let ex2 = ((3)[@res.await ]) ** ((4)[@res.await ])
let ex3 = ((foo |.u (bar ~arg:((arg)[@res.namedArgLoc ])))[@res.await ])
let ex4 = (((foo.bar).baz)[@res.await ])