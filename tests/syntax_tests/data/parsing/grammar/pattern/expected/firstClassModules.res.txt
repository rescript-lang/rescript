let sort (type s) = Function$ (fun [arity:2](module Set)  -> fun l -> ())
let sort (type s) =
  Function$
    (fun [arity:2]((module Set)  : (module Set.S with type elt = s)) ->
       fun l -> ())
let sort (type s) =
  Function$
    (fun
       [arity:2]((module Set)  :
                  (module Set.S with type elt = s and type elt2 = t))
       -> fun l -> ())
let foo = Function$ (fun [arity:2](module Foo)  -> fun baz -> Foo.bar baz)
let bump_list (type a) =
  Function$
    (fun [arity:2]((module B)  : (module Bumpable with type t = a)) ->
       fun (l : a list) -> List.map ~f:((B.bump l)[@res.namedArgLoc ]))
;;match x with
  | (module Set)  -> ()
  | ((module Set)  : (module Set.S with type elt = s)) -> ()
  | ((module Set)  : (module Set.S with type elt = s and type elt2 = t)) ->
      ()