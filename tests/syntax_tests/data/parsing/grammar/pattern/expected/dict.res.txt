let someDict = Primitive_dict.make [|("one", {js|one|js})|]
let (({ one = ((one)[@res.optional ]);_})[@res.dictPattern ]) = someDict
let foo =
  ((Function$
      (fun () ->
         match someDict with
         | (({ one = {js|one|js};_})[@res.dictPattern ]) ->
             Js.log {js|one|js}
         | _ -> Js.log {js|not one|js}))
  [@res.arity 1])
type json =
  | Boolean of bool 
  | Null [@as null]
  | String of string 
  | Number of float 
  | Object of json dict 
  | Array of t array [@@unboxed ]
type nonrec user = {
  name: string ;
  age: float [@res.optional ]}
let decodeUser =
  ((Function$
      (fun (json : json) ->
         (((match json with
            | Object
                (({ name = String name; age = ageJson;_})[@res.dictPattern ])
                ->
                Some
                  {
                    name;
                    age =
                      (((match ageJson with
                         | Number age -> Some age
                         | _ -> None))[@res.optional ])
                  }
            | _ -> (Js.log {js|Not an object.|js}; None))
         [@res.braces ]) : user option)))
  [@res.arity 1])
;;Js.log
    (decodeUser
       (jsonParse (({js|{"name": "John", "age": 30}|js})[@res.template ])))