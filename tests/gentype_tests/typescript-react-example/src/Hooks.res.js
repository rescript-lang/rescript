// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as ImportHooks from "./ImportHooks.res.js";
import * as Primitive_option from "rescript/lib/es6/primitive_option.js";
import * as ImportHookDefault from "./ImportHookDefault.res.js";
import * as JsxRuntime from "react/jsx-runtime";

function Hooks(props) {
  let match = React.useState(() => 0);
  let setCount = match[1];
  let count = match[0];
  return JsxRuntime.jsxs("div", {
    children: [
      JsxRuntime.jsx("p", {
        children: "Hooks example " + (props.vehicle.name + (" clicked " + (String(count) + " times")))
      }),
      JsxRuntime.jsx("button", {
        children: "Click me",
        onClick: param => setCount(param => count + 1 | 0)
      }),
      JsxRuntime.jsxs(ImportHooks.make, {
        person: {
          name: "Mary",
          age: 71
        },
        children: [
          "child1",
          "child2"
        ],
        renderMe: x => x.randomString
      }),
      JsxRuntime.jsxs(ImportHookDefault.make, {
        person: {
          name: "DefaultImport",
          age: 42
        },
        children: [
          "child1",
          "child2"
        ],
        renderMe: x => x.randomString
      })
    ]
  });
}

function Hooks$Another$anotherComponent(props) {
  props.callback();
  return JsxRuntime.jsx("div", {
    children: "Another Hook " + props.vehicle.name
  });
}

let Another = {
  anotherComponent: Hooks$Another$anotherComponent
};

function Hooks$Inner(props) {
  return JsxRuntime.jsx("div", {
    children: "Another Hook " + props.vehicle.name
  });
}

function Hooks$Inner$Another$anotherComponent(props) {
  return JsxRuntime.jsx("div", {
    children: "Another Hook " + props.vehicle.name
  });
}

let Another$1 = {
  anotherComponent: Hooks$Inner$Another$anotherComponent
};

function Hooks$Inner$Inner2(props) {
  return JsxRuntime.jsx("div", {
    children: "Another Hook " + props.vehicle.name
  });
}

function Hooks$Inner$Inner2$Another$anotherComponent(props) {
  return JsxRuntime.jsx("div", {
    children: "Another Hook " + props.vehicle.name
  });
}

let Another$2 = {
  anotherComponent: Hooks$Inner$Inner2$Another$anotherComponent
};

let Inner2 = {
  make: Hooks$Inner$Inner2,
  Another: Another$2
};

let Inner = {
  make: Hooks$Inner,
  Another: Another$1,
  Inner2: Inner2
};

function Hooks$NoProps(props) {
  return JsxRuntime.jsx("div", {
    children: null
  });
}

let NoProps = {
  make: Hooks$NoProps
};

function functionWithRenamedArgs(_to, _Type, cb) {
  cb(_to);
  return _to.name + _Type.name;
}

function Hooks$WithRename$componentWithRenamedArgs(props) {
  let _to = props._to;
  props.cb(_to);
  return _to.name + props._Type.name;
}

let WithRename = {
  componentWithRenamedArgs: Hooks$WithRename$componentWithRenamedArgs
};

function makeWithRef(param) {
  let vehicle = param.vehicle;
  return ref => {
    if (ref == null) {
      return null;
    } else {
      return JsxRuntime.jsx("button", {
        children: vehicle.name,
        ref: Primitive_option.some(ref)
      });
    }
  };
}

let Hooks$WithRef$makeWithRef = makeWithRef;

let WithRef = {
  makeWithRef: Hooks$WithRef$makeWithRef
};

let testForwardRef = React.forwardRef((x, y) => makeWithRef(x)(y));

let input = React.forwardRef((r, ref) => JsxRuntime.jsx("div", {
  children: r.x,
  ref: Primitive_option.some(ref)
}));

let ForwardRef = {
  input: input
};

function Hooks$Poly$polymorphicComponent(props) {
  return props.p[0].name;
}

let Poly = {
  polymorphicComponent: Hooks$Poly$polymorphicComponent
};

function Hooks$Fun$functionReturningReactElement(props) {
  return props.name;
}

let Fun = {
  functionReturningReactElement: Hooks$Fun$functionReturningReactElement
};

function Hooks$RenderPropRequiresConversion(props) {
  return props.renderVehicle({
    vehicle: {
      name: "Car"
    },
    number: 42
  });
}

let RenderPropRequiresConversion = {
  make: Hooks$RenderPropRequiresConversion
};

function Hooks$WithChildren$aComponentWithChildren(props) {
  return JsxRuntime.jsxs("div", {
    children: [
      "Another Hook " + props.vehicle.name,
      JsxRuntime.jsx("div", {
        children: props.children
      })
    ]
  });
}

let WithChildren = {
  aComponentWithChildren: Hooks$WithChildren$aComponentWithChildren
};

function Hooks$DD(props) {
  return props.name;
}

let DD = {
  make: Hooks$DD
};

let make = Hooks;

let $$default = Hooks;

export {
  make,
  $$default as default,
  Another,
  Inner,
  NoProps,
  functionWithRenamedArgs,
  WithRename,
  WithRef,
  testForwardRef,
  ForwardRef,
  Poly,
  Fun,
  RenderPropRequiresConversion,
  WithChildren,
  DD,
}
/* testForwardRef Not a pure module */
