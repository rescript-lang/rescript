Complete src/CompletionTypeT.res 4:26
XXX Not found!
Completable: Cpattern Value[date]
Package opens Pervasives.JsxModules.place holder
ContextPath Value[date]
Path date
[{
    "label": "None",
    "kind": 12,
    "tags": [],
    "detail": "Stdlib.Date.t",
    "documentation": {"kind": "markdown", "value": "\nA type representing a JavaScript date.\n"}
  }, {
    "label": "Some(_)",
    "kind": 12,
    "tags": [],
    "detail": "Stdlib.Date.t",
    "documentation": {"kind": "markdown", "value": "\nA type representing a JavaScript date.\n"},
    "insertText": "Some(${1:_})",
    "insertTextFormat": 2
  }, {
    "label": "Some(date)",
    "kind": 4,
    "tags": [],
    "detail": "date",
    "documentation": null,
    "insertText": "Some(${0:date})",
    "insertTextFormat": 2
  }]

Complete src/CompletionTypeT.res 7:27
XXX Not found!
Completable: Cexpression Type[withDate]->recordField(date)
Package opens Pervasives.JsxModules.place holder
ContextPath Type[withDate]
Path withDate
[{
    "label": "Stdlib.Date.makeWithYMD()",
    "kind": 12,
    "tags": [],
    "detail": "(~year: int, ~month: int, ~date: int) => t",
    "documentation": null,
    "insertText": "Stdlib.Date.makeWithYMD($0)",
    "insertTextFormat": 2
  }, {
    "label": "Stdlib.Date.makeWithYMDHM()",
    "kind": 12,
    "tags": [],
    "detail": "(\n  ~year: int,\n  ~month: int,\n  ~date: int,\n  ~hours: int,\n  ~minutes: int,\n) => t",
    "documentation": null,
    "insertText": "Stdlib.Date.makeWithYMDHM($0)",
    "insertTextFormat": 2
  }, {
    "label": "Stdlib.Date.make()",
    "kind": 12,
    "tags": [],
    "detail": "unit => t",
    "documentation": null,
    "insertText": "Stdlib.Date.make($0)",
    "insertTextFormat": 2
  }, {
    "label": "Stdlib.Date.fromTime()",
    "kind": 12,
    "tags": [],
    "detail": "msSinceEpoch => t",
    "documentation": null,
    "insertText": "Stdlib.Date.fromTime($0)",
    "insertTextFormat": 2
  }, {
    "label": "Stdlib.Date.fromString()",
    "kind": 12,
    "tags": [],
    "detail": "string => t",
    "documentation": null,
    "insertText": "Stdlib.Date.fromString($0)",
    "insertTextFormat": 2
  }, {
    "label": "Stdlib.Date.makeWithYMDHMSM()",
    "kind": 12,
    "tags": [],
    "detail": "(\n  ~year: int,\n  ~month: int,\n  ~date: int,\n  ~hours: int,\n  ~minutes: int,\n  ~seconds: int,\n  ~milliseconds: int,\n) => t",
    "documentation": null,
    "insertText": "Stdlib.Date.makeWithYMDHMSM($0)",
    "insertTextFormat": 2
  }, {
    "label": "Stdlib.Date.makeWithYM()",
    "kind": 12,
    "tags": [],
    "detail": "(~year: int, ~month: int) => t",
    "documentation": null,
    "insertText": "Stdlib.Date.makeWithYM($0)",
    "insertTextFormat": 2
  }, {
    "label": "Stdlib.Date.makeWithYMDHMS()",
    "kind": 12,
    "tags": [],
    "detail": "(\n  ~year: int,\n  ~month: int,\n  ~date: int,\n  ~hours: int,\n  ~minutes: int,\n  ~seconds: int,\n) => t",
    "documentation": null,
    "insertText": "Stdlib.Date.makeWithYMDHMS($0)",
    "insertTextFormat": 2
  }, {
    "label": "Stdlib.Date.makeWithYMDH()",
    "kind": 12,
    "tags": [],
    "detail": "(~year: int, ~month: int, ~date: int, ~hours: int) => t",
    "documentation": null,
    "insertText": "Stdlib.Date.makeWithYMDH($0)",
    "insertTextFormat": 2
  }]

