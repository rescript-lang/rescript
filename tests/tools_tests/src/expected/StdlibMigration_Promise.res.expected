let p1 = Promise.resolve(1)
let p2 = Promise.reject(Failure("err"))

let all1 = Promise.all([Promise.resolve(1), Promise.resolve(2)])
let all2 = Promise.all2((Promise.resolve(1), Promise.resolve(2)))
let all3 = Promise.all3((Promise.resolve(1), Promise.resolve(2), Promise.resolve(3)))
let all4 = Promise.all4((
  Promise.resolve(1),
  Promise.resolve(2),
  Promise.resolve(3),
  Promise.resolve(4),
))
let all5 = Promise.all5((
  Promise.resolve(1),
  Promise.resolve(2),
  Promise.resolve(3),
  Promise.resolve(4),
  Promise.resolve(5),
))
let all6 = Promise.all6((
  Promise.resolve(1),
  Promise.resolve(2),
  Promise.resolve(3),
  Promise.resolve(4),
  Promise.resolve(5),
  Promise.resolve(6),
))

let race1 = Promise.race([Promise.resolve(10), Promise.resolve(20)])

let thenPipe = Promise.resolve(1)->Promise.then(x => Promise.resolve(x + 1), _)
let thenDirect = Promise.then(x => Promise.resolve(x + 1), Promise.resolve(1))

// Type alias migration
external p: promise<int> = "p"

// let catchPipe = Js.Promise.resolve(1)->Js.Promise.catch(_e => Js.Promise.resolve(0), _)
// let catchDirect = Js.Promise.catch(_e => Js.Promise.resolve(0), Js.Promise.resolve(1))
let make1 = Promise.make((resolve, reject) => resolve(1))

