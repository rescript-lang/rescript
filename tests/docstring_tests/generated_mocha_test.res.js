// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mocha from "mocha";
import * as Stdlib from "rescript/lib/es6/Stdlib.js";
import * as Belt_Id from "rescript/lib/es6/Belt_Id.js";
import * as Belt_Int from "rescript/lib/es6/Belt_Int.js";
import * as Belt_Map from "rescript/lib/es6/Belt_Map.js";
import * as Belt_Set from "rescript/lib/es6/Belt_Set.js";
import * as Belt_List from "rescript/lib/es6/Belt_List.js";
import * as Belt_Array from "rescript/lib/es6/Belt_Array.js";
import * as Belt_Float from "rescript/lib/es6/Belt_Float.js";
import * as Belt_Range from "rescript/lib/es6/Belt_Range.js";
import * as Pervasives from "rescript/lib/es6/Pervasives.js";
import * as Stdlib_Exn from "rescript/lib/es6/Stdlib_Exn.js";
import * as Stdlib_Int from "rescript/lib/es6/Stdlib_Int.js";
import * as Belt_MapInt from "rescript/lib/es6/Belt_MapInt.js";
import * as Belt_Option from "rescript/lib/es6/Belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/Belt_Result.js";
import * as Stdlib_Bool from "rescript/lib/es6/Stdlib_Bool.js";
import * as Stdlib_Char from "rescript/lib/es6/Stdlib_Char.js";
import * as Stdlib_Dict from "rescript/lib/es6/Stdlib_Dict.js";
import * as Stdlib_JSON from "rescript/lib/es6/Stdlib_JSON.js";
import * as Stdlib_List from "rescript/lib/es6/Stdlib_List.js";
import * as Stdlib_Math from "rescript/lib/es6/Stdlib_Math.js";
import * as Stdlib_Null from "rescript/lib/es6/Stdlib_Null.js";
import * as Stdlib_Type from "rescript/lib/es6/Stdlib_Type.js";
import * as Belt_HashMap from "rescript/lib/es6/Belt_HashMap.js";
import * as Belt_HashSet from "rescript/lib/es6/Belt_HashSet.js";
import * as Belt_MapDict from "rescript/lib/es6/Belt_MapDict.js";
import * as Belt_SetDict from "rescript/lib/es6/Belt_SetDict.js";
import * as Stdlib_Array from "rescript/lib/es6/Stdlib_Array.js";
import * as Stdlib_Error from "rescript/lib/es6/Stdlib_Error.js";
import * as Stdlib_Float from "rescript/lib/es6/Stdlib_Float.js";
import * as Primitive_int from "rescript/lib/es6/Primitive_int.js";
import * as Stdlib_Option from "rescript/lib/es6/Stdlib_Option.js";
import * as Stdlib_Result from "rescript/lib/es6/Stdlib_Result.js";
import * as Stdlib_String from "rescript/lib/es6/Stdlib_String.js";
import * as Belt_MapString from "rescript/lib/es6/Belt_MapString.js";
import * as Belt_SortArray from "rescript/lib/es6/Belt_SortArray.js";
import * as Stdlib_Promise from "rescript/lib/es6/Stdlib_Promise.js";
import * as Belt_MutableSet from "rescript/lib/es6/Belt_MutableSet.js";
import * as Stdlib_Iterator from "rescript/lib/es6/Stdlib_Iterator.js";
import * as Stdlib_Nullable from "rescript/lib/es6/Stdlib_Nullable.js";
import * as Primitive_object from "rescript/lib/es6/Primitive_object.js";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";
import * as Primitive_exceptions from "rescript/lib/es6/Primitive_exceptions.js";
import * as Stdlib_AsyncIterator from "rescript/lib/es6/Stdlib_AsyncIterator.js";

Mocha.describe("Belt", () => {
  Mocha.test("HashMap", () => {
    let I0 = Belt_Id.hashable(param => 65535, (a, b) => a === b);
    let s0 = Belt_HashMap.make(40, I0);
    let I1 = Belt_Id.hashable(param => 255, (a, b) => a === b);
    let s1 = Belt_HashMap.make(40, I1);
    Belt_HashMap.set(s0, 0, 3);
    Belt_HashMap.set(s1, 1, "3");
  });
  Mocha.test("HashSet", () => {
    let I0 = Belt_Id.hashable(a => a & 65535, (a, b) => a === b);
    Belt_HashSet.make(40, I0);
    let I1 = Belt_Id.hashable(a => a & 255, (a, b) => a === b);
    let s1 = Belt_HashSet.make(40, I1);
    Belt_HashSet.add(s1, 0);
    Belt_HashSet.add(s1, 1);
  });
  Mocha.test("MutableSet", () => {
    let cmp = (param, param$1) => {
      let c = Primitive_object.compare(param[0], param$1[0]);
      if (c !== 0) {
        return c;
      } else {
        return Primitive_object.compare(param[1], param$1[1]);
      }
    };
    let PairComparator = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let mySet = Belt_MutableSet.make(PairComparator);
    Belt_MutableSet.add(mySet, [
      1,
      2
    ]);
  });
  Mocha.test("Option", () => {});
  Mocha.test("Set", () => {
    let cmp = (param, param$1) => {
      let c = Primitive_object.compare(param[0], param$1[0]);
      if (c !== 0) {
        return c;
      } else {
        return Primitive_object.compare(param[1], param$1[1]);
      }
    };
    let PairComparator = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let mySet = Belt_Set.make(PairComparator);
    Belt_Set.add(mySet, [
      1,
      2
    ]);
    let cmp$1 = Primitive_object.compare;
    Belt_Id.MakeComparable({
      cmp: cmp$1
    });
  });
});

Mocha.describe("Belt.Array", () => {
  Mocha.test("blit", () => {
    let v1 = [
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17
    ];
    let v2 = [
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27
    ];
    Belt_Array.blit(v1, 4, v2, 2, 3);
    Primitive_object.equal(v2, [
      20,
      21,
      14,
      15,
      16,
      25,
      26,
      27
    ]);
    Belt_Array.blit(v1, 4, v1, 2, 3);
    Primitive_object.equal(v1, [
      10,
      11,
      14,
      15,
      16,
      15,
      16,
      17
    ]);
  });
  Mocha.test("cmp", () => {
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      4,
      2
    ], Primitive_int.compare) === -1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      2,
      3
    ], Primitive_int.compare) === 1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      3,
      5
    ], Primitive_int.compare) === 0;
  });
  Mocha.test("concat", () => {
    Primitive_object.equal(Belt_Array.concat([
      1,
      2,
      3
    ], [
      4,
      5
    ]), [
      1,
      2,
      3,
      4,
      5
    ]);
    Primitive_object.equal(Belt_Array.concat([], [
      "a",
      "b",
      "c"
    ]), [
      "a",
      "b",
      "c"
    ]);
  });
  Mocha.test("concatMany", () => {
    Primitive_object.equal(Belt_Array.concatMany([
      [
        1,
        2,
        3
      ],
      [
        4,
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8
    ]);
  });
  Mocha.test("eq", () => {
    Belt_Array.eq([
      1,
      2,
      3
    ], [
      -1,
      -2,
      -3
    ], (a, b) => Pervasives.abs(a) === Pervasives.abs(b)) === true;
  });
  Mocha.test("every", () => {
    Belt_Array.every([
      1,
      3,
      5
    ], x => x % 2 === 1) === true;
    Belt_Array.every([
      1,
      -3,
      5
    ], x => x > 0) === false;
  });
  Mocha.test("every2", () => {
    Belt_Array.every2([
      1,
      2,
      3
    ], [
      0,
      1
    ], (a, b) => a > b) === true;
    Belt_Array.every2([], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      2,
      3
    ], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      0,
      1
    ], [
      5,
      0
    ], (x, y) => x > y) === false;
  });
  Mocha.test("fill", () => {
    let arr = Belt_Array.makeBy(5, i => i);
    Belt_Array.fill(arr, 2, 2, 9);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
    Belt_Array.fill(arr, 7, 2, 8);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
  });
  Mocha.test("flatMap", () => {
    Primitive_object.equal(Belt_Array.flatMap([
      1,
      2
    ], x => [
      x + 10 | 0,
      x + 20 | 0
    ]), [
      11,
      21,
      12,
      22
    ]);
  });
  Mocha.test("forEach", () => {
    Belt_Array.forEach([
      "a",
      "b",
      "c"
    ], x => {
      console.log("Item: " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEach([
      1,
      2,
      3,
      4
    ], x => {
      total.contents = total.contents + x | 0;
    });
  });
  Mocha.test("forEachWithIndex", () => {
    Belt_Array.forEachWithIndex([
      "a",
      "b",
      "c"
    ], (i, x) => {
      console.log("Item " + String(i) + " is " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEachWithIndex([
      10,
      11,
      12,
      13
    ], (i, x) => {
      total.contents = (total.contents + x | 0) + i | 0;
    });
  });
  Mocha.test("get", () => {
    Primitive_object.equal(Belt_Array.get([
      "a",
      "b",
      "c"
    ], 0), "a");
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], 3) === undefined;
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], -1) === undefined;
  });
  Mocha.test("getBy", () => {
    Primitive_object.equal(Belt_Array.getBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 4);
    Belt_Array.getBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
  Mocha.test("getIndexBy", () => {
    Primitive_object.equal(Belt_Array.getIndexBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 1);
    Belt_Array.getIndexBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
  Mocha.test("joinWith", () => {
    Belt_Array.joinWith([
      0,
      1
    ], ", ", prim => prim.toString()) === "0, 1";
    Belt_Array.joinWith([], " ", prim => prim.toString()) === "";
    Belt_Array.joinWith([1], " ", prim => prim.toString()) === "1";
  });
  Mocha.test("keepMap", () => {
    Primitive_object.equal(Belt_Array.keepMap([
      1,
      2,
      3
    ], x => {
      if (x % 2 === 0) {
        return x;
      }
      
    }), [2]);
  });
  Mocha.test("keepWithIndex", () => {
    Primitive_object.equal(Belt_Array.keepWithIndex([
      1,
      2,
      3
    ], (_x, i) => i === 1), [2]);
  });
  Mocha.test("length", () => {});
  Mocha.test("makeBy", () => {
    Primitive_object.equal(Belt_Array.makeBy(5, i => i), [
      0,
      1,
      2,
      3,
      4
    ]);
    Primitive_object.equal(Belt_Array.makeBy(5, i => i * i | 0), [
      0,
      1,
      4,
      9,
      16
    ]);
  });
  Mocha.test("makeUninitialized", () => {
    let arr = new Array(5);
    Belt_Array.getExn(arr, 0) === undefined;
  });
  Mocha.test("makeUninitializedUnsafe", () => {
    let arr = new Array(5);
    console.log(Belt_Array.getExn(arr, 0));
    Belt_Array.setExn(arr, 0, "example");
    console.log(Belt_Array.getExn(arr, 0) === "example");
  });
  Mocha.test("map", () => {
    Primitive_object.equal(Belt_Array.map([
      1,
      2
    ], x => x + 1 | 0), [
      3,
      4
    ]);
  });
  Mocha.test("mapWithIndex", () => {
    Primitive_object.equal(Belt_Array.mapWithIndex([
      1,
      2,
      3
    ], (i, x) => i + x | 0), [
      1,
      3,
      5
    ]);
  });
  Mocha.test("partition", () => {
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 === 0), [
      [
        2,
        4
      ],
      [
        1,
        3,
        5
      ]
    ]);
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 !== 0), [
      [
        1,
        3,
        5
      ],
      [
        2,
        4
      ]
    ]);
  });
  Mocha.test("range", () => {
    Primitive_object.equal(Belt_Array.range(0, 3), [
      0,
      1,
      2,
      3
    ]);
    Primitive_object.equal(Belt_Array.range(3, 0), []);
    Primitive_object.equal(Belt_Array.range(3, 3), [3]);
  });
  Mocha.test("rangeBy", () => {
    Primitive_object.equal(Belt_Array.rangeBy(0, 10, 3), [
      0,
      3,
      6,
      9
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(0, 12, 3), [
      0,
      3,
      6,
      9,
      12
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, 1), []);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 12, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 0), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 1), [3]);
  });
  Mocha.test("reduce", () => {
    Belt_Array.reduce([
      2,
      3,
      4
    ], 1, (a, b) => a + b | 0) === 10;
    Belt_Array.reduce([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "abcd";
  });
  Mocha.test("reduceReverse", () => {
    Belt_Array.reduceReverse([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "dcba";
  });
  Mocha.test("reduceReverse2", () => {
    Belt_Array.reduceReverse2([
      1,
      2,
      3
    ], [
      1,
      2
    ], 0, (acc, x, y) => (acc + x | 0) + y | 0) === 6;
  });
  Mocha.test("reduceWithIndex", () => {
    Belt_Array.reduceWithIndex([
      1,
      2,
      3,
      4
    ], 0, (acc, x, i) => (acc + x | 0) + i | 0) === 16;
  });
  Mocha.test("reverse", () => {
    Primitive_object.equal(Belt_Array.reverse([
      10,
      11,
      12,
      13,
      14
    ]), [
      14,
      13,
      12,
      11,
      10
    ]);
  });
  Mocha.test("reverseInPlace", () => {
    let arr = [
      10,
      11,
      12,
      13,
      14
    ];
    Belt_Array.reverseInPlace(arr);
    Primitive_object.equal(arr, [
      14,
      13,
      12,
      11,
      10
    ]);
  });
  Mocha.test("slice", () => {
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2, 3), [
      12,
      13,
      14
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4, 3), [
      13,
      14,
      15
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 4, 9), [
      14,
      15,
      16
    ]);
  });
  Mocha.test("sliceToEnd", () => {
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2), [
      12,
      13,
      14,
      15,
      16
    ]);
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4), [
      13,
      14,
      15,
      16
    ]);
  });
  Mocha.test("some", () => {
    Belt_Array.some([
      2,
      3,
      4
    ], x => x % 2 === 1) === true;
    Belt_Array.some([
      -1,
      -3,
      -5
    ], x => x > 0) === false;
  });
  Mocha.test("some2", () => {
    Belt_Array.some2([
      0,
      2
    ], [
      1,
      0,
      3
    ], (a, b) => a > b) === true;
    Belt_Array.some2([], [1], (x, y) => x > y) === false;
    Belt_Array.some2([
      2,
      3
    ], [
      1,
      4
    ], (x, y) => x > y) === true;
  });
  Mocha.test("truncateToLengthUnsafe", () => {
    let arr = [
      "ant",
      "bee",
      "cat",
      "dog",
      "elk"
    ];
    arr.length = 3;
    Primitive_object.equal(arr, [
      "ant",
      "bee",
      "cat"
    ]);
  });
  Mocha.test("unzip", () => {
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ]
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ],
      [
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      [
        1,
        3,
        5,
        7
      ],
      [
        2,
        4,
        6,
        8
      ]
    ]);
  });
  Mocha.test("zip", () => {
    Primitive_object.equal(Belt_Array.zip([
      1,
      2
    ], [
      3,
      4,
      5
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
  });
  Mocha.test("zipBy", () => {
    Primitive_object.equal(Belt_Array.zipBy([
      1,
      2,
      3
    ], [
      4,
      5
    ], (a, b) => (a << 1) + b | 0), [
      6,
      9
    ]);
  });
});

Mocha.describe("Belt.Float", () => {
  Mocha.test("*", () => {
    Stdlib.assertEqual(2.0 * 2.0, 4.0);
  });
  Mocha.test("+", () => {
    Stdlib.assertEqual(2.0 + 2.0, 4.0);
  });
  Mocha.test("-", () => {
    Stdlib.assertEqual(2.0 - 1.0, 1.0);
  });
  Mocha.test("/", () => {
    Stdlib.assertEqual(4.0 / 2.0, 2.0);
  });
  Mocha.test("fromInt", () => {
    console.log(1 === 1.0);
  });
  Mocha.test("fromString", () => {
    console.log(Belt_Float.fromString("1.0") === 1.0);
  });
  Mocha.test("toInt", () => {
    console.log(true);
  });
  Mocha.test("toString", () => {
    console.log(String(1.0) === "1.0");
  });
});

Mocha.describe("Belt.HashMap", () => {
  Mocha.test("clear", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let hMap = Belt_HashMap.fromArray([[
        1,
        "1"
      ]], IntHash);
    Belt_HashMap.clear(hMap);
    Belt_HashMap.isEmpty(hMap) === true;
  });
  Mocha.test("copy", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntHash);
    let s1 = Belt_HashMap.copy(s0);
    Belt_HashMap.set(s0, 2, "3");
    Primitive_object.notequal(Belt_HashMap.get(s0, 2), Belt_HashMap.get(s1, 2));
  });
  Mocha.test("forEach", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.forEach(s0, (key, value) => {
      console.log(key, value);
    });
  });
  Mocha.test("fromArray", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.fromArray([
      [
        1,
        "value1"
      ],
      [
        2,
        "value2"
      ]
    ], IntHash);
    Primitive_object.equal(Belt_HashMap.toArray(s0), [
      [
        1,
        "value1"
      ],
      [
        2,
        "value2"
      ]
    ]);
  });
  Mocha.test("get", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Primitive_object.equal(Belt_HashMap.get(s0, 1), "value1");
    Belt_HashMap.get(s0, 2) === undefined;
  });
  Mocha.test("getBucketHistogram", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let hMap = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(hMap, 1, "1");
    Belt_HashMap.getBucketHistogram(hMap);
  });
  Mocha.test("has", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.has(s0, 1) === true;
    Belt_HashMap.has(s0, 2) === false;
  });
  Mocha.test("isEmpty", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    Belt_HashMap.isEmpty(Belt_HashMap.fromArray([[
        1,
        "1"
      ]], IntHash)) === false;
  });
  Mocha.test("keepMapInPlace", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Belt_HashMap.keepMapInPlace(s0, (key, value) => {
      if (key === 1) {
        return;
      } else {
        return value;
      }
    });
  });
  Mocha.test("keysToArray", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Primitive_object.equal(Belt_HashMap.keysToArray(s0), [
      1,
      2
    ]);
  });
  Mocha.test("logStats", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let hMap = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(hMap, 1, "1");
    Belt_HashMap.logStats(hMap);
  });
  Mocha.test("make", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let hMap = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(hMap, 0, "a");
  });
  Mocha.test("mergeMany", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let hMap = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.mergeMany(hMap, [
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ]
    ]);
  });
  Mocha.test("reduce", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Stdlib.assertEqual(Belt_HashMap.reduce(s0, "", (acc, param, value) => acc + (", " + value)), ", value1, value2");
    console.log("lol");
  });
  Mocha.test("remove", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.remove(s0, 1);
    Belt_HashMap.has(s0, 1) === false;
  });
  Mocha.test("set", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntHash);
    Belt_HashMap.set(s0, 2, "3");
    Primitive_object.equal(Belt_HashMap.valuesToArray(s0), [
      "1",
      "3",
      "3"
    ]);
  });
  Mocha.test("size", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Belt_HashMap.size(s0) === 2;
  });
  Mocha.test("toArray", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Primitive_object.equal(Belt_HashMap.toArray(s0), [
      [
        1,
        "value1"
      ],
      [
        2,
        "value2"
      ]
    ]);
  });
  Mocha.test("valuesToArray", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Primitive_object.equal(Belt_HashMap.valuesToArray(s0), [
      "value1",
      "value2"
    ]);
  });
});

Mocha.describe("Belt.Int", () => {
  Mocha.test("*", () => {
    Stdlib.assertEqual(4, 4);
  });
  Mocha.test("+", () => {
    Stdlib.assertEqual(4, 4);
  });
  Mocha.test("-", () => {
    Stdlib.assertEqual(1, 1);
  });
  Mocha.test("/", () => {
    Stdlib.assertEqual(2, 2);
  });
  Mocha.test("fromFloat", () => {
    Stdlib.assertEqual(1, 1);
  });
  Mocha.test("fromString", () => {
    Stdlib.assertEqual(Belt_Int.fromString("1"), 1);
  });
  Mocha.test("toFloat", () => {
    Stdlib.assertEqual(1, 1.0);
  });
  Mocha.test("toString", () => {
    Stdlib.assertEqual(String(1), "1");
  });
});

Mocha.describe("Belt.List", () => {
  Mocha.test("add", () => {
    Belt_List.add({
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, 1);
    Belt_List.add({
      hd: "World",
      tl: {
        hd: "!",
        tl: /* [] */0
      }
    }, "Hello");
  });
  Mocha.test("cmp", () => {
    Belt_List.cmp({
      hd: 3,
      tl: /* [] */0
    }, {
      hd: 3,
      tl: {
        hd: 7,
        tl: /* [] */0
      }
    }, Primitive_int.compare);
    Belt_List.cmp({
      hd: 5,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 5,
      tl: /* [] */0
    }, Primitive_int.compare);
    Belt_List.cmp({
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 4,
        tl: {
          hd: 2,
          tl: /* [] */0
        }
      }
    }, Primitive_int.compare);
    Belt_List.cmp({
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, Primitive_int.compare);
    Belt_List.cmp({
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, Primitive_int.compare);
  });
  Mocha.test("cmpByLength", () => {
    Belt_List.cmpByLength({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 5,
          tl: {
            hd: 6,
            tl: /* [] */0
          }
        }
      }
    });
    Belt_List.cmpByLength({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: {
          hd: 6,
          tl: /* [] */0
        }
      }
    });
    Belt_List.cmpByLength({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, {
      hd: 5,
      tl: {
        hd: 6,
        tl: /* [] */0
      }
    });
  });
  Mocha.test("concat", () => {
    Belt_List.concat({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    });
  });
  Mocha.test("concatMany", () => {
    Belt_List.concatMany([
      {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      },
      /* [] */0,
      {
        hd: 3,
        tl: /* [] */0
      }
    ]);
  });
  Mocha.test("drop", () => {
    Belt_List.drop({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 2);
    Belt_List.drop({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 3);
    Belt_List.drop({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 4);
  });
  Mocha.test("eq", () => {
    Belt_List.eq({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, (a, b) => a === b);
    Belt_List.eq({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, (a, b) => a === b);
    Belt_List.eq({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: -1,
      tl: {
        hd: -2,
        tl: {
          hd: -3,
          tl: /* [] */0
        }
      }
    }, (a, b) => Pervasives.abs(a) === Pervasives.abs(b));
  });
  Mocha.test("every", () => {
    let isBelow10 = value => value < 10;
    Belt_List.every({
      hd: 1,
      tl: {
        hd: 9,
        tl: {
          hd: 8,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, isBelow10);
    Belt_List.every({
      hd: 1,
      tl: {
        hd: 99,
        tl: {
          hd: 8,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, isBelow10);
  });
  Mocha.test("every2", () => {
    Belt_List.every2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
    Belt_List.every2(/* [] */0, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    Belt_List.every2({
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    Belt_List.every2({
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, {
      hd: 5,
      tl: {
        hd: 0,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
  });
  Mocha.test("filter", () => {
    let isEven = x => x % 2 === 0;
    Belt_List.filter({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, isEven);
    Belt_List.filter({
      hd: undefined,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: undefined,
            tl: /* [] */0
          }
        }
      }
    }, Belt_Option.isSome);
  });
  Mocha.test("filterWithIndex", () => {
    Belt_List.filterWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, (_x, index) => index % 2 === 0);
  });
  Mocha.test("flatten", () => {
    Belt_List.flatten({
      hd: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: /* [] */0,
        tl: {
          hd: {
            hd: 3,
            tl: /* [] */0
          },
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("forEach", () => {
    Belt_List.forEach({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: /* [] */0
        }
      }
    }, x => {
      console.log("Item: " + x);
    });
  });
  Mocha.test("forEach2", () => {
    Belt_List.forEach2({
      hd: "Z",
      tl: {
        hd: "Y",
        tl: /* [] */0
      }
    }, {
      hd: "A",
      tl: {
        hd: "B",
        tl: {
          hd: "C",
          tl: /* [] */0
        }
      }
    }, (x, y) => {
      console.log(x, y);
    });
  });
  Mocha.test("forEachWithIndex", () => {
    Belt_List.forEachWithIndex({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: /* [] */0
        }
      }
    }, (index, x) => {
      console.log("Item " + String(index) + " is " + x);
    });
  });
  Mocha.test("fromArray", () => {
    Belt_List.fromArray([
      1,
      2,
      3
    ]);
  });
  Mocha.test("get", () => {
    let abc = {
      hd: "A",
      tl: {
        hd: "B",
        tl: {
          hd: "C",
          tl: /* [] */0
        }
      }
    };
    Belt_List.get(abc, 1);
    Belt_List.get(abc, 4);
  });
  Mocha.test("getAssoc", () => {
    Belt_List.getAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 3, (a, b) => a === b);
    Belt_List.getAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          15,
          "afternoon"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 15, (k, item) => k === item);
  });
  Mocha.test("getBy", () => {
    Belt_List.getBy({
      hd: 1,
      tl: {
        hd: 4,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, x => x > 3);
    Belt_List.getBy({
      hd: 1,
      tl: {
        hd: 4,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, x => x > 4);
  });
  Mocha.test("getExn", () => {
    let abc = {
      hd: "A",
      tl: {
        hd: "B",
        tl: {
          hd: "C",
          tl: /* [] */0
        }
      }
    };
    Stdlib.assertEqual(Belt_List.getExn(abc, 1), "B");
    let exit = 0;
    let val;
    try {
      val = Belt_List.getExn(abc, 4);
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          1046,
          7
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("has", () => {
    Belt_List.has({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 2, (a, b) => a === b);
    Belt_List.has({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 4, (a, b) => a === b);
    Belt_List.has({
      hd: -1,
      tl: {
        hd: -2,
        tl: {
          hd: -3,
          tl: /* [] */0
        }
      }
    }, 2, (a, b) => Pervasives.abs(a) === Pervasives.abs(b));
  });
  Mocha.test("hasAssoc", () => {
    Belt_List.hasAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 1, (a, b) => a === b);
    Belt_List.hasAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          15,
          "afternoon"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 25, (k, item) => k === item);
  });
  Mocha.test("head", () => {
    Belt_List.head(/* [] */0);
    Belt_List.head({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("headExn", () => {
    Stdlib.assertEqual(Belt_List.headExn({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }), 1);
    let exit = 0;
    let val;
    try {
      val = Belt_List.headExn(/* [] */0);
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          1083,
          7
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("keep", () => {
    let isEven = x => x % 2 === 0;
    Belt_List.keep({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, isEven);
    Belt_List.keep({
      hd: undefined,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: undefined,
            tl: /* [] */0
          }
        }
      }
    }, Belt_Option.isSome);
  });
  Mocha.test("keepMap", () => {
    let isEven = x => x % 2 === 0;
    Belt_List.keepMap({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, x => {
      if (isEven(x)) {
        return x;
      }
      
    });
    Belt_List.keepMap({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: undefined,
          tl: /* [] */0
        }
      }
    }, x => x);
  });
  Mocha.test("keepWithIndex", () => {
    Belt_List.keepWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, (_x, index) => index % 2 === 0);
  });
  Mocha.test("length", () => {
    Belt_List.length({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("make", () => {
    Belt_List.make(3, 1);
  });
  Mocha.test("makeBy", () => {
    Belt_List.makeBy(5, i => i);
    Belt_List.makeBy(5, i => i * i | 0);
  });
  Mocha.test("map", () => {
    Belt_List.map({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, x => x + 1 | 0);
  });
  Mocha.test("mapReverse", () => {
    Stdlib.assertEqual(Belt_List.mapReverse({
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, x => x * x | 0), {
      hd: 25,
      tl: {
        hd: 16,
        tl: {
          hd: 9,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("mapReverse2", () => {
    Belt_List.mapReverse2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, (a, b) => a + b | 0);
  });
  Mocha.test("mapWithIndex", () => {
    Belt_List.mapWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, (index, x) => index + x | 0);
  });
  Mocha.test("partition", () => {
    Stdlib.assertEqual(Belt_List.partition({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, x => x > 2), [
      {
        hd: 3,
        tl: {
          hd: 4,
          tl: /* [] */0
        }
      },
      {
        hd: 1,
        tl: {
          hd: 2,
          tl: /* [] */0
        }
      }
    ]);
  });
  Mocha.test("reduce", () => {
    Belt_List.reduce({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (a, b) => a + b | 0);
    Belt_List.reduce({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (acc, item) => acc + item | 0);
  });
  Mocha.test("reduce2", () => {
    Belt_List.reduce2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }, 0, (acc, x, y) => (acc + (x * x | 0) | 0) + y | 0);
  });
  Mocha.test("reduceReverse", () => {
    Belt_List.reduceReverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (a, b) => a + b | 0);
    Belt_List.reduceReverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 10, (a, b) => a - b | 0);
    Belt_List.reduceReverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, /* [] */0, Belt_List.add);
  });
  Mocha.test("reduceReverse2", () => {
    Belt_List.reduceReverse2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }, 0, (acc, x, y) => (acc + (x * x | 0) | 0) + y | 0);
  });
  Mocha.test("reduceWithIndex", () => {
    Belt_List.reduceWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (acc, item, index) => (acc + item | 0) + index | 0);
  });
  Mocha.test("removeAssoc", () => {
    Belt_List.removeAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 1, (a, b) => a === b);
    Belt_List.removeAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          15,
          "afternoon"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 9, (k, item) => k === item);
  });
  Mocha.test("reverse", () => {
    Belt_List.reverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("reverseConcat", () => {
    Belt_List.reverseConcat({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 3,
      tl: {
        hd: 4,
        tl: /* [] */0
      }
    });
  });
  Mocha.test("setAssoc", () => {
    Belt_List.setAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 2, "x", (a, b) => a === b);
    Belt_List.setAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          3,
          "c"
        ],
        tl: /* [] */0
      }
    }, 2, "b", (a, b) => a === b);
    Belt_List.setAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          3,
          "morning?!"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 15, "afternoon", (a, b) => a % 12 === b % 12);
  });
  Mocha.test("shuffle", () => {
    Belt_List.shuffle({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("some", () => {
    let isAbove100 = value => value > 100;
    Belt_List.some({
      hd: 101,
      tl: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      }
    }, isAbove100);
    Belt_List.some({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, isAbove100);
  });
  Mocha.test("some2", () => {
    Belt_List.some2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
    Belt_List.some2(/* [] */0, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    Belt_List.some2({
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    Belt_List.some2({
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, {
      hd: 5,
      tl: {
        hd: 0,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
  });
  Mocha.test("sort", () => {
    Belt_List.sort({
      hd: 5,
      tl: {
        hd: 4,
        tl: {
          hd: 9,
          tl: {
            hd: 3,
            tl: {
              hd: 7,
              tl: /* [] */0
            }
          }
        }
      }
    }, (a, b) => a - b | 0);
  });
  Mocha.test("splitAt", () => {
    Belt_List.splitAt({
      hd: "Hello",
      tl: {
        hd: "World",
        tl: /* [] */0
      }
    }, 1);
    Belt_List.splitAt({
      hd: 0,
      tl: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: {
              hd: 4,
              tl: /* [] */0
            }
          }
        }
      }
    }, 2);
  });
  Mocha.test("tail", () => {
    Belt_List.tail({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
    Belt_List.tail(/* [] */0);
  });
  Mocha.test("tailExn", () => {
    Stdlib.assertEqual(Belt_List.tailExn({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }), {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    });
    let exit = 0;
    let val;
    try {
      val = Belt_List.tailExn(/* [] */0);
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          1306,
          7
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("take", () => {
    Belt_List.take({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 1);
    Belt_List.take({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 2);
    Belt_List.take({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 4);
  });
  Mocha.test("toArray", () => {
    Belt_List.toArray({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("unzip", () => {
    Belt_List.unzip({
      hd: [
        1,
        2
      ],
      tl: {
        hd: [
          3,
          4
        ],
        tl: /* [] */0
      }
    });
    Belt_List.unzip({
      hd: [
        "H",
        "W"
      ],
      tl: {
        hd: [
          "e",
          "o"
        ],
        tl: {
          hd: [
            "l",
            "r"
          ],
          tl: {
            hd: [
              "l",
              "l"
            ],
            tl: {
              hd: [
                "o",
                "d"
              ],
              tl: {
                hd: [
                  " ",
                  "!"
                ],
                tl: /* [] */0
              }
            }
          }
        }
      }
    });
  });
  Mocha.test("zip", () => {
    Belt_List.zip({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("zipBy", () => {
    Belt_List.zipBy({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }, (a, b) => (a << 1) + b | 0);
  });
});

Mocha.describe("Belt.Map", () => {
  Mocha.test("Int", () => {});
  Mocha.test("findFirstBy", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Map.fromArray([
      [
        4,
        "4"
      ],
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        ""
      ]
    ], IntCmp);
    Stdlib.assertEqual(Belt_Map.findFirstBy(s0, (k, param) => k === 4), [
      4,
      "4"
    ]);
  });
  Mocha.test("forEach", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Map.fromArray([
      [
        4,
        "4"
      ],
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        ""
      ]
    ], IntCmp);
    let acc = {
      contents: /* [] */0
    };
    Belt_Map.forEach(s0, (k, v) => {
      acc.contents = {
        hd: [
          k,
          v
        ],
        tl: acc.contents
      };
    });
    Primitive_object.equal(acc.contents, {
      hd: [
        4,
        "4"
      ],
      tl: {
        hd: [
          3,
          "3"
        ],
        tl: {
          hd: [
            2,
            "2"
          ],
          tl: {
            hd: [
              1,
              "1"
            ],
            tl: /* [] */0
          }
        }
      }
    });
  });
  Mocha.test("fromArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Primitive_object.equal(Belt_Map.toArray(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp)), [
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        "3"
      ]
    ]);
  });
  Mocha.test("get", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Primitive_object.equal(Belt_Map.get(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp), 2), "2");
    Belt_Map.get(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp), 2) === undefined;
  });
  Mocha.test("has", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Belt_Map.has(Belt_Map.fromArray([[
        1,
        "1"
      ]], IntCmp), 1) === true;
  });
  Mocha.test("isEmpty", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Belt_Map.isEmpty(Belt_Map.fromArray([[
        1,
        "1"
      ]], IntCmp)) === false;
  });
  Mocha.test("keysToArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Primitive_object.equal(Belt_Map.keysToArray(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp)), [
      1,
      2,
      3
    ]);
  });
  Mocha.test("make", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let m = Belt_Map.make(IntCmp);
    Belt_Map.set(m, 0, "a");
  });
  Mocha.test("reduce", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Map.fromArray([
      [
        4,
        "4"
      ],
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp);
    Belt_Map.reduce(s0, /* [] */0, (acc, k, v) => ({
      hd: [
        k,
        v
      ],
      tl: acc
    }));
  });
  Mocha.test("remove", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp);
    let s1 = Belt_Map.remove(s0, 1);
    Belt_Map.remove(s1, 1);
    Primitive_object.equal(Belt_Map.keysToArray(s1), [
      2,
      3
    ]);
  });
  Mocha.test("set", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp);
    let s1 = Belt_Map.set(s0, 2, "3");
    Primitive_object.equal(Belt_Map.valuesToArray(s1), [
      "1",
      "3",
      "3"
    ]);
  });
  Mocha.test("size", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Belt_Map.size(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        2,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp)) === 2;
  });
  Mocha.test("toArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Primitive_object.equal(Belt_Map.toArray(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp)), [
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        "3"
      ]
    ]);
  });
  Mocha.test("valuesToArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Primitive_object.equal(Belt_Map.valuesToArray(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp)), [
      "1",
      "2",
      "3"
    ]);
  });
});

Mocha.describe("Belt.Map.Dict", () => {
  Mocha.test("findFirstBy", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MapDict.fromArray([
      [
        4,
        "4"
      ],
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp.cmp);
    Primitive_object.equal(Belt_MapDict.findFirstBy(s0, (k, param) => k === 4), [
      4,
      "4"
    ]);
  });
});

Mocha.describe("Belt.Map.Int", () => {
  Mocha.test("findFirstBy", () => {
    let mapInt = Belt_MapInt.fromArray([
      [
        1,
        "one"
      ],
      [
        2,
        "two"
      ],
      [
        3,
        "three"
      ]
    ]);
    Stdlib.assertEqual(Belt_MapInt.findFirstBy(mapInt, (k, v) => {
      if (k === 1) {
        return v === "one";
      } else {
        return false;
      }
    }), [
      1,
      "one"
    ]);
  });
});

Mocha.describe("Belt.Map.String", () => {
  Mocha.test("findFirstBy", () => {
    let mapString = Belt_MapString.fromArray([
      [
        "1",
        "one"
      ],
      [
        "2",
        "two"
      ],
      [
        "3",
        "three"
      ]
    ]);
    Stdlib.assertEqual(Belt_MapString.findFirstBy(mapString, (k, v) => {
      if (k === "1") {
        return v === "one";
      } else {
        return false;
      }
    }), [
      "1",
      "one"
    ]);
  });
});

Mocha.describe("Belt.MutableSet", () => {
  Mocha.test("add", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.make(IntCmp);
    Belt_MutableSet.add(s0, 1);
    Belt_MutableSet.add(s0, 2);
    Belt_MutableSet.add(s0, 2);
    Belt_MutableSet.toArray(s0);
  });
  Mocha.test("copy", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      1,
      3,
      2,
      4
    ], IntCmp);
    let copied = Belt_MutableSet.copy(s0);
    Belt_MutableSet.toArray(copied);
  });
  Mocha.test("diff", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    Belt_MutableSet.toArray(Belt_MutableSet.diff(s0, s1));
    Belt_MutableSet.toArray(Belt_MutableSet.diff(s1, s0));
  });
  Mocha.test("eq", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3
    ], IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      3,
      2,
      5
    ], IntCmp);
    Belt_MutableSet.eq(s0, s1);
  });
  Mocha.test("every", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_MutableSet.fromArray([
      2,
      4,
      6,
      8
    ], IntCmp);
    Belt_MutableSet.every(s0, isEven);
  });
  Mocha.test("forEach", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let acc = {
      contents: /* [] */0
    };
    Belt_MutableSet.forEach(s0, x => {
      acc.contents = Belt_List.add(acc.contents, x);
    });
  });
  Mocha.test("fromArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      1,
      3,
      2,
      4
    ], IntCmp);
    Belt_MutableSet.toArray(s0);
  });
  Mocha.test("get", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    Belt_MutableSet.get(s0, 3);
    Belt_MutableSet.get(s0, 20);
  });
  Mocha.test("has", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_MutableSet.fromArray([
      1,
      4,
      2,
      5
    ], IntCmp);
    Belt_MutableSet.has(set, 3);
    Belt_MutableSet.has(set, 1);
  });
  Mocha.test("intersect", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let intersect = Belt_MutableSet.intersect(s0, s1);
    Belt_MutableSet.toArray(intersect);
  });
  Mocha.test("isEmpty", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let empty = Belt_MutableSet.fromArray([], IntCmp);
    let notEmpty = Belt_MutableSet.fromArray([1], IntCmp);
    Belt_MutableSet.isEmpty(empty);
    Belt_MutableSet.isEmpty(notEmpty);
  });
  Mocha.test("keep", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let s1 = Belt_MutableSet.keep(s0, isEven);
    Belt_MutableSet.toArray(s1);
  });
  Mocha.test("maxUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.make(IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.maxUndefined(s0);
    Belt_MutableSet.maxUndefined(s1);
  });
  Mocha.test("maximum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.make(IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.maximum(s0);
    Belt_MutableSet.maximum(s1);
  });
  Mocha.test("mergeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_MutableSet.make(IntCmp);
    Belt_MutableSet.mergeMany(set, [
      5,
      4,
      3,
      2,
      1
    ]);
    Belt_MutableSet.toArray(set);
  });
  Mocha.test("minUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.make(IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.minUndefined(s0);
    Belt_MutableSet.minUndefined(s1);
  });
  Mocha.test("minimum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.make(IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.minimum(s0);
    Belt_MutableSet.minimum(s1);
  });
  Mocha.test("partition", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let match = Belt_MutableSet.partition(s0, isOdd);
    Belt_MutableSet.toArray(match[0]);
    Belt_MutableSet.toArray(match[1]);
  });
  Mocha.test("reduce", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    Belt_MutableSet.reduce(s0, /* [] */0, Belt_List.add);
  });
  Mocha.test("remove", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      2,
      3,
      1,
      4,
      5
    ], IntCmp);
    Belt_MutableSet.remove(s0, 1);
    Belt_MutableSet.remove(s0, 3);
    Belt_MutableSet.remove(s0, 3);
    Belt_MutableSet.toArray(s0);
  });
  Mocha.test("removeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp);
    Belt_MutableSet.removeMany(set, [
      5,
      4,
      3,
      2,
      1
    ]);
    Belt_MutableSet.toArray(set);
  });
  Mocha.test("size", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp);
    Belt_MutableSet.size(s0);
  });
  Mocha.test("some", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      4,
      6,
      8
    ], IntCmp);
    Belt_MutableSet.some(s0, isOdd);
  });
  Mocha.test("split", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let match = Belt_MutableSet.split(s0, 3);
    let match$1 = match[0];
    Belt_MutableSet.toArray(match$1[0]);
    Belt_MutableSet.toArray(match$1[1]);
  });
  Mocha.test("subset", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let s2 = Belt_MutableSet.intersect(s0, s1);
    Belt_MutableSet.subset(s2, s0);
    Belt_MutableSet.subset(s2, s1);
    Belt_MutableSet.subset(s1, s0);
  });
  Mocha.test("toArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.toArray(s0);
  });
  Mocha.test("toList", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.toList(s0);
  });
  Mocha.test("union", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let union = Belt_MutableSet.union(s0, s1);
    Belt_MutableSet.toArray(union);
  });
});

Mocha.describe("Belt.Option", () => {
  Mocha.test("cmp", () => {
    let clockCompare = (a, b) => Primitive_int.compare(a % 12, b % 12);
    Belt_Option.cmp(3, 15, clockCompare);
    Belt_Option.cmp(3, 14, clockCompare);
    Belt_Option.cmp(2, 15, clockCompare);
    Belt_Option.cmp(undefined, 15, clockCompare);
    Belt_Option.cmp(14, undefined, clockCompare);
    Belt_Option.cmp(undefined, undefined, clockCompare);
  });
  Mocha.test("eq", () => {
    let clockEqual = (a, b) => a % 12 === b % 12;
    Belt_Option.eq(3, 15, clockEqual);
    Belt_Option.eq(3, undefined, clockEqual);
    Belt_Option.eq(undefined, 3, clockEqual);
    Belt_Option.eq(undefined, undefined, clockEqual);
  });
  Mocha.test("flatMap", () => {
    let addIfAboveOne = value => {
      if (value > 1) {
        return value + 1 | 0;
      }
      
    };
    Belt_Option.flatMap(2, addIfAboveOne);
    Belt_Option.flatMap(-4, addIfAboveOne);
    Belt_Option.flatMap(undefined, addIfAboveOne);
  });
  Mocha.test("forEach", () => {
    Belt_Option.forEach("thing", x => {
      console.log(x);
    });
    Belt_Option.forEach(undefined, x => {
      console.log(x);
    });
  });
  Mocha.test("getExn", () => {
    Stdlib.assertEqual(Belt_Option.getExn(3), 3);
    let exit = 0;
    let val;
    try {
      val = Belt_Option.getExn(undefined);
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          2073,
          7
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("getWithDefault", () => {
    Belt_Option.getWithDefault(undefined, "Banana");
    Belt_Option.getWithDefault("Apple", "Banana");
    let greet = firstName => "Greetings " + Belt_Option.getWithDefault(firstName, "Anonymous");
    greet("Jane");
    greet(undefined);
  });
  Mocha.test("isNone", () => {
    Belt_Option.isNone(undefined);
    Belt_Option.isNone(1);
  });
  Mocha.test("isSome", () => {
    Belt_Option.isSome(undefined);
    Belt_Option.isSome(1);
  });
  Mocha.test("keep", () => {
    Belt_Option.keep(10, x => x > 5);
    Belt_Option.keep(4, x => x > 5);
    Belt_Option.keep(undefined, x => x > 5);
  });
  Mocha.test("map", () => {
    Belt_Option.map(3, x => x * x | 0);
    Belt_Option.map(undefined, x => x * x | 0);
  });
  Mocha.test("mapWithDefault", () => {
    Belt_Option.mapWithDefault(3, 0, x => x + 5 | 0);
    Belt_Option.mapWithDefault(undefined, 0, x => x + 5 | 0);
  });
  Mocha.test("orElse", () => {
    Primitive_object.equal(Belt_Option.orElse(1812, 1066), 1812);
    Primitive_object.equal(Belt_Option.orElse(undefined, 1066), 1066);
    Belt_Option.orElse(undefined, undefined) === undefined;
  });
});

Mocha.describe("Belt.Range", () => {
  Mocha.test("every", () => {
    Belt_Range.every(0, 4, i => i < 5);
    Belt_Range.every(0, 4, i => i < 4);
  });
  Mocha.test("everyBy", () => {
    Belt_Range.everyBy(0, 4, 1, i => i % 2 === 0);
    Belt_Range.everyBy(0, 4, 2, i => i % 2 === 0);
  });
  Mocha.test("forEach", () => {
    Belt_Range.forEach(0, 4, i => {
      console.log(i);
    });
  });
  Mocha.test("some", () => {
    Belt_Range.some(0, 4, i => i > 5);
    Belt_Range.some(0, 4, i => i > 2);
  });
  Mocha.test("someBy", () => {
    Belt_Range.someBy(1, 5, 2, i => i % 2 === 0);
    Belt_Range.someBy(0, 4, 2, i => i % 2 === 0);
  });
});

Mocha.describe("Belt.Result", () => {
  Mocha.test("cmp", () => {
    let mod10cmp = (a, b) => Primitive_int.compare(a % 10, b % 10);
    Belt_Result.cmp({
      TAG: "Ok",
      _0: 39
    }, {
      TAG: "Ok",
      _0: 57
    }, mod10cmp) === 1;
    Belt_Result.cmp({
      TAG: "Ok",
      _0: 57
    }, {
      TAG: "Ok",
      _0: 39
    }, mod10cmp) === -1;
    Belt_Result.cmp({
      TAG: "Ok",
      _0: 39
    }, {
      TAG: "Error",
      _0: "y"
    }, mod10cmp) === 1;
    Belt_Result.cmp({
      TAG: "Error",
      _0: "x"
    }, {
      TAG: "Ok",
      _0: 57
    }, mod10cmp) === -1;
    Belt_Result.cmp({
      TAG: "Error",
      _0: "x"
    }, {
      TAG: "Error",
      _0: "y"
    }, mod10cmp) === 0;
  });
  Mocha.test("eq", () => {
    let good1 = {
      TAG: "Ok",
      _0: 42
    };
    let good2 = {
      TAG: "Ok",
      _0: 32
    };
    let bad1 = {
      TAG: "Error",
      _0: "invalid"
    };
    let bad2 = {
      TAG: "Error",
      _0: "really invalid"
    };
    let mod10equal = (a, b) => a % 10 === b % 10;
    Belt_Result.eq(good1, good2, mod10equal) === true;
    Belt_Result.eq(good1, bad1, mod10equal) === false;
    Belt_Result.eq(bad2, good2, mod10equal) === false;
    Belt_Result.eq(bad1, bad2, mod10equal) === true;
  });
  Mocha.test("flatMap", () => {
    let recip = x => {
      if (x !== 0.0) {
        return {
          TAG: "Ok",
          _0: 1.0 / x
        };
      } else {
        return {
          TAG: "Error",
          _0: "Divide by zero"
        };
      }
    };
    Primitive_object.equal(Belt_Result.flatMap({
      TAG: "Ok",
      _0: 2.0
    }, recip), {
      TAG: "Ok",
      _0: 0.5
    });
    Primitive_object.equal(Belt_Result.flatMap({
      TAG: "Ok",
      _0: 0.0
    }, recip), {
      TAG: "Error",
      _0: "Divide by zero"
    });
    Primitive_object.equal(Belt_Result.flatMap({
      TAG: "Error",
      _0: "Already bad"
    }, recip), {
      TAG: "Error",
      _0: "Already bad"
    });
  });
  Mocha.test("getExn", () => {
    Stdlib.assertEqual(Belt_Result.getExn({
      TAG: "Ok",
      _0: 42
    }), 42);
    let exit = 0;
    let val;
    try {
      val = Belt_Result.getExn({
        TAG: "Error",
        _0: "Invalid data"
      });
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          2263,
          7
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("getWithDefault", () => {
    Belt_Result.getWithDefault({
      TAG: "Ok",
      _0: 42
    }, 0) === 42;
    Belt_Result.getWithDefault({
      TAG: "Error",
      _0: "Invalid Data"
    }, 0) === 0;
  });
  Mocha.test("map", () => {
    let f = x => Math.sqrt(x);
    Primitive_object.equal(Belt_Result.map({
      TAG: "Ok",
      _0: 64
    }, f), {
      TAG: "Ok",
      _0: 8.0
    });
    Primitive_object.equal(Belt_Result.map({
      TAG: "Error",
      _0: "Invalid data"
    }, f), {
      TAG: "Error",
      _0: "Invalid data"
    });
  });
  Mocha.test("mapWithDefault", () => {
    Belt_Result.mapWithDefault({
      TAG: "Ok",
      _0: 42
    }, 0, x => x / 2 | 0) === 21;
    Belt_Result.mapWithDefault({
      TAG: "Error",
      _0: "Invalid data"
    }, 0, x => x / 2 | 0) === 0;
  });
});

Mocha.describe("Belt.Set", () => {
  Mocha.test("add", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.make(IntCmp);
    let s1 = Belt_Set.add(s0, 1);
    let s2 = Belt_Set.add(s1, 2);
    let s3 = Belt_Set.add(s2, 2);
    Stdlib.assertEqual(Belt_Set.toArray(s0), []);
    Stdlib.assertEqual(Belt_Set.toArray(s1), [1]);
    Stdlib.assertEqual(Belt_Set.toArray(s2), [
      1,
      2
    ]);
    Stdlib.assertEqual(Belt_Set.toArray(s3), [
      1,
      2
    ]);
    Stdlib.assertEqual(s2, s3);
  });
  Mocha.test("diff", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_Set.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.toArray(Belt_Set.diff(s0, s1)), [6]);
    Stdlib.assertEqual(Belt_Set.toArray(Belt_Set.diff(s1, s0)), [
      1,
      4
    ]);
  });
  Mocha.test("eq", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3
    ], IntCmp);
    let s1 = Belt_Set.fromArray([
      3,
      2,
      5
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.eq(s0, s1), true);
  });
  Mocha.test("every", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_Set.fromArray([
      2,
      4,
      6,
      8
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.every(s0, isEven), true);
  });
  Mocha.test("forEach", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let acc = {
      contents: /* [] */0
    };
    Belt_Set.forEach(s0, x => {
      acc.contents = Belt_List.add(acc.contents, x);
    });
    Stdlib.assertEqual(acc.contents, {
      hd: 6,
      tl: {
        hd: 5,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    });
  });
  Mocha.test("fromArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      1,
      3,
      2,
      4
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.toArray(s0), [
      1,
      2,
      3,
      4
    ]);
  });
  Mocha.test("get", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.get(s0, 3), 3);
    Stdlib.assertEqual(Belt_Set.get(s0, 20), undefined);
  });
  Mocha.test("has", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_Set.fromArray([
      1,
      4,
      2,
      5
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.has(set, 3), false);
    Stdlib.assertEqual(Belt_Set.has(set, 1), true);
  });
  Mocha.test("intersect", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_Set.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let intersect = Belt_Set.intersect(s0, s1);
    Stdlib.assertEqual(Belt_Set.toArray(intersect), [
      2,
      3,
      5
    ]);
  });
  Mocha.test("isEmpty", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let empty = Belt_Set.fromArray([], IntCmp);
    let notEmpty = Belt_Set.fromArray([1], IntCmp);
    Stdlib.assertEqual(Belt_Set.isEmpty(empty), true);
    Stdlib.assertEqual(Belt_Set.isEmpty(notEmpty), false);
  });
  Mocha.test("keep", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_Set.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let s1 = Belt_Set.keep(s0, isEven);
    Stdlib.assertEqual(Belt_Set.toArray(s1), [
      2,
      4
    ]);
  });
  Mocha.test("make", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_Set.make(IntCmp);
    Stdlib.assertEqual(Belt_Set.isEmpty(set), true);
  });
  Mocha.test("maxUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.make(IntCmp);
    let s1 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Stdlib.assertEqual(Primitive_option.fromUndefined(Belt_Set.maxUndefined(s0)), undefined);
    Stdlib.assertEqual(Primitive_option.fromUndefined(Belt_Set.maxUndefined(s1)), 5);
  });
  Mocha.test("maximum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.make(IntCmp);
    let s1 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.maximum(s0), undefined);
    Stdlib.assertEqual(Belt_Set.maximum(s1), 5);
  });
  Mocha.test("mergeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_Set.make(IntCmp);
    let newSet = Belt_Set.mergeMany(set, [
      5,
      4,
      3,
      2,
      1
    ]);
    Stdlib.assertEqual(Belt_Set.toArray(newSet), [
      1,
      2,
      3,
      4,
      5
    ]);
  });
  Mocha.test("minUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.make(IntCmp);
    let s1 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Stdlib.assertEqual(Primitive_option.fromUndefined(Belt_Set.minUndefined(s0)), undefined);
    Stdlib.assertEqual(Primitive_option.fromUndefined(Belt_Set.minUndefined(s1)), 1);
  });
  Mocha.test("minimum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.make(IntCmp);
    let s1 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.minimum(s0), undefined);
    Stdlib.assertEqual(Belt_Set.minimum(s1), 1);
  });
  Mocha.test("partition", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_Set.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let match = Belt_Set.partition(s0, isOdd);
    Stdlib.assertEqual(Belt_Set.toArray(match[0]), [
      1,
      3,
      5
    ]);
    Stdlib.assertEqual(Belt_Set.toArray(match[1]), [
      2,
      4
    ]);
  });
  Mocha.test("reduce", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.reduce(s0, /* [] */0, Belt_List.add), {
      hd: 6,
      tl: {
        hd: 5,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    });
  });
  Mocha.test("remove", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      2,
      3,
      1,
      4,
      5
    ], IntCmp);
    let s1 = Belt_Set.remove(s0, 1);
    let s2 = Belt_Set.remove(s1, 3);
    let s3 = Belt_Set.remove(s2, 3);
    Stdlib.assertEqual(Belt_Set.toArray(s1), [
      2,
      3,
      4,
      5
    ]);
    Stdlib.assertEqual(Belt_Set.toArray(s2), [
      2,
      4,
      5
    ]);
    Stdlib.assertEqual(s2, s3);
  });
  Mocha.test("removeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_Set.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp);
    let newSet = Belt_Set.removeMany(set, [
      5,
      4,
      3,
      2,
      1
    ]);
    Stdlib.assertEqual(Belt_Set.toArray(newSet), []);
  });
  Mocha.test("size", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.size(s0), 4);
  });
  Mocha.test("some", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_Set.fromArray([
      1,
      2,
      4,
      6,
      8
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.some(s0, isOdd), true);
  });
  Mocha.test("split", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let match = Belt_Set.split(s0, 3);
    let match$1 = match[0];
    Stdlib.assertEqual(match[1], true);
    Stdlib.assertEqual(Belt_Set.toArray(match$1[0]), [
      1,
      2
    ]);
    Stdlib.assertEqual(Belt_Set.toArray(match$1[1]), [
      4,
      5
    ]);
  });
  Mocha.test("subset", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_Set.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let s2 = Belt_Set.intersect(s0, s1);
    Stdlib.assertEqual(Belt_Set.subset(s2, s0), true);
    Stdlib.assertEqual(Belt_Set.subset(s2, s1), true);
    Stdlib.assertEqual(Belt_Set.subset(s1, s0), false);
  });
  Mocha.test("toArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.toArray(s0), [
      1,
      2,
      3,
      5
    ]);
  });
  Mocha.test("toList", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.toList(s0), {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 5,
            tl: /* [] */0
          }
        }
      }
    });
  });
  Mocha.test("union", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_Set.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let union = Belt_Set.union(s0, s1);
    Stdlib.assertEqual(Belt_Set.toArray(union), [
      1,
      2,
      3,
      4,
      5,
      6
    ]);
  });
});

Mocha.describe("Belt.Set.Dict", () => {
  Mocha.test("add", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.add(undefined, 1, IntCmp.cmp);
    let s2 = Belt_SetDict.add(s1, 2, IntCmp.cmp);
    let s3 = Belt_SetDict.add(s2, 2, IntCmp.cmp);
    Belt_SetDict.toArray(undefined);
    Belt_SetDict.toArray(s1);
    Belt_SetDict.toArray(s2);
    Belt_SetDict.toArray(s3);
    Primitive_object.equal(s2, s3);
  });
  Mocha.test("diff", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let diff1 = Belt_SetDict.diff(s0, s1, IntCmp.cmp);
    let diff2 = Belt_SetDict.diff(s1, s0, IntCmp.cmp);
    Belt_SetDict.toArray(diff1);
    Belt_SetDict.toArray(diff2);
  });
  Mocha.test("empty", () => {});
  Mocha.test("eq", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      5
    ], IntCmp.cmp);
    Belt_SetDict.eq(s0, s1, IntCmp.cmp);
  });
  Mocha.test("every", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_SetDict.fromArray([
      2,
      4,
      6,
      8
    ], IntCmp.cmp);
    Belt_SetDict.every(s0, isEven);
  });
  Mocha.test("forEach", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let acc = {
      contents: /* [] */0
    };
    Belt_SetDict.forEach(s0, x => {
      acc.contents = Belt_List.add(acc.contents, x);
    });
  });
  Mocha.test("fromArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      3,
      2,
      4
    ], IntCmp.cmp);
    Belt_SetDict.toArray(s0);
  });
  Mocha.test("get", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    Belt_SetDict.get(s0, 3, IntCmp.cmp);
    Belt_SetDict.get(s0, 20, IntCmp.cmp);
  });
  Mocha.test("has", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_SetDict.fromArray([
      1,
      4,
      2,
      5
    ], IntCmp.cmp);
    Belt_SetDict.has(set, 3, IntCmp.cmp);
    Belt_SetDict.has(set, 1, IntCmp.cmp);
  });
  Mocha.test("intersect", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let intersect = Belt_SetDict.intersect(s0, s1, IntCmp.cmp);
    Belt_SetDict.toArray(intersect);
  });
  Mocha.test("isEmpty", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let empty = Belt_SetDict.fromArray([], IntCmp.cmp);
    let notEmpty = Belt_SetDict.fromArray([1], IntCmp.cmp);
    Belt_SetDict.isEmpty(empty);
    Belt_SetDict.isEmpty(notEmpty);
  });
  Mocha.test("keep", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.keep(s0, isEven);
    Belt_SetDict.toArray(s1);
  });
  Mocha.test("maxUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.maxUndefined(undefined);
    Belt_SetDict.maxUndefined(s1);
  });
  Mocha.test("maximum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.maximum(undefined);
    Belt_SetDict.maximum(s1);
  });
  Mocha.test("mergeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let newSet = Belt_SetDict.mergeMany(undefined, [
      5,
      4,
      3,
      2,
      1
    ], IntCmp.cmp);
    Belt_SetDict.toArray(newSet);
  });
  Mocha.test("minUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.minUndefined(undefined);
    Belt_SetDict.minUndefined(s1);
  });
  Mocha.test("minimum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.minimum(undefined);
    Belt_SetDict.minimum(s1);
  });
  Mocha.test("partition", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    let match = Belt_SetDict.partition(s0, isOdd);
    Belt_SetDict.toArray(match[0]);
    Belt_SetDict.toArray(match[1]);
  });
  Mocha.test("reduce", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    Belt_SetDict.reduce(s0, /* [] */0, Belt_List.add);
  });
  Mocha.test("remove", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      2,
      3,
      1,
      4,
      5
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.remove(s0, 1, IntCmp.cmp);
    let s2 = Belt_SetDict.remove(s1, 3, IntCmp.cmp);
    let s3 = Belt_SetDict.remove(s2, 3, IntCmp.cmp);
    Belt_SetDict.toArray(s1);
    Belt_SetDict.toArray(s2);
    Primitive_object.equal(s2, s3);
  });
  Mocha.test("removeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp.cmp);
    let newSet = Belt_SetDict.removeMany(set, [
      5,
      4,
      3,
      2,
      1
    ], IntCmp.cmp);
    Belt_SetDict.toArray(newSet);
  });
  Mocha.test("size", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp.cmp);
    Belt_SetDict.size(s0);
  });
  Mocha.test("some", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      4,
      6,
      8
    ], IntCmp.cmp);
    Belt_SetDict.some(s0, isOdd);
  });
  Mocha.test("split", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    let match = Belt_SetDict.split(s0, 3, IntCmp.cmp);
    let match$1 = match[0];
    Belt_SetDict.toArray(match$1[0]);
    Belt_SetDict.toArray(match$1[1]);
  });
  Mocha.test("subset", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let s2 = Belt_SetDict.intersect(s0, s1, IntCmp.cmp);
    Belt_SetDict.subset(s2, s0, IntCmp.cmp);
    Belt_SetDict.subset(s2, s1, IntCmp.cmp);
    Belt_SetDict.subset(s1, s0, IntCmp.cmp);
  });
  Mocha.test("toArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.toArray(s0);
  });
  Mocha.test("toList", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.toList(s0);
  });
  Mocha.test("union", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let union = Belt_SetDict.union(s0, s1, IntCmp.cmp);
    Belt_SetDict.toArray(union);
  });
});

Mocha.describe("Belt.SortArray", () => {
  Mocha.test("binarySearchBy", () => {
    Belt_SortArray.binarySearchBy([
      1,
      2,
      3,
      4,
      33,
      35,
      36
    ], 33, Primitive_int.compare) === 4;
    Pervasives.lnot(Belt_SortArray.binarySearchBy([
      1,
      3,
      5,
      7
    ], 4, Primitive_int.compare)) === 2;
  });
  Mocha.test("strictlySortedLength", () => {
    Belt_SortArray.strictlySortedLength([
      1,
      2,
      3,
      4,
      3
    ], (x, y) => x < y) === 4;
    Belt_SortArray.strictlySortedLength([], Primitive_object.lessthan) === 0;
    Belt_SortArray.strictlySortedLength([1], (x, y) => x < y) === 1;
    Belt_SortArray.strictlySortedLength([
      4,
      3,
      2,
      1
    ], (x, y) => x < y) === -4;
  });
});

Mocha.describe("Belt_Array", () => {
  Mocha.test("blit", () => {
    let v1 = [
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17
    ];
    let v2 = [
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27
    ];
    Belt_Array.blit(v1, 4, v2, 2, 3);
    Primitive_object.equal(v2, [
      20,
      21,
      14,
      15,
      16,
      25,
      26,
      27
    ]);
    Belt_Array.blit(v1, 4, v1, 2, 3);
    Primitive_object.equal(v1, [
      10,
      11,
      14,
      15,
      16,
      15,
      16,
      17
    ]);
  });
  Mocha.test("cmp", () => {
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      4,
      2
    ], Primitive_int.compare) === -1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      2,
      3
    ], Primitive_int.compare) === 1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      3,
      5
    ], Primitive_int.compare) === 0;
  });
  Mocha.test("concat", () => {
    Primitive_object.equal(Belt_Array.concat([
      1,
      2,
      3
    ], [
      4,
      5
    ]), [
      1,
      2,
      3,
      4,
      5
    ]);
    Primitive_object.equal(Belt_Array.concat([], [
      "a",
      "b",
      "c"
    ]), [
      "a",
      "b",
      "c"
    ]);
  });
  Mocha.test("concatMany", () => {
    Primitive_object.equal(Belt_Array.concatMany([
      [
        1,
        2,
        3
      ],
      [
        4,
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8
    ]);
  });
  Mocha.test("eq", () => {
    Belt_Array.eq([
      1,
      2,
      3
    ], [
      -1,
      -2,
      -3
    ], (a, b) => Pervasives.abs(a) === Pervasives.abs(b)) === true;
  });
  Mocha.test("every", () => {
    Belt_Array.every([
      1,
      3,
      5
    ], x => x % 2 === 1) === true;
    Belt_Array.every([
      1,
      -3,
      5
    ], x => x > 0) === false;
  });
  Mocha.test("every2", () => {
    Belt_Array.every2([
      1,
      2,
      3
    ], [
      0,
      1
    ], (a, b) => a > b) === true;
    Belt_Array.every2([], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      2,
      3
    ], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      0,
      1
    ], [
      5,
      0
    ], (x, y) => x > y) === false;
  });
  Mocha.test("fill", () => {
    let arr = Belt_Array.makeBy(5, i => i);
    Belt_Array.fill(arr, 2, 2, 9);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
    Belt_Array.fill(arr, 7, 2, 8);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
  });
  Mocha.test("flatMap", () => {
    Primitive_object.equal(Belt_Array.flatMap([
      1,
      2
    ], x => [
      x + 10 | 0,
      x + 20 | 0
    ]), [
      11,
      21,
      12,
      22
    ]);
  });
  Mocha.test("forEach", () => {
    Belt_Array.forEach([
      "a",
      "b",
      "c"
    ], x => {
      console.log("Item: " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEach([
      1,
      2,
      3,
      4
    ], x => {
      total.contents = total.contents + x | 0;
    });
  });
  Mocha.test("forEachWithIndex", () => {
    Belt_Array.forEachWithIndex([
      "a",
      "b",
      "c"
    ], (i, x) => {
      console.log("Item " + String(i) + " is " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEachWithIndex([
      10,
      11,
      12,
      13
    ], (i, x) => {
      total.contents = (total.contents + x | 0) + i | 0;
    });
  });
  Mocha.test("get", () => {
    Primitive_object.equal(Belt_Array.get([
      "a",
      "b",
      "c"
    ], 0), "a");
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], 3) === undefined;
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], -1) === undefined;
  });
  Mocha.test("getBy", () => {
    Primitive_object.equal(Belt_Array.getBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 4);
    Belt_Array.getBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
  Mocha.test("getIndexBy", () => {
    Primitive_object.equal(Belt_Array.getIndexBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 1);
    Belt_Array.getIndexBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
  Mocha.test("joinWith", () => {
    Belt_Array.joinWith([
      0,
      1
    ], ", ", prim => prim.toString()) === "0, 1";
    Belt_Array.joinWith([], " ", prim => prim.toString()) === "";
    Belt_Array.joinWith([1], " ", prim => prim.toString()) === "1";
  });
  Mocha.test("keepMap", () => {
    Primitive_object.equal(Belt_Array.keepMap([
      1,
      2,
      3
    ], x => {
      if (x % 2 === 0) {
        return x;
      }
      
    }), [2]);
  });
  Mocha.test("keepWithIndex", () => {
    Primitive_object.equal(Belt_Array.keepWithIndex([
      1,
      2,
      3
    ], (_x, i) => i === 1), [2]);
  });
  Mocha.test("length", () => {});
  Mocha.test("makeBy", () => {
    Primitive_object.equal(Belt_Array.makeBy(5, i => i), [
      0,
      1,
      2,
      3,
      4
    ]);
    Primitive_object.equal(Belt_Array.makeBy(5, i => i * i | 0), [
      0,
      1,
      4,
      9,
      16
    ]);
  });
  Mocha.test("makeUninitialized", () => {
    let arr = new Array(5);
    Belt_Array.getExn(arr, 0) === undefined;
  });
  Mocha.test("makeUninitializedUnsafe", () => {
    let arr = new Array(5);
    console.log(Belt_Array.getExn(arr, 0));
    Belt_Array.setExn(arr, 0, "example");
    console.log(Belt_Array.getExn(arr, 0) === "example");
  });
  Mocha.test("map", () => {
    Primitive_object.equal(Belt_Array.map([
      1,
      2
    ], x => x + 1 | 0), [
      3,
      4
    ]);
  });
  Mocha.test("mapWithIndex", () => {
    Primitive_object.equal(Belt_Array.mapWithIndex([
      1,
      2,
      3
    ], (i, x) => i + x | 0), [
      1,
      3,
      5
    ]);
  });
  Mocha.test("partition", () => {
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 === 0), [
      [
        2,
        4
      ],
      [
        1,
        3,
        5
      ]
    ]);
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 !== 0), [
      [
        1,
        3,
        5
      ],
      [
        2,
        4
      ]
    ]);
  });
  Mocha.test("range", () => {
    Primitive_object.equal(Belt_Array.range(0, 3), [
      0,
      1,
      2,
      3
    ]);
    Primitive_object.equal(Belt_Array.range(3, 0), []);
    Primitive_object.equal(Belt_Array.range(3, 3), [3]);
  });
  Mocha.test("rangeBy", () => {
    Primitive_object.equal(Belt_Array.rangeBy(0, 10, 3), [
      0,
      3,
      6,
      9
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(0, 12, 3), [
      0,
      3,
      6,
      9,
      12
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, 1), []);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 12, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 0), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 1), [3]);
  });
  Mocha.test("reduce", () => {
    Belt_Array.reduce([
      2,
      3,
      4
    ], 1, (a, b) => a + b | 0) === 10;
    Belt_Array.reduce([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "abcd";
  });
  Mocha.test("reduceReverse", () => {
    Belt_Array.reduceReverse([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "dcba";
  });
  Mocha.test("reduceReverse2", () => {
    Belt_Array.reduceReverse2([
      1,
      2,
      3
    ], [
      1,
      2
    ], 0, (acc, x, y) => (acc + x | 0) + y | 0) === 6;
  });
  Mocha.test("reduceWithIndex", () => {
    Belt_Array.reduceWithIndex([
      1,
      2,
      3,
      4
    ], 0, (acc, x, i) => (acc + x | 0) + i | 0) === 16;
  });
  Mocha.test("reverse", () => {
    Primitive_object.equal(Belt_Array.reverse([
      10,
      11,
      12,
      13,
      14
    ]), [
      14,
      13,
      12,
      11,
      10
    ]);
  });
  Mocha.test("reverseInPlace", () => {
    let arr = [
      10,
      11,
      12,
      13,
      14
    ];
    Belt_Array.reverseInPlace(arr);
    Primitive_object.equal(arr, [
      14,
      13,
      12,
      11,
      10
    ]);
  });
  Mocha.test("slice", () => {
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2, 3), [
      12,
      13,
      14
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4, 3), [
      13,
      14,
      15
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 4, 9), [
      14,
      15,
      16
    ]);
  });
  Mocha.test("sliceToEnd", () => {
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2), [
      12,
      13,
      14,
      15,
      16
    ]);
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4), [
      13,
      14,
      15,
      16
    ]);
  });
  Mocha.test("some", () => {
    Belt_Array.some([
      2,
      3,
      4
    ], x => x % 2 === 1) === true;
    Belt_Array.some([
      -1,
      -3,
      -5
    ], x => x > 0) === false;
  });
  Mocha.test("some2", () => {
    Belt_Array.some2([
      0,
      2
    ], [
      1,
      0,
      3
    ], (a, b) => a > b) === true;
    Belt_Array.some2([], [1], (x, y) => x > y) === false;
    Belt_Array.some2([
      2,
      3
    ], [
      1,
      4
    ], (x, y) => x > y) === true;
  });
  Mocha.test("truncateToLengthUnsafe", () => {
    let arr = [
      "ant",
      "bee",
      "cat",
      "dog",
      "elk"
    ];
    arr.length = 3;
    Primitive_object.equal(arr, [
      "ant",
      "bee",
      "cat"
    ]);
  });
  Mocha.test("unzip", () => {
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ]
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ],
      [
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      [
        1,
        3,
        5,
        7
      ],
      [
        2,
        4,
        6,
        8
      ]
    ]);
  });
  Mocha.test("zip", () => {
    Primitive_object.equal(Belt_Array.zip([
      1,
      2
    ], [
      3,
      4,
      5
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
  });
  Mocha.test("zipBy", () => {
    Primitive_object.equal(Belt_Array.zipBy([
      1,
      2,
      3
    ], [
      4,
      5
    ], (a, b) => (a << 1) + b | 0), [
      6,
      9
    ]);
  });
});

Mocha.describe("Belt_Float", () => {
  Mocha.test("*", () => {
    Stdlib.assertEqual(2.0 * 2.0, 4.0);
  });
  Mocha.test("+", () => {
    Stdlib.assertEqual(2.0 + 2.0, 4.0);
  });
  Mocha.test("-", () => {
    Stdlib.assertEqual(2.0 - 1.0, 1.0);
  });
  Mocha.test("/", () => {
    Stdlib.assertEqual(4.0 / 2.0, 2.0);
  });
  Mocha.test("fromInt", () => {
    console.log(1 === 1.0);
  });
  Mocha.test("fromString", () => {
    console.log(Belt_Float.fromString("1.0") === 1.0);
  });
  Mocha.test("toInt", () => {
    console.log(true);
  });
  Mocha.test("toString", () => {
    console.log(String(1.0) === "1.0");
  });
});

Mocha.describe("Belt_HashMap", () => {
  Mocha.test("clear", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let hMap = Belt_HashMap.fromArray([[
        1,
        "1"
      ]], IntHash);
    Belt_HashMap.clear(hMap);
    Belt_HashMap.isEmpty(hMap) === true;
  });
  Mocha.test("copy", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntHash);
    let s1 = Belt_HashMap.copy(s0);
    Belt_HashMap.set(s0, 2, "3");
    Primitive_object.notequal(Belt_HashMap.get(s0, 2), Belt_HashMap.get(s1, 2));
  });
  Mocha.test("forEach", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.forEach(s0, (key, value) => {
      console.log(key, value);
    });
  });
  Mocha.test("fromArray", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.fromArray([
      [
        1,
        "value1"
      ],
      [
        2,
        "value2"
      ]
    ], IntHash);
    Primitive_object.equal(Belt_HashMap.toArray(s0), [
      [
        1,
        "value1"
      ],
      [
        2,
        "value2"
      ]
    ]);
  });
  Mocha.test("get", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Primitive_object.equal(Belt_HashMap.get(s0, 1), "value1");
    Belt_HashMap.get(s0, 2) === undefined;
  });
  Mocha.test("getBucketHistogram", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let hMap = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(hMap, 1, "1");
    Belt_HashMap.getBucketHistogram(hMap);
  });
  Mocha.test("has", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.has(s0, 1) === true;
    Belt_HashMap.has(s0, 2) === false;
  });
  Mocha.test("isEmpty", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    Belt_HashMap.isEmpty(Belt_HashMap.fromArray([[
        1,
        "1"
      ]], IntHash)) === false;
  });
  Mocha.test("keepMapInPlace", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Belt_HashMap.keepMapInPlace(s0, (key, value) => {
      if (key === 1) {
        return;
      } else {
        return value;
      }
    });
  });
  Mocha.test("keysToArray", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Primitive_object.equal(Belt_HashMap.keysToArray(s0), [
      1,
      2
    ]);
  });
  Mocha.test("logStats", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let hMap = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(hMap, 1, "1");
    Belt_HashMap.logStats(hMap);
  });
  Mocha.test("make", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let hMap = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(hMap, 0, "a");
  });
  Mocha.test("mergeMany", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let hMap = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.mergeMany(hMap, [
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ]
    ]);
  });
  Mocha.test("reduce", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Stdlib.assertEqual(Belt_HashMap.reduce(s0, "", (acc, param, value) => acc + (", " + value)), ", value1, value2");
    console.log("lol");
  });
  Mocha.test("remove", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.remove(s0, 1);
    Belt_HashMap.has(s0, 1) === false;
  });
  Mocha.test("set", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntHash);
    Belt_HashMap.set(s0, 2, "3");
    Primitive_object.equal(Belt_HashMap.valuesToArray(s0), [
      "1",
      "3",
      "3"
    ]);
  });
  Mocha.test("size", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Belt_HashMap.size(s0) === 2;
  });
  Mocha.test("toArray", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Primitive_object.equal(Belt_HashMap.toArray(s0), [
      [
        1,
        "value1"
      ],
      [
        2,
        "value2"
      ]
    ]);
  });
  Mocha.test("valuesToArray", () => {
    let hash = a => a;
    let eq = Primitive_object.equal;
    let IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });
    let s0 = Belt_HashMap.make(10, IntHash);
    Belt_HashMap.set(s0, 1, "value1");
    Belt_HashMap.set(s0, 2, "value2");
    Primitive_object.equal(Belt_HashMap.valuesToArray(s0), [
      "value1",
      "value2"
    ]);
  });
});

Mocha.describe("Belt_Int", () => {
  Mocha.test("*", () => {
    Stdlib.assertEqual(4, 4);
  });
  Mocha.test("+", () => {
    Stdlib.assertEqual(4, 4);
  });
  Mocha.test("-", () => {
    Stdlib.assertEqual(1, 1);
  });
  Mocha.test("/", () => {
    Stdlib.assertEqual(2, 2);
  });
  Mocha.test("fromFloat", () => {
    Stdlib.assertEqual(1, 1);
  });
  Mocha.test("fromString", () => {
    Stdlib.assertEqual(Belt_Int.fromString("1"), 1);
  });
  Mocha.test("toFloat", () => {
    Stdlib.assertEqual(1, 1.0);
  });
  Mocha.test("toString", () => {
    Stdlib.assertEqual(String(1), "1");
  });
});

Mocha.describe("Belt_List", () => {
  Mocha.test("add", () => {
    Belt_List.add({
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, 1);
    Belt_List.add({
      hd: "World",
      tl: {
        hd: "!",
        tl: /* [] */0
      }
    }, "Hello");
  });
  Mocha.test("cmp", () => {
    Belt_List.cmp({
      hd: 3,
      tl: /* [] */0
    }, {
      hd: 3,
      tl: {
        hd: 7,
        tl: /* [] */0
      }
    }, Primitive_int.compare);
    Belt_List.cmp({
      hd: 5,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 5,
      tl: /* [] */0
    }, Primitive_int.compare);
    Belt_List.cmp({
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 4,
        tl: {
          hd: 2,
          tl: /* [] */0
        }
      }
    }, Primitive_int.compare);
    Belt_List.cmp({
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, Primitive_int.compare);
    Belt_List.cmp({
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, Primitive_int.compare);
  });
  Mocha.test("cmpByLength", () => {
    Belt_List.cmpByLength({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 5,
          tl: {
            hd: 6,
            tl: /* [] */0
          }
        }
      }
    });
    Belt_List.cmpByLength({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: {
          hd: 6,
          tl: /* [] */0
        }
      }
    });
    Belt_List.cmpByLength({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, {
      hd: 5,
      tl: {
        hd: 6,
        tl: /* [] */0
      }
    });
  });
  Mocha.test("concat", () => {
    Belt_List.concat({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    });
  });
  Mocha.test("concatMany", () => {
    Belt_List.concatMany([
      {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      },
      /* [] */0,
      {
        hd: 3,
        tl: /* [] */0
      }
    ]);
  });
  Mocha.test("drop", () => {
    Belt_List.drop({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 2);
    Belt_List.drop({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 3);
    Belt_List.drop({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 4);
  });
  Mocha.test("eq", () => {
    Belt_List.eq({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, (a, b) => a === b);
    Belt_List.eq({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, (a, b) => a === b);
    Belt_List.eq({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: -1,
      tl: {
        hd: -2,
        tl: {
          hd: -3,
          tl: /* [] */0
        }
      }
    }, (a, b) => Pervasives.abs(a) === Pervasives.abs(b));
  });
  Mocha.test("every", () => {
    let isBelow10 = value => value < 10;
    Belt_List.every({
      hd: 1,
      tl: {
        hd: 9,
        tl: {
          hd: 8,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, isBelow10);
    Belt_List.every({
      hd: 1,
      tl: {
        hd: 99,
        tl: {
          hd: 8,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, isBelow10);
  });
  Mocha.test("every2", () => {
    Belt_List.every2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
    Belt_List.every2(/* [] */0, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    Belt_List.every2({
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    Belt_List.every2({
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, {
      hd: 5,
      tl: {
        hd: 0,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
  });
  Mocha.test("filter", () => {
    let isEven = x => x % 2 === 0;
    Belt_List.filter({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, isEven);
    Belt_List.filter({
      hd: undefined,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: undefined,
            tl: /* [] */0
          }
        }
      }
    }, Belt_Option.isSome);
  });
  Mocha.test("filterWithIndex", () => {
    Belt_List.filterWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, (_x, index) => index % 2 === 0);
  });
  Mocha.test("flatten", () => {
    Belt_List.flatten({
      hd: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: /* [] */0,
        tl: {
          hd: {
            hd: 3,
            tl: /* [] */0
          },
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("forEach", () => {
    Belt_List.forEach({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: /* [] */0
        }
      }
    }, x => {
      console.log("Item: " + x);
    });
  });
  Mocha.test("forEach2", () => {
    Belt_List.forEach2({
      hd: "Z",
      tl: {
        hd: "Y",
        tl: /* [] */0
      }
    }, {
      hd: "A",
      tl: {
        hd: "B",
        tl: {
          hd: "C",
          tl: /* [] */0
        }
      }
    }, (x, y) => {
      console.log(x, y);
    });
  });
  Mocha.test("forEachWithIndex", () => {
    Belt_List.forEachWithIndex({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: /* [] */0
        }
      }
    }, (index, x) => {
      console.log("Item " + String(index) + " is " + x);
    });
  });
  Mocha.test("fromArray", () => {
    Belt_List.fromArray([
      1,
      2,
      3
    ]);
  });
  Mocha.test("get", () => {
    let abc = {
      hd: "A",
      tl: {
        hd: "B",
        tl: {
          hd: "C",
          tl: /* [] */0
        }
      }
    };
    Belt_List.get(abc, 1);
    Belt_List.get(abc, 4);
  });
  Mocha.test("getAssoc", () => {
    Belt_List.getAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 3, (a, b) => a === b);
    Belt_List.getAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          15,
          "afternoon"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 15, (k, item) => k === item);
  });
  Mocha.test("getBy", () => {
    Belt_List.getBy({
      hd: 1,
      tl: {
        hd: 4,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, x => x > 3);
    Belt_List.getBy({
      hd: 1,
      tl: {
        hd: 4,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, x => x > 4);
  });
  Mocha.test("getExn", () => {
    let abc = {
      hd: "A",
      tl: {
        hd: "B",
        tl: {
          hd: "C",
          tl: /* [] */0
        }
      }
    };
    Stdlib.assertEqual(Belt_List.getExn(abc, 1), "B");
    let exit = 0;
    let val;
    try {
      val = Belt_List.getExn(abc, 4);
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          4127,
          7
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("has", () => {
    Belt_List.has({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 2, (a, b) => a === b);
    Belt_List.has({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 4, (a, b) => a === b);
    Belt_List.has({
      hd: -1,
      tl: {
        hd: -2,
        tl: {
          hd: -3,
          tl: /* [] */0
        }
      }
    }, 2, (a, b) => Pervasives.abs(a) === Pervasives.abs(b));
  });
  Mocha.test("hasAssoc", () => {
    Belt_List.hasAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 1, (a, b) => a === b);
    Belt_List.hasAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          15,
          "afternoon"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 25, (k, item) => k === item);
  });
  Mocha.test("head", () => {
    Belt_List.head(/* [] */0);
    Belt_List.head({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("headExn", () => {
    Stdlib.assertEqual(Belt_List.headExn({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }), 1);
    let exit = 0;
    let val;
    try {
      val = Belt_List.headExn(/* [] */0);
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          4164,
          7
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("keep", () => {
    let isEven = x => x % 2 === 0;
    Belt_List.keep({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, isEven);
    Belt_List.keep({
      hd: undefined,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: undefined,
            tl: /* [] */0
          }
        }
      }
    }, Belt_Option.isSome);
  });
  Mocha.test("keepMap", () => {
    let isEven = x => x % 2 === 0;
    Belt_List.keepMap({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, x => {
      if (isEven(x)) {
        return x;
      }
      
    });
    Belt_List.keepMap({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: undefined,
          tl: /* [] */0
        }
      }
    }, x => x);
  });
  Mocha.test("keepWithIndex", () => {
    Belt_List.keepWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, (_x, index) => index % 2 === 0);
  });
  Mocha.test("length", () => {
    Belt_List.length({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("make", () => {
    Belt_List.make(3, 1);
  });
  Mocha.test("makeBy", () => {
    Belt_List.makeBy(5, i => i);
    Belt_List.makeBy(5, i => i * i | 0);
  });
  Mocha.test("map", () => {
    Belt_List.map({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, x => x + 1 | 0);
  });
  Mocha.test("mapReverse", () => {
    Stdlib.assertEqual(Belt_List.mapReverse({
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, x => x * x | 0), {
      hd: 25,
      tl: {
        hd: 16,
        tl: {
          hd: 9,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("mapReverse2", () => {
    Belt_List.mapReverse2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, (a, b) => a + b | 0);
  });
  Mocha.test("mapWithIndex", () => {
    Belt_List.mapWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, (index, x) => index + x | 0);
  });
  Mocha.test("partition", () => {
    Stdlib.assertEqual(Belt_List.partition({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, x => x > 2), [
      {
        hd: 3,
        tl: {
          hd: 4,
          tl: /* [] */0
        }
      },
      {
        hd: 1,
        tl: {
          hd: 2,
          tl: /* [] */0
        }
      }
    ]);
  });
  Mocha.test("reduce", () => {
    Belt_List.reduce({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (a, b) => a + b | 0);
    Belt_List.reduce({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (acc, item) => acc + item | 0);
  });
  Mocha.test("reduce2", () => {
    Belt_List.reduce2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }, 0, (acc, x, y) => (acc + (x * x | 0) | 0) + y | 0);
  });
  Mocha.test("reduceReverse", () => {
    Belt_List.reduceReverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (a, b) => a + b | 0);
    Belt_List.reduceReverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 10, (a, b) => a - b | 0);
    Belt_List.reduceReverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, /* [] */0, Belt_List.add);
  });
  Mocha.test("reduceReverse2", () => {
    Belt_List.reduceReverse2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }, 0, (acc, x, y) => (acc + (x * x | 0) | 0) + y | 0);
  });
  Mocha.test("reduceWithIndex", () => {
    Belt_List.reduceWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (acc, item, index) => (acc + item | 0) + index | 0);
  });
  Mocha.test("removeAssoc", () => {
    Belt_List.removeAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 1, (a, b) => a === b);
    Belt_List.removeAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          15,
          "afternoon"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 9, (k, item) => k === item);
  });
  Mocha.test("reverse", () => {
    Belt_List.reverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("reverseConcat", () => {
    Belt_List.reverseConcat({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 3,
      tl: {
        hd: 4,
        tl: /* [] */0
      }
    });
  });
  Mocha.test("setAssoc", () => {
    Belt_List.setAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 2, "x", (a, b) => a === b);
    Belt_List.setAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          3,
          "c"
        ],
        tl: /* [] */0
      }
    }, 2, "b", (a, b) => a === b);
    Belt_List.setAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          3,
          "morning?!"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 15, "afternoon", (a, b) => a % 12 === b % 12);
  });
  Mocha.test("shuffle", () => {
    Belt_List.shuffle({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("some", () => {
    let isAbove100 = value => value > 100;
    Belt_List.some({
      hd: 101,
      tl: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      }
    }, isAbove100);
    Belt_List.some({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, isAbove100);
  });
  Mocha.test("some2", () => {
    Belt_List.some2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
    Belt_List.some2(/* [] */0, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    Belt_List.some2({
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    Belt_List.some2({
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, {
      hd: 5,
      tl: {
        hd: 0,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
  });
  Mocha.test("sort", () => {
    Belt_List.sort({
      hd: 5,
      tl: {
        hd: 4,
        tl: {
          hd: 9,
          tl: {
            hd: 3,
            tl: {
              hd: 7,
              tl: /* [] */0
            }
          }
        }
      }
    }, (a, b) => a - b | 0);
  });
  Mocha.test("splitAt", () => {
    Belt_List.splitAt({
      hd: "Hello",
      tl: {
        hd: "World",
        tl: /* [] */0
      }
    }, 1);
    Belt_List.splitAt({
      hd: 0,
      tl: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: {
              hd: 4,
              tl: /* [] */0
            }
          }
        }
      }
    }, 2);
  });
  Mocha.test("tail", () => {
    Belt_List.tail({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
    Belt_List.tail(/* [] */0);
  });
  Mocha.test("tailExn", () => {
    Stdlib.assertEqual(Belt_List.tailExn({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }), {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    });
    let exit = 0;
    let val;
    try {
      val = Belt_List.tailExn(/* [] */0);
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          4387,
          7
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("take", () => {
    Belt_List.take({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 1);
    Belt_List.take({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 2);
    Belt_List.take({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 4);
  });
  Mocha.test("toArray", () => {
    Belt_List.toArray({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("unzip", () => {
    Belt_List.unzip({
      hd: [
        1,
        2
      ],
      tl: {
        hd: [
          3,
          4
        ],
        tl: /* [] */0
      }
    });
    Belt_List.unzip({
      hd: [
        "H",
        "W"
      ],
      tl: {
        hd: [
          "e",
          "o"
        ],
        tl: {
          hd: [
            "l",
            "r"
          ],
          tl: {
            hd: [
              "l",
              "l"
            ],
            tl: {
              hd: [
                "o",
                "d"
              ],
              tl: {
                hd: [
                  " ",
                  "!"
                ],
                tl: /* [] */0
              }
            }
          }
        }
      }
    });
  });
  Mocha.test("zip", () => {
    Belt_List.zip({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("zipBy", () => {
    Belt_List.zipBy({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }, (a, b) => (a << 1) + b | 0);
  });
});

Mocha.describe("Belt_Map", () => {
  Mocha.test("Int", () => {});
  Mocha.test("findFirstBy", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Map.fromArray([
      [
        4,
        "4"
      ],
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        ""
      ]
    ], IntCmp);
    Stdlib.assertEqual(Belt_Map.findFirstBy(s0, (k, param) => k === 4), [
      4,
      "4"
    ]);
  });
  Mocha.test("forEach", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Map.fromArray([
      [
        4,
        "4"
      ],
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        ""
      ]
    ], IntCmp);
    let acc = {
      contents: /* [] */0
    };
    Belt_Map.forEach(s0, (k, v) => {
      acc.contents = {
        hd: [
          k,
          v
        ],
        tl: acc.contents
      };
    });
    Primitive_object.equal(acc.contents, {
      hd: [
        4,
        "4"
      ],
      tl: {
        hd: [
          3,
          "3"
        ],
        tl: {
          hd: [
            2,
            "2"
          ],
          tl: {
            hd: [
              1,
              "1"
            ],
            tl: /* [] */0
          }
        }
      }
    });
  });
  Mocha.test("fromArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Primitive_object.equal(Belt_Map.toArray(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp)), [
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        "3"
      ]
    ]);
  });
  Mocha.test("get", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Primitive_object.equal(Belt_Map.get(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp), 2), "2");
    Belt_Map.get(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp), 2) === undefined;
  });
  Mocha.test("has", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Belt_Map.has(Belt_Map.fromArray([[
        1,
        "1"
      ]], IntCmp), 1) === true;
  });
  Mocha.test("isEmpty", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Belt_Map.isEmpty(Belt_Map.fromArray([[
        1,
        "1"
      ]], IntCmp)) === false;
  });
  Mocha.test("keysToArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Primitive_object.equal(Belt_Map.keysToArray(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp)), [
      1,
      2,
      3
    ]);
  });
  Mocha.test("make", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let m = Belt_Map.make(IntCmp);
    Belt_Map.set(m, 0, "a");
  });
  Mocha.test("reduce", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Map.fromArray([
      [
        4,
        "4"
      ],
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp);
    Belt_Map.reduce(s0, /* [] */0, (acc, k, v) => ({
      hd: [
        k,
        v
      ],
      tl: acc
    }));
  });
  Mocha.test("remove", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp);
    let s1 = Belt_Map.remove(s0, 1);
    Belt_Map.remove(s1, 1);
    Primitive_object.equal(Belt_Map.keysToArray(s1), [
      2,
      3
    ]);
  });
  Mocha.test("set", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp);
    let s1 = Belt_Map.set(s0, 2, "3");
    Primitive_object.equal(Belt_Map.valuesToArray(s1), [
      "1",
      "3",
      "3"
    ]);
  });
  Mocha.test("size", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Belt_Map.size(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        2,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp)) === 2;
  });
  Mocha.test("toArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Primitive_object.equal(Belt_Map.toArray(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp)), [
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        "3"
      ]
    ]);
  });
  Mocha.test("valuesToArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    Primitive_object.equal(Belt_Map.valuesToArray(Belt_Map.fromArray([
      [
        2,
        "2"
      ],
      [
        1,
        "1"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp)), [
      "1",
      "2",
      "3"
    ]);
  });
});

Mocha.describe("Belt_Map.Dict", () => {
  Mocha.test("findFirstBy", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MapDict.fromArray([
      [
        4,
        "4"
      ],
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp.cmp);
    Primitive_object.equal(Belt_MapDict.findFirstBy(s0, (k, param) => k === 4), [
      4,
      "4"
    ]);
  });
});

Mocha.describe("Belt_Map.Int", () => {
  Mocha.test("findFirstBy", () => {
    let mapInt = Belt_MapInt.fromArray([
      [
        1,
        "one"
      ],
      [
        2,
        "two"
      ],
      [
        3,
        "three"
      ]
    ]);
    Stdlib.assertEqual(Belt_MapInt.findFirstBy(mapInt, (k, v) => {
      if (k === 1) {
        return v === "one";
      } else {
        return false;
      }
    }), [
      1,
      "one"
    ]);
  });
});

Mocha.describe("Belt_Map.String", () => {
  Mocha.test("findFirstBy", () => {
    let mapString = Belt_MapString.fromArray([
      [
        "1",
        "one"
      ],
      [
        "2",
        "two"
      ],
      [
        "3",
        "three"
      ]
    ]);
    Stdlib.assertEqual(Belt_MapString.findFirstBy(mapString, (k, v) => {
      if (k === "1") {
        return v === "one";
      } else {
        return false;
      }
    }), [
      "1",
      "one"
    ]);
  });
});

Mocha.describe("Belt_MapDict", () => {
  Mocha.test("findFirstBy", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MapDict.fromArray([
      [
        4,
        "4"
      ],
      [
        1,
        "1"
      ],
      [
        2,
        "2"
      ],
      [
        3,
        "3"
      ]
    ], IntCmp.cmp);
    Primitive_object.equal(Belt_MapDict.findFirstBy(s0, (k, param) => k === 4), [
      4,
      "4"
    ]);
  });
});

Mocha.describe("Belt_MapInt", () => {
  Mocha.test("findFirstBy", () => {
    let mapInt = Belt_MapInt.fromArray([
      [
        1,
        "one"
      ],
      [
        2,
        "two"
      ],
      [
        3,
        "three"
      ]
    ]);
    Stdlib.assertEqual(Belt_MapInt.findFirstBy(mapInt, (k, v) => {
      if (k === 1) {
        return v === "one";
      } else {
        return false;
      }
    }), [
      1,
      "one"
    ]);
  });
});

Mocha.describe("Belt_MapString", () => {
  Mocha.test("findFirstBy", () => {
    let mapString = Belt_MapString.fromArray([
      [
        "1",
        "one"
      ],
      [
        "2",
        "two"
      ],
      [
        "3",
        "three"
      ]
    ]);
    Stdlib.assertEqual(Belt_MapString.findFirstBy(mapString, (k, v) => {
      if (k === "1") {
        return v === "one";
      } else {
        return false;
      }
    }), [
      "1",
      "one"
    ]);
  });
});

Mocha.describe("Belt_MutableSet", () => {
  Mocha.test("add", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.make(IntCmp);
    Belt_MutableSet.add(s0, 1);
    Belt_MutableSet.add(s0, 2);
    Belt_MutableSet.add(s0, 2);
    Belt_MutableSet.toArray(s0);
  });
  Mocha.test("copy", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      1,
      3,
      2,
      4
    ], IntCmp);
    let copied = Belt_MutableSet.copy(s0);
    Belt_MutableSet.toArray(copied);
  });
  Mocha.test("diff", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    Belt_MutableSet.toArray(Belt_MutableSet.diff(s0, s1));
    Belt_MutableSet.toArray(Belt_MutableSet.diff(s1, s0));
  });
  Mocha.test("eq", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3
    ], IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      3,
      2,
      5
    ], IntCmp);
    Belt_MutableSet.eq(s0, s1);
  });
  Mocha.test("every", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_MutableSet.fromArray([
      2,
      4,
      6,
      8
    ], IntCmp);
    Belt_MutableSet.every(s0, isEven);
  });
  Mocha.test("forEach", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let acc = {
      contents: /* [] */0
    };
    Belt_MutableSet.forEach(s0, x => {
      acc.contents = Belt_List.add(acc.contents, x);
    });
  });
  Mocha.test("fromArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      1,
      3,
      2,
      4
    ], IntCmp);
    Belt_MutableSet.toArray(s0);
  });
  Mocha.test("get", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    Belt_MutableSet.get(s0, 3);
    Belt_MutableSet.get(s0, 20);
  });
  Mocha.test("has", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_MutableSet.fromArray([
      1,
      4,
      2,
      5
    ], IntCmp);
    Belt_MutableSet.has(set, 3);
    Belt_MutableSet.has(set, 1);
  });
  Mocha.test("intersect", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let intersect = Belt_MutableSet.intersect(s0, s1);
    Belt_MutableSet.toArray(intersect);
  });
  Mocha.test("isEmpty", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let empty = Belt_MutableSet.fromArray([], IntCmp);
    let notEmpty = Belt_MutableSet.fromArray([1], IntCmp);
    Belt_MutableSet.isEmpty(empty);
    Belt_MutableSet.isEmpty(notEmpty);
  });
  Mocha.test("keep", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let s1 = Belt_MutableSet.keep(s0, isEven);
    Belt_MutableSet.toArray(s1);
  });
  Mocha.test("maxUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.make(IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.maxUndefined(s0);
    Belt_MutableSet.maxUndefined(s1);
  });
  Mocha.test("maximum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.make(IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.maximum(s0);
    Belt_MutableSet.maximum(s1);
  });
  Mocha.test("mergeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_MutableSet.make(IntCmp);
    Belt_MutableSet.mergeMany(set, [
      5,
      4,
      3,
      2,
      1
    ]);
    Belt_MutableSet.toArray(set);
  });
  Mocha.test("minUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.make(IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.minUndefined(s0);
    Belt_MutableSet.minUndefined(s1);
  });
  Mocha.test("minimum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.make(IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.minimum(s0);
    Belt_MutableSet.minimum(s1);
  });
  Mocha.test("partition", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let match = Belt_MutableSet.partition(s0, isOdd);
    Belt_MutableSet.toArray(match[0]);
    Belt_MutableSet.toArray(match[1]);
  });
  Mocha.test("reduce", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    Belt_MutableSet.reduce(s0, /* [] */0, Belt_List.add);
  });
  Mocha.test("remove", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      2,
      3,
      1,
      4,
      5
    ], IntCmp);
    Belt_MutableSet.remove(s0, 1);
    Belt_MutableSet.remove(s0, 3);
    Belt_MutableSet.remove(s0, 3);
    Belt_MutableSet.toArray(s0);
  });
  Mocha.test("removeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp);
    Belt_MutableSet.removeMany(set, [
      5,
      4,
      3,
      2,
      1
    ]);
    Belt_MutableSet.toArray(set);
  });
  Mocha.test("size", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp);
    Belt_MutableSet.size(s0);
  });
  Mocha.test("some", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      4,
      6,
      8
    ], IntCmp);
    Belt_MutableSet.some(s0, isOdd);
  });
  Mocha.test("split", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let match = Belt_MutableSet.split(s0, 3);
    let match$1 = match[0];
    Belt_MutableSet.toArray(match$1[0]);
    Belt_MutableSet.toArray(match$1[1]);
  });
  Mocha.test("subset", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let s2 = Belt_MutableSet.intersect(s0, s1);
    Belt_MutableSet.subset(s2, s0);
    Belt_MutableSet.subset(s2, s1);
    Belt_MutableSet.subset(s1, s0);
  });
  Mocha.test("toArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.toArray(s0);
  });
  Mocha.test("toList", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Belt_MutableSet.toList(s0);
  });
  Mocha.test("union", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_MutableSet.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let union = Belt_MutableSet.union(s0, s1);
    Belt_MutableSet.toArray(union);
  });
});

Mocha.describe("Belt_Option", () => {
  Mocha.test("cmp", () => {
    let clockCompare = (a, b) => Primitive_int.compare(a % 12, b % 12);
    Belt_Option.cmp(3, 15, clockCompare);
    Belt_Option.cmp(3, 14, clockCompare);
    Belt_Option.cmp(2, 15, clockCompare);
    Belt_Option.cmp(undefined, 15, clockCompare);
    Belt_Option.cmp(14, undefined, clockCompare);
    Belt_Option.cmp(undefined, undefined, clockCompare);
  });
  Mocha.test("eq", () => {
    let clockEqual = (a, b) => a % 12 === b % 12;
    Belt_Option.eq(3, 15, clockEqual);
    Belt_Option.eq(3, undefined, clockEqual);
    Belt_Option.eq(undefined, 3, clockEqual);
    Belt_Option.eq(undefined, undefined, clockEqual);
  });
  Mocha.test("flatMap", () => {
    let addIfAboveOne = value => {
      if (value > 1) {
        return value + 1 | 0;
      }
      
    };
    Belt_Option.flatMap(2, addIfAboveOne);
    Belt_Option.flatMap(-4, addIfAboveOne);
    Belt_Option.flatMap(undefined, addIfAboveOne);
  });
  Mocha.test("forEach", () => {
    Belt_Option.forEach("thing", x => {
      console.log(x);
    });
    Belt_Option.forEach(undefined, x => {
      console.log(x);
    });
  });
  Mocha.test("getExn", () => {
    Stdlib.assertEqual(Belt_Option.getExn(3), 3);
    let exit = 0;
    let val;
    try {
      val = Belt_Option.getExn(undefined);
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          5193,
          7
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("getWithDefault", () => {
    Belt_Option.getWithDefault(undefined, "Banana");
    Belt_Option.getWithDefault("Apple", "Banana");
    let greet = firstName => "Greetings " + Belt_Option.getWithDefault(firstName, "Anonymous");
    greet("Jane");
    greet(undefined);
  });
  Mocha.test("isNone", () => {
    Belt_Option.isNone(undefined);
    Belt_Option.isNone(1);
  });
  Mocha.test("isSome", () => {
    Belt_Option.isSome(undefined);
    Belt_Option.isSome(1);
  });
  Mocha.test("keep", () => {
    Belt_Option.keep(10, x => x > 5);
    Belt_Option.keep(4, x => x > 5);
    Belt_Option.keep(undefined, x => x > 5);
  });
  Mocha.test("map", () => {
    Belt_Option.map(3, x => x * x | 0);
    Belt_Option.map(undefined, x => x * x | 0);
  });
  Mocha.test("mapWithDefault", () => {
    Belt_Option.mapWithDefault(3, 0, x => x + 5 | 0);
    Belt_Option.mapWithDefault(undefined, 0, x => x + 5 | 0);
  });
  Mocha.test("orElse", () => {
    Primitive_object.equal(Belt_Option.orElse(1812, 1066), 1812);
    Primitive_object.equal(Belt_Option.orElse(undefined, 1066), 1066);
    Belt_Option.orElse(undefined, undefined) === undefined;
  });
});

Mocha.describe("Belt_Range", () => {
  Mocha.test("every", () => {
    Belt_Range.every(0, 4, i => i < 5);
    Belt_Range.every(0, 4, i => i < 4);
  });
  Mocha.test("everyBy", () => {
    Belt_Range.everyBy(0, 4, 1, i => i % 2 === 0);
    Belt_Range.everyBy(0, 4, 2, i => i % 2 === 0);
  });
  Mocha.test("forEach", () => {
    Belt_Range.forEach(0, 4, i => {
      console.log(i);
    });
  });
  Mocha.test("some", () => {
    Belt_Range.some(0, 4, i => i > 5);
    Belt_Range.some(0, 4, i => i > 2);
  });
  Mocha.test("someBy", () => {
    Belt_Range.someBy(1, 5, 2, i => i % 2 === 0);
    Belt_Range.someBy(0, 4, 2, i => i % 2 === 0);
  });
});

Mocha.describe("Belt_Result", () => {
  Mocha.test("cmp", () => {
    let mod10cmp = (a, b) => Primitive_int.compare(a % 10, b % 10);
    Belt_Result.cmp({
      TAG: "Ok",
      _0: 39
    }, {
      TAG: "Ok",
      _0: 57
    }, mod10cmp) === 1;
    Belt_Result.cmp({
      TAG: "Ok",
      _0: 57
    }, {
      TAG: "Ok",
      _0: 39
    }, mod10cmp) === -1;
    Belt_Result.cmp({
      TAG: "Ok",
      _0: 39
    }, {
      TAG: "Error",
      _0: "y"
    }, mod10cmp) === 1;
    Belt_Result.cmp({
      TAG: "Error",
      _0: "x"
    }, {
      TAG: "Ok",
      _0: 57
    }, mod10cmp) === -1;
    Belt_Result.cmp({
      TAG: "Error",
      _0: "x"
    }, {
      TAG: "Error",
      _0: "y"
    }, mod10cmp) === 0;
  });
  Mocha.test("eq", () => {
    let good1 = {
      TAG: "Ok",
      _0: 42
    };
    let good2 = {
      TAG: "Ok",
      _0: 32
    };
    let bad1 = {
      TAG: "Error",
      _0: "invalid"
    };
    let bad2 = {
      TAG: "Error",
      _0: "really invalid"
    };
    let mod10equal = (a, b) => a % 10 === b % 10;
    Belt_Result.eq(good1, good2, mod10equal) === true;
    Belt_Result.eq(good1, bad1, mod10equal) === false;
    Belt_Result.eq(bad2, good2, mod10equal) === false;
    Belt_Result.eq(bad1, bad2, mod10equal) === true;
  });
  Mocha.test("flatMap", () => {
    let recip = x => {
      if (x !== 0.0) {
        return {
          TAG: "Ok",
          _0: 1.0 / x
        };
      } else {
        return {
          TAG: "Error",
          _0: "Divide by zero"
        };
      }
    };
    Primitive_object.equal(Belt_Result.flatMap({
      TAG: "Ok",
      _0: 2.0
    }, recip), {
      TAG: "Ok",
      _0: 0.5
    });
    Primitive_object.equal(Belt_Result.flatMap({
      TAG: "Ok",
      _0: 0.0
    }, recip), {
      TAG: "Error",
      _0: "Divide by zero"
    });
    Primitive_object.equal(Belt_Result.flatMap({
      TAG: "Error",
      _0: "Already bad"
    }, recip), {
      TAG: "Error",
      _0: "Already bad"
    });
  });
  Mocha.test("getExn", () => {
    Stdlib.assertEqual(Belt_Result.getExn({
      TAG: "Ok",
      _0: 42
    }), 42);
    let exit = 0;
    let val;
    try {
      val = Belt_Result.getExn({
        TAG: "Error",
        _0: "Invalid data"
      });
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          5383,
          7
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("getWithDefault", () => {
    Belt_Result.getWithDefault({
      TAG: "Ok",
      _0: 42
    }, 0) === 42;
    Belt_Result.getWithDefault({
      TAG: "Error",
      _0: "Invalid Data"
    }, 0) === 0;
  });
  Mocha.test("map", () => {
    let f = x => Math.sqrt(x);
    Primitive_object.equal(Belt_Result.map({
      TAG: "Ok",
      _0: 64
    }, f), {
      TAG: "Ok",
      _0: 8.0
    });
    Primitive_object.equal(Belt_Result.map({
      TAG: "Error",
      _0: "Invalid data"
    }, f), {
      TAG: "Error",
      _0: "Invalid data"
    });
  });
  Mocha.test("mapWithDefault", () => {
    Belt_Result.mapWithDefault({
      TAG: "Ok",
      _0: 42
    }, 0, x => x / 2 | 0) === 21;
    Belt_Result.mapWithDefault({
      TAG: "Error",
      _0: "Invalid data"
    }, 0, x => x / 2 | 0) === 0;
  });
});

Mocha.describe("Belt_Set", () => {
  Mocha.test("add", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.make(IntCmp);
    let s1 = Belt_Set.add(s0, 1);
    let s2 = Belt_Set.add(s1, 2);
    let s3 = Belt_Set.add(s2, 2);
    Stdlib.assertEqual(Belt_Set.toArray(s0), []);
    Stdlib.assertEqual(Belt_Set.toArray(s1), [1]);
    Stdlib.assertEqual(Belt_Set.toArray(s2), [
      1,
      2
    ]);
    Stdlib.assertEqual(Belt_Set.toArray(s3), [
      1,
      2
    ]);
    Stdlib.assertEqual(s2, s3);
  });
  Mocha.test("diff", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_Set.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.toArray(Belt_Set.diff(s0, s1)), [6]);
    Stdlib.assertEqual(Belt_Set.toArray(Belt_Set.diff(s1, s0)), [
      1,
      4
    ]);
  });
  Mocha.test("eq", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3
    ], IntCmp);
    let s1 = Belt_Set.fromArray([
      3,
      2,
      5
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.eq(s0, s1), true);
  });
  Mocha.test("every", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_Set.fromArray([
      2,
      4,
      6,
      8
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.every(s0, isEven), true);
  });
  Mocha.test("forEach", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let acc = {
      contents: /* [] */0
    };
    Belt_Set.forEach(s0, x => {
      acc.contents = Belt_List.add(acc.contents, x);
    });
    Stdlib.assertEqual(acc.contents, {
      hd: 6,
      tl: {
        hd: 5,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    });
  });
  Mocha.test("fromArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      1,
      3,
      2,
      4
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.toArray(s0), [
      1,
      2,
      3,
      4
    ]);
  });
  Mocha.test("get", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.get(s0, 3), 3);
    Stdlib.assertEqual(Belt_Set.get(s0, 20), undefined);
  });
  Mocha.test("has", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_Set.fromArray([
      1,
      4,
      2,
      5
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.has(set, 3), false);
    Stdlib.assertEqual(Belt_Set.has(set, 1), true);
  });
  Mocha.test("intersect", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_Set.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let intersect = Belt_Set.intersect(s0, s1);
    Stdlib.assertEqual(Belt_Set.toArray(intersect), [
      2,
      3,
      5
    ]);
  });
  Mocha.test("isEmpty", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let empty = Belt_Set.fromArray([], IntCmp);
    let notEmpty = Belt_Set.fromArray([1], IntCmp);
    Stdlib.assertEqual(Belt_Set.isEmpty(empty), true);
    Stdlib.assertEqual(Belt_Set.isEmpty(notEmpty), false);
  });
  Mocha.test("keep", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_Set.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let s1 = Belt_Set.keep(s0, isEven);
    Stdlib.assertEqual(Belt_Set.toArray(s1), [
      2,
      4
    ]);
  });
  Mocha.test("make", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_Set.make(IntCmp);
    Stdlib.assertEqual(Belt_Set.isEmpty(set), true);
  });
  Mocha.test("maxUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.make(IntCmp);
    let s1 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Stdlib.assertEqual(Primitive_option.fromUndefined(Belt_Set.maxUndefined(s0)), undefined);
    Stdlib.assertEqual(Primitive_option.fromUndefined(Belt_Set.maxUndefined(s1)), 5);
  });
  Mocha.test("maximum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.make(IntCmp);
    let s1 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.maximum(s0), undefined);
    Stdlib.assertEqual(Belt_Set.maximum(s1), 5);
  });
  Mocha.test("mergeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_Set.make(IntCmp);
    let newSet = Belt_Set.mergeMany(set, [
      5,
      4,
      3,
      2,
      1
    ]);
    Stdlib.assertEqual(Belt_Set.toArray(newSet), [
      1,
      2,
      3,
      4,
      5
    ]);
  });
  Mocha.test("minUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.make(IntCmp);
    let s1 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Stdlib.assertEqual(Primitive_option.fromUndefined(Belt_Set.minUndefined(s0)), undefined);
    Stdlib.assertEqual(Primitive_option.fromUndefined(Belt_Set.minUndefined(s1)), 1);
  });
  Mocha.test("minimum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.make(IntCmp);
    let s1 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.minimum(s0), undefined);
    Stdlib.assertEqual(Belt_Set.minimum(s1), 1);
  });
  Mocha.test("partition", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_Set.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let match = Belt_Set.partition(s0, isOdd);
    Stdlib.assertEqual(Belt_Set.toArray(match[0]), [
      1,
      3,
      5
    ]);
    Stdlib.assertEqual(Belt_Set.toArray(match[1]), [
      2,
      4
    ]);
  });
  Mocha.test("reduce", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.reduce(s0, /* [] */0, Belt_List.add), {
      hd: 6,
      tl: {
        hd: 5,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    });
  });
  Mocha.test("remove", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      2,
      3,
      1,
      4,
      5
    ], IntCmp);
    let s1 = Belt_Set.remove(s0, 1);
    let s2 = Belt_Set.remove(s1, 3);
    let s3 = Belt_Set.remove(s2, 3);
    Stdlib.assertEqual(Belt_Set.toArray(s1), [
      2,
      3,
      4,
      5
    ]);
    Stdlib.assertEqual(Belt_Set.toArray(s2), [
      2,
      4,
      5
    ]);
    Stdlib.assertEqual(s2, s3);
  });
  Mocha.test("removeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_Set.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp);
    let newSet = Belt_Set.removeMany(set, [
      5,
      4,
      3,
      2,
      1
    ]);
    Stdlib.assertEqual(Belt_Set.toArray(newSet), []);
  });
  Mocha.test("size", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.size(s0), 4);
  });
  Mocha.test("some", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_Set.fromArray([
      1,
      2,
      4,
      6,
      8
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.some(s0, isOdd), true);
  });
  Mocha.test("split", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp);
    let match = Belt_Set.split(s0, 3);
    let match$1 = match[0];
    Stdlib.assertEqual(match[1], true);
    Stdlib.assertEqual(Belt_Set.toArray(match$1[0]), [
      1,
      2
    ]);
    Stdlib.assertEqual(Belt_Set.toArray(match$1[1]), [
      4,
      5
    ]);
  });
  Mocha.test("subset", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_Set.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let s2 = Belt_Set.intersect(s0, s1);
    Stdlib.assertEqual(Belt_Set.subset(s2, s0), true);
    Stdlib.assertEqual(Belt_Set.subset(s2, s1), true);
    Stdlib.assertEqual(Belt_Set.subset(s1, s0), false);
  });
  Mocha.test("toArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.toArray(s0), [
      1,
      2,
      3,
      5
    ]);
  });
  Mocha.test("toList", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp);
    Stdlib.assertEqual(Belt_Set.toList(s0), {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 5,
            tl: /* [] */0
          }
        }
      }
    });
  });
  Mocha.test("union", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_Set.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp);
    let s1 = Belt_Set.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp);
    let union = Belt_Set.union(s0, s1);
    Stdlib.assertEqual(Belt_Set.toArray(union), [
      1,
      2,
      3,
      4,
      5,
      6
    ]);
  });
});

Mocha.describe("Belt_Set.Dict", () => {
  Mocha.test("add", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.add(undefined, 1, IntCmp.cmp);
    let s2 = Belt_SetDict.add(s1, 2, IntCmp.cmp);
    let s3 = Belt_SetDict.add(s2, 2, IntCmp.cmp);
    Belt_SetDict.toArray(undefined);
    Belt_SetDict.toArray(s1);
    Belt_SetDict.toArray(s2);
    Belt_SetDict.toArray(s3);
    Primitive_object.equal(s2, s3);
  });
  Mocha.test("diff", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let diff1 = Belt_SetDict.diff(s0, s1, IntCmp.cmp);
    let diff2 = Belt_SetDict.diff(s1, s0, IntCmp.cmp);
    Belt_SetDict.toArray(diff1);
    Belt_SetDict.toArray(diff2);
  });
  Mocha.test("empty", () => {});
  Mocha.test("eq", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      5
    ], IntCmp.cmp);
    Belt_SetDict.eq(s0, s1, IntCmp.cmp);
  });
  Mocha.test("every", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_SetDict.fromArray([
      2,
      4,
      6,
      8
    ], IntCmp.cmp);
    Belt_SetDict.every(s0, isEven);
  });
  Mocha.test("forEach", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let acc = {
      contents: /* [] */0
    };
    Belt_SetDict.forEach(s0, x => {
      acc.contents = Belt_List.add(acc.contents, x);
    });
  });
  Mocha.test("fromArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      3,
      2,
      4
    ], IntCmp.cmp);
    Belt_SetDict.toArray(s0);
  });
  Mocha.test("get", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    Belt_SetDict.get(s0, 3, IntCmp.cmp);
    Belt_SetDict.get(s0, 20, IntCmp.cmp);
  });
  Mocha.test("has", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_SetDict.fromArray([
      1,
      4,
      2,
      5
    ], IntCmp.cmp);
    Belt_SetDict.has(set, 3, IntCmp.cmp);
    Belt_SetDict.has(set, 1, IntCmp.cmp);
  });
  Mocha.test("intersect", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let intersect = Belt_SetDict.intersect(s0, s1, IntCmp.cmp);
    Belt_SetDict.toArray(intersect);
  });
  Mocha.test("isEmpty", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let empty = Belt_SetDict.fromArray([], IntCmp.cmp);
    let notEmpty = Belt_SetDict.fromArray([1], IntCmp.cmp);
    Belt_SetDict.isEmpty(empty);
    Belt_SetDict.isEmpty(notEmpty);
  });
  Mocha.test("keep", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.keep(s0, isEven);
    Belt_SetDict.toArray(s1);
  });
  Mocha.test("maxUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.maxUndefined(undefined);
    Belt_SetDict.maxUndefined(s1);
  });
  Mocha.test("maximum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.maximum(undefined);
    Belt_SetDict.maximum(s1);
  });
  Mocha.test("mergeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let newSet = Belt_SetDict.mergeMany(undefined, [
      5,
      4,
      3,
      2,
      1
    ], IntCmp.cmp);
    Belt_SetDict.toArray(newSet);
  });
  Mocha.test("minUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.minUndefined(undefined);
    Belt_SetDict.minUndefined(s1);
  });
  Mocha.test("minimum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.minimum(undefined);
    Belt_SetDict.minimum(s1);
  });
  Mocha.test("partition", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    let match = Belt_SetDict.partition(s0, isOdd);
    Belt_SetDict.toArray(match[0]);
    Belt_SetDict.toArray(match[1]);
  });
  Mocha.test("reduce", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    Belt_SetDict.reduce(s0, /* [] */0, Belt_List.add);
  });
  Mocha.test("remove", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      2,
      3,
      1,
      4,
      5
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.remove(s0, 1, IntCmp.cmp);
    let s2 = Belt_SetDict.remove(s1, 3, IntCmp.cmp);
    let s3 = Belt_SetDict.remove(s2, 3, IntCmp.cmp);
    Belt_SetDict.toArray(s1);
    Belt_SetDict.toArray(s2);
    Primitive_object.equal(s2, s3);
  });
  Mocha.test("removeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp.cmp);
    let newSet = Belt_SetDict.removeMany(set, [
      5,
      4,
      3,
      2,
      1
    ], IntCmp.cmp);
    Belt_SetDict.toArray(newSet);
  });
  Mocha.test("size", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp.cmp);
    Belt_SetDict.size(s0);
  });
  Mocha.test("some", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      4,
      6,
      8
    ], IntCmp.cmp);
    Belt_SetDict.some(s0, isOdd);
  });
  Mocha.test("split", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    let match = Belt_SetDict.split(s0, 3, IntCmp.cmp);
    let match$1 = match[0];
    Belt_SetDict.toArray(match$1[0]);
    Belt_SetDict.toArray(match$1[1]);
  });
  Mocha.test("subset", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let s2 = Belt_SetDict.intersect(s0, s1, IntCmp.cmp);
    Belt_SetDict.subset(s2, s0, IntCmp.cmp);
    Belt_SetDict.subset(s2, s1, IntCmp.cmp);
    Belt_SetDict.subset(s1, s0, IntCmp.cmp);
  });
  Mocha.test("toArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.toArray(s0);
  });
  Mocha.test("toList", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.toList(s0);
  });
  Mocha.test("union", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let union = Belt_SetDict.union(s0, s1, IntCmp.cmp);
    Belt_SetDict.toArray(union);
  });
});

Mocha.describe("Belt_SetDict", () => {
  Mocha.test("add", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.add(undefined, 1, IntCmp.cmp);
    let s2 = Belt_SetDict.add(s1, 2, IntCmp.cmp);
    let s3 = Belt_SetDict.add(s2, 2, IntCmp.cmp);
    Belt_SetDict.toArray(undefined);
    Belt_SetDict.toArray(s1);
    Belt_SetDict.toArray(s2);
    Belt_SetDict.toArray(s3);
    Primitive_object.equal(s2, s3);
  });
  Mocha.test("diff", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let diff1 = Belt_SetDict.diff(s0, s1, IntCmp.cmp);
    let diff2 = Belt_SetDict.diff(s1, s0, IntCmp.cmp);
    Belt_SetDict.toArray(diff1);
    Belt_SetDict.toArray(diff2);
  });
  Mocha.test("empty", () => {});
  Mocha.test("eq", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      5
    ], IntCmp.cmp);
    Belt_SetDict.eq(s0, s1, IntCmp.cmp);
  });
  Mocha.test("every", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_SetDict.fromArray([
      2,
      4,
      6,
      8
    ], IntCmp.cmp);
    Belt_SetDict.every(s0, isEven);
  });
  Mocha.test("forEach", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let acc = {
      contents: /* [] */0
    };
    Belt_SetDict.forEach(s0, x => {
      acc.contents = Belt_List.add(acc.contents, x);
    });
  });
  Mocha.test("fromArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      3,
      2,
      4
    ], IntCmp.cmp);
    Belt_SetDict.toArray(s0);
  });
  Mocha.test("get", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    Belt_SetDict.get(s0, 3, IntCmp.cmp);
    Belt_SetDict.get(s0, 20, IntCmp.cmp);
  });
  Mocha.test("has", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_SetDict.fromArray([
      1,
      4,
      2,
      5
    ], IntCmp.cmp);
    Belt_SetDict.has(set, 3, IntCmp.cmp);
    Belt_SetDict.has(set, 1, IntCmp.cmp);
  });
  Mocha.test("intersect", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let intersect = Belt_SetDict.intersect(s0, s1, IntCmp.cmp);
    Belt_SetDict.toArray(intersect);
  });
  Mocha.test("isEmpty", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let empty = Belt_SetDict.fromArray([], IntCmp.cmp);
    let notEmpty = Belt_SetDict.fromArray([1], IntCmp.cmp);
    Belt_SetDict.isEmpty(empty);
    Belt_SetDict.isEmpty(notEmpty);
  });
  Mocha.test("keep", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isEven = x => x % 2 === 0;
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.keep(s0, isEven);
    Belt_SetDict.toArray(s1);
  });
  Mocha.test("maxUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.maxUndefined(undefined);
    Belt_SetDict.maxUndefined(s1);
  });
  Mocha.test("maximum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.maximum(undefined);
    Belt_SetDict.maximum(s1);
  });
  Mocha.test("mergeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let newSet = Belt_SetDict.mergeMany(undefined, [
      5,
      4,
      3,
      2,
      1
    ], IntCmp.cmp);
    Belt_SetDict.toArray(newSet);
  });
  Mocha.test("minUndefined", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.minUndefined(undefined);
    Belt_SetDict.minUndefined(s1);
  });
  Mocha.test("minimum", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s1 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.minimum(undefined);
    Belt_SetDict.minimum(s1);
  });
  Mocha.test("partition", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    let match = Belt_SetDict.partition(s0, isOdd);
    Belt_SetDict.toArray(match[0]);
    Belt_SetDict.toArray(match[1]);
  });
  Mocha.test("reduce", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    Belt_SetDict.reduce(s0, /* [] */0, Belt_List.add);
  });
  Mocha.test("remove", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      2,
      3,
      1,
      4,
      5
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.remove(s0, 1, IntCmp.cmp);
    let s2 = Belt_SetDict.remove(s1, 3, IntCmp.cmp);
    let s3 = Belt_SetDict.remove(s2, 3, IntCmp.cmp);
    Belt_SetDict.toArray(s1);
    Belt_SetDict.toArray(s2);
    Primitive_object.equal(s2, s3);
  });
  Mocha.test("removeMany", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let set = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp.cmp);
    let newSet = Belt_SetDict.removeMany(set, [
      5,
      4,
      3,
      2,
      1
    ], IntCmp.cmp);
    Belt_SetDict.toArray(newSet);
  });
  Mocha.test("size", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4
    ], IntCmp.cmp);
    Belt_SetDict.size(s0);
  });
  Mocha.test("some", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let isOdd = x => x % 2 !== 0;
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      4,
      6,
      8
    ], IntCmp.cmp);
    Belt_SetDict.some(s0, isOdd);
  });
  Mocha.test("split", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      1,
      2,
      3,
      4,
      5
    ], IntCmp.cmp);
    let match = Belt_SetDict.split(s0, 3, IntCmp.cmp);
    let match$1 = match[0];
    Belt_SetDict.toArray(match$1[0]);
    Belt_SetDict.toArray(match$1[1]);
  });
  Mocha.test("subset", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let s2 = Belt_SetDict.intersect(s0, s1, IntCmp.cmp);
    Belt_SetDict.subset(s2, s0, IntCmp.cmp);
    Belt_SetDict.subset(s2, s1, IntCmp.cmp);
    Belt_SetDict.subset(s1, s0, IntCmp.cmp);
  });
  Mocha.test("toArray", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.toArray(s0);
  });
  Mocha.test("toList", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      3,
      2,
      1,
      5
    ], IntCmp.cmp);
    Belt_SetDict.toList(s0);
  });
  Mocha.test("union", () => {
    let cmp = Primitive_object.compare;
    let IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });
    let s0 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      5,
      6
    ], IntCmp.cmp);
    let s1 = Belt_SetDict.fromArray([
      5,
      2,
      3,
      1,
      5,
      4
    ], IntCmp.cmp);
    let union = Belt_SetDict.union(s0, s1, IntCmp.cmp);
    Belt_SetDict.toArray(union);
  });
});

Mocha.describe("Belt_SortArray", () => {
  Mocha.test("binarySearchBy", () => {
    Belt_SortArray.binarySearchBy([
      1,
      2,
      3,
      4,
      33,
      35,
      36
    ], 33, Primitive_int.compare) === 4;
    Pervasives.lnot(Belt_SortArray.binarySearchBy([
      1,
      3,
      5,
      7
    ], 4, Primitive_int.compare)) === 2;
  });
  Mocha.test("strictlySortedLength", () => {
    Belt_SortArray.strictlySortedLength([
      1,
      2,
      3,
      4,
      3
    ], (x, y) => x < y) === 4;
    Belt_SortArray.strictlySortedLength([], Primitive_object.lessthan) === 0;
    Belt_SortArray.strictlySortedLength([1], (x, y) => x < y) === 1;
    Belt_SortArray.strictlySortedLength([
      4,
      3,
      2,
      1
    ], (x, y) => x < y) === -4;
  });
});

Mocha.describe("Belt_internalMapInt.A", () => {
  Mocha.test("blit", () => {
    let v1 = [
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17
    ];
    let v2 = [
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27
    ];
    Belt_Array.blit(v1, 4, v2, 2, 3);
    Primitive_object.equal(v2, [
      20,
      21,
      14,
      15,
      16,
      25,
      26,
      27
    ]);
    Belt_Array.blit(v1, 4, v1, 2, 3);
    Primitive_object.equal(v1, [
      10,
      11,
      14,
      15,
      16,
      15,
      16,
      17
    ]);
  });
  Mocha.test("cmp", () => {
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      4,
      2
    ], Primitive_int.compare) === -1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      2,
      3
    ], Primitive_int.compare) === 1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      3,
      5
    ], Primitive_int.compare) === 0;
  });
  Mocha.test("concat", () => {
    Primitive_object.equal(Belt_Array.concat([
      1,
      2,
      3
    ], [
      4,
      5
    ]), [
      1,
      2,
      3,
      4,
      5
    ]);
    Primitive_object.equal(Belt_Array.concat([], [
      "a",
      "b",
      "c"
    ]), [
      "a",
      "b",
      "c"
    ]);
  });
  Mocha.test("concatMany", () => {
    Primitive_object.equal(Belt_Array.concatMany([
      [
        1,
        2,
        3
      ],
      [
        4,
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8
    ]);
  });
  Mocha.test("eq", () => {
    Belt_Array.eq([
      1,
      2,
      3
    ], [
      -1,
      -2,
      -3
    ], (a, b) => Pervasives.abs(a) === Pervasives.abs(b)) === true;
  });
  Mocha.test("every", () => {
    Belt_Array.every([
      1,
      3,
      5
    ], x => x % 2 === 1) === true;
    Belt_Array.every([
      1,
      -3,
      5
    ], x => x > 0) === false;
  });
  Mocha.test("every2", () => {
    Belt_Array.every2([
      1,
      2,
      3
    ], [
      0,
      1
    ], (a, b) => a > b) === true;
    Belt_Array.every2([], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      2,
      3
    ], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      0,
      1
    ], [
      5,
      0
    ], (x, y) => x > y) === false;
  });
  Mocha.test("fill", () => {
    let arr = Belt_Array.makeBy(5, i => i);
    Belt_Array.fill(arr, 2, 2, 9);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
    Belt_Array.fill(arr, 7, 2, 8);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
  });
  Mocha.test("flatMap", () => {
    Primitive_object.equal(Belt_Array.flatMap([
      1,
      2
    ], x => [
      x + 10 | 0,
      x + 20 | 0
    ]), [
      11,
      21,
      12,
      22
    ]);
  });
  Mocha.test("forEach", () => {
    Belt_Array.forEach([
      "a",
      "b",
      "c"
    ], x => {
      console.log("Item: " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEach([
      1,
      2,
      3,
      4
    ], x => {
      total.contents = total.contents + x | 0;
    });
  });
  Mocha.test("forEachWithIndex", () => {
    Belt_Array.forEachWithIndex([
      "a",
      "b",
      "c"
    ], (i, x) => {
      console.log("Item " + String(i) + " is " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEachWithIndex([
      10,
      11,
      12,
      13
    ], (i, x) => {
      total.contents = (total.contents + x | 0) + i | 0;
    });
  });
  Mocha.test("get", () => {
    Primitive_object.equal(Belt_Array.get([
      "a",
      "b",
      "c"
    ], 0), "a");
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], 3) === undefined;
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], -1) === undefined;
  });
  Mocha.test("getBy", () => {
    Primitive_object.equal(Belt_Array.getBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 4);
    Belt_Array.getBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
  Mocha.test("getIndexBy", () => {
    Primitive_object.equal(Belt_Array.getIndexBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 1);
    Belt_Array.getIndexBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
  Mocha.test("joinWith", () => {
    Belt_Array.joinWith([
      0,
      1
    ], ", ", prim => prim.toString()) === "0, 1";
    Belt_Array.joinWith([], " ", prim => prim.toString()) === "";
    Belt_Array.joinWith([1], " ", prim => prim.toString()) === "1";
  });
  Mocha.test("keepMap", () => {
    Primitive_object.equal(Belt_Array.keepMap([
      1,
      2,
      3
    ], x => {
      if (x % 2 === 0) {
        return x;
      }
      
    }), [2]);
  });
  Mocha.test("keepWithIndex", () => {
    Primitive_object.equal(Belt_Array.keepWithIndex([
      1,
      2,
      3
    ], (_x, i) => i === 1), [2]);
  });
  Mocha.test("length", () => {});
  Mocha.test("makeBy", () => {
    Primitive_object.equal(Belt_Array.makeBy(5, i => i), [
      0,
      1,
      2,
      3,
      4
    ]);
    Primitive_object.equal(Belt_Array.makeBy(5, i => i * i | 0), [
      0,
      1,
      4,
      9,
      16
    ]);
  });
  Mocha.test("makeUninitialized", () => {
    let arr = new Array(5);
    Belt_Array.getExn(arr, 0) === undefined;
  });
  Mocha.test("makeUninitializedUnsafe", () => {
    let arr = new Array(5);
    console.log(Belt_Array.getExn(arr, 0));
    Belt_Array.setExn(arr, 0, "example");
    console.log(Belt_Array.getExn(arr, 0) === "example");
  });
  Mocha.test("map", () => {
    Primitive_object.equal(Belt_Array.map([
      1,
      2
    ], x => x + 1 | 0), [
      3,
      4
    ]);
  });
  Mocha.test("mapWithIndex", () => {
    Primitive_object.equal(Belt_Array.mapWithIndex([
      1,
      2,
      3
    ], (i, x) => i + x | 0), [
      1,
      3,
      5
    ]);
  });
  Mocha.test("partition", () => {
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 === 0), [
      [
        2,
        4
      ],
      [
        1,
        3,
        5
      ]
    ]);
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 !== 0), [
      [
        1,
        3,
        5
      ],
      [
        2,
        4
      ]
    ]);
  });
  Mocha.test("range", () => {
    Primitive_object.equal(Belt_Array.range(0, 3), [
      0,
      1,
      2,
      3
    ]);
    Primitive_object.equal(Belt_Array.range(3, 0), []);
    Primitive_object.equal(Belt_Array.range(3, 3), [3]);
  });
  Mocha.test("rangeBy", () => {
    Primitive_object.equal(Belt_Array.rangeBy(0, 10, 3), [
      0,
      3,
      6,
      9
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(0, 12, 3), [
      0,
      3,
      6,
      9,
      12
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, 1), []);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 12, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 0), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 1), [3]);
  });
  Mocha.test("reduce", () => {
    Belt_Array.reduce([
      2,
      3,
      4
    ], 1, (a, b) => a + b | 0) === 10;
    Belt_Array.reduce([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "abcd";
  });
  Mocha.test("reduceReverse", () => {
    Belt_Array.reduceReverse([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "dcba";
  });
  Mocha.test("reduceReverse2", () => {
    Belt_Array.reduceReverse2([
      1,
      2,
      3
    ], [
      1,
      2
    ], 0, (acc, x, y) => (acc + x | 0) + y | 0) === 6;
  });
  Mocha.test("reduceWithIndex", () => {
    Belt_Array.reduceWithIndex([
      1,
      2,
      3,
      4
    ], 0, (acc, x, i) => (acc + x | 0) + i | 0) === 16;
  });
  Mocha.test("reverse", () => {
    Primitive_object.equal(Belt_Array.reverse([
      10,
      11,
      12,
      13,
      14
    ]), [
      14,
      13,
      12,
      11,
      10
    ]);
  });
  Mocha.test("reverseInPlace", () => {
    let arr = [
      10,
      11,
      12,
      13,
      14
    ];
    Belt_Array.reverseInPlace(arr);
    Primitive_object.equal(arr, [
      14,
      13,
      12,
      11,
      10
    ]);
  });
  Mocha.test("slice", () => {
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2, 3), [
      12,
      13,
      14
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4, 3), [
      13,
      14,
      15
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 4, 9), [
      14,
      15,
      16
    ]);
  });
  Mocha.test("sliceToEnd", () => {
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2), [
      12,
      13,
      14,
      15,
      16
    ]);
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4), [
      13,
      14,
      15,
      16
    ]);
  });
  Mocha.test("some", () => {
    Belt_Array.some([
      2,
      3,
      4
    ], x => x % 2 === 1) === true;
    Belt_Array.some([
      -1,
      -3,
      -5
    ], x => x > 0) === false;
  });
  Mocha.test("some2", () => {
    Belt_Array.some2([
      0,
      2
    ], [
      1,
      0,
      3
    ], (a, b) => a > b) === true;
    Belt_Array.some2([], [1], (x, y) => x > y) === false;
    Belt_Array.some2([
      2,
      3
    ], [
      1,
      4
    ], (x, y) => x > y) === true;
  });
  Mocha.test("truncateToLengthUnsafe", () => {
    let arr = [
      "ant",
      "bee",
      "cat",
      "dog",
      "elk"
    ];
    arr.length = 3;
    Primitive_object.equal(arr, [
      "ant",
      "bee",
      "cat"
    ]);
  });
  Mocha.test("unzip", () => {
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ]
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ],
      [
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      [
        1,
        3,
        5,
        7
      ],
      [
        2,
        4,
        6,
        8
      ]
    ]);
  });
  Mocha.test("zip", () => {
    Primitive_object.equal(Belt_Array.zip([
      1,
      2
    ], [
      3,
      4,
      5
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
  });
  Mocha.test("zipBy", () => {
    Primitive_object.equal(Belt_Array.zipBy([
      1,
      2,
      3
    ], [
      4,
      5
    ], (a, b) => (a << 1) + b | 0), [
      6,
      9
    ]);
  });
});

Mocha.describe("Belt_internalMapInt.S", () => {
  Mocha.test("binarySearchBy", () => {
    Belt_SortArray.binarySearchBy([
      1,
      2,
      3,
      4,
      33,
      35,
      36
    ], 33, Primitive_int.compare) === 4;
    Pervasives.lnot(Belt_SortArray.binarySearchBy([
      1,
      3,
      5,
      7
    ], 4, Primitive_int.compare)) === 2;
  });
  Mocha.test("strictlySortedLength", () => {
    Belt_SortArray.strictlySortedLength([
      1,
      2,
      3,
      4,
      3
    ], (x, y) => x < y) === 4;
    Belt_SortArray.strictlySortedLength([], Primitive_object.lessthan) === 0;
    Belt_SortArray.strictlySortedLength([1], (x, y) => x < y) === 1;
    Belt_SortArray.strictlySortedLength([
      4,
      3,
      2,
      1
    ], (x, y) => x < y) === -4;
  });
});

Mocha.describe("Belt_internalMapString.A", () => {
  Mocha.test("blit", () => {
    let v1 = [
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17
    ];
    let v2 = [
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27
    ];
    Belt_Array.blit(v1, 4, v2, 2, 3);
    Primitive_object.equal(v2, [
      20,
      21,
      14,
      15,
      16,
      25,
      26,
      27
    ]);
    Belt_Array.blit(v1, 4, v1, 2, 3);
    Primitive_object.equal(v1, [
      10,
      11,
      14,
      15,
      16,
      15,
      16,
      17
    ]);
  });
  Mocha.test("cmp", () => {
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      4,
      2
    ], Primitive_int.compare) === -1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      2,
      3
    ], Primitive_int.compare) === 1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      3,
      5
    ], Primitive_int.compare) === 0;
  });
  Mocha.test("concat", () => {
    Primitive_object.equal(Belt_Array.concat([
      1,
      2,
      3
    ], [
      4,
      5
    ]), [
      1,
      2,
      3,
      4,
      5
    ]);
    Primitive_object.equal(Belt_Array.concat([], [
      "a",
      "b",
      "c"
    ]), [
      "a",
      "b",
      "c"
    ]);
  });
  Mocha.test("concatMany", () => {
    Primitive_object.equal(Belt_Array.concatMany([
      [
        1,
        2,
        3
      ],
      [
        4,
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8
    ]);
  });
  Mocha.test("eq", () => {
    Belt_Array.eq([
      1,
      2,
      3
    ], [
      -1,
      -2,
      -3
    ], (a, b) => Pervasives.abs(a) === Pervasives.abs(b)) === true;
  });
  Mocha.test("every", () => {
    Belt_Array.every([
      1,
      3,
      5
    ], x => x % 2 === 1) === true;
    Belt_Array.every([
      1,
      -3,
      5
    ], x => x > 0) === false;
  });
  Mocha.test("every2", () => {
    Belt_Array.every2([
      1,
      2,
      3
    ], [
      0,
      1
    ], (a, b) => a > b) === true;
    Belt_Array.every2([], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      2,
      3
    ], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      0,
      1
    ], [
      5,
      0
    ], (x, y) => x > y) === false;
  });
  Mocha.test("fill", () => {
    let arr = Belt_Array.makeBy(5, i => i);
    Belt_Array.fill(arr, 2, 2, 9);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
    Belt_Array.fill(arr, 7, 2, 8);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
  });
  Mocha.test("flatMap", () => {
    Primitive_object.equal(Belt_Array.flatMap([
      1,
      2
    ], x => [
      x + 10 | 0,
      x + 20 | 0
    ]), [
      11,
      21,
      12,
      22
    ]);
  });
  Mocha.test("forEach", () => {
    Belt_Array.forEach([
      "a",
      "b",
      "c"
    ], x => {
      console.log("Item: " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEach([
      1,
      2,
      3,
      4
    ], x => {
      total.contents = total.contents + x | 0;
    });
  });
  Mocha.test("forEachWithIndex", () => {
    Belt_Array.forEachWithIndex([
      "a",
      "b",
      "c"
    ], (i, x) => {
      console.log("Item " + String(i) + " is " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEachWithIndex([
      10,
      11,
      12,
      13
    ], (i, x) => {
      total.contents = (total.contents + x | 0) + i | 0;
    });
  });
  Mocha.test("get", () => {
    Primitive_object.equal(Belt_Array.get([
      "a",
      "b",
      "c"
    ], 0), "a");
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], 3) === undefined;
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], -1) === undefined;
  });
  Mocha.test("getBy", () => {
    Primitive_object.equal(Belt_Array.getBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 4);
    Belt_Array.getBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
  Mocha.test("getIndexBy", () => {
    Primitive_object.equal(Belt_Array.getIndexBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 1);
    Belt_Array.getIndexBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
  Mocha.test("joinWith", () => {
    Belt_Array.joinWith([
      0,
      1
    ], ", ", prim => prim.toString()) === "0, 1";
    Belt_Array.joinWith([], " ", prim => prim.toString()) === "";
    Belt_Array.joinWith([1], " ", prim => prim.toString()) === "1";
  });
  Mocha.test("keepMap", () => {
    Primitive_object.equal(Belt_Array.keepMap([
      1,
      2,
      3
    ], x => {
      if (x % 2 === 0) {
        return x;
      }
      
    }), [2]);
  });
  Mocha.test("keepWithIndex", () => {
    Primitive_object.equal(Belt_Array.keepWithIndex([
      1,
      2,
      3
    ], (_x, i) => i === 1), [2]);
  });
  Mocha.test("length", () => {});
  Mocha.test("makeBy", () => {
    Primitive_object.equal(Belt_Array.makeBy(5, i => i), [
      0,
      1,
      2,
      3,
      4
    ]);
    Primitive_object.equal(Belt_Array.makeBy(5, i => i * i | 0), [
      0,
      1,
      4,
      9,
      16
    ]);
  });
  Mocha.test("makeUninitialized", () => {
    let arr = new Array(5);
    Belt_Array.getExn(arr, 0) === undefined;
  });
  Mocha.test("makeUninitializedUnsafe", () => {
    let arr = new Array(5);
    console.log(Belt_Array.getExn(arr, 0));
    Belt_Array.setExn(arr, 0, "example");
    console.log(Belt_Array.getExn(arr, 0) === "example");
  });
  Mocha.test("map", () => {
    Primitive_object.equal(Belt_Array.map([
      1,
      2
    ], x => x + 1 | 0), [
      3,
      4
    ]);
  });
  Mocha.test("mapWithIndex", () => {
    Primitive_object.equal(Belt_Array.mapWithIndex([
      1,
      2,
      3
    ], (i, x) => i + x | 0), [
      1,
      3,
      5
    ]);
  });
  Mocha.test("partition", () => {
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 === 0), [
      [
        2,
        4
      ],
      [
        1,
        3,
        5
      ]
    ]);
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 !== 0), [
      [
        1,
        3,
        5
      ],
      [
        2,
        4
      ]
    ]);
  });
  Mocha.test("range", () => {
    Primitive_object.equal(Belt_Array.range(0, 3), [
      0,
      1,
      2,
      3
    ]);
    Primitive_object.equal(Belt_Array.range(3, 0), []);
    Primitive_object.equal(Belt_Array.range(3, 3), [3]);
  });
  Mocha.test("rangeBy", () => {
    Primitive_object.equal(Belt_Array.rangeBy(0, 10, 3), [
      0,
      3,
      6,
      9
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(0, 12, 3), [
      0,
      3,
      6,
      9,
      12
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, 1), []);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 12, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 0), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 1), [3]);
  });
  Mocha.test("reduce", () => {
    Belt_Array.reduce([
      2,
      3,
      4
    ], 1, (a, b) => a + b | 0) === 10;
    Belt_Array.reduce([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "abcd";
  });
  Mocha.test("reduceReverse", () => {
    Belt_Array.reduceReverse([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "dcba";
  });
  Mocha.test("reduceReverse2", () => {
    Belt_Array.reduceReverse2([
      1,
      2,
      3
    ], [
      1,
      2
    ], 0, (acc, x, y) => (acc + x | 0) + y | 0) === 6;
  });
  Mocha.test("reduceWithIndex", () => {
    Belt_Array.reduceWithIndex([
      1,
      2,
      3,
      4
    ], 0, (acc, x, i) => (acc + x | 0) + i | 0) === 16;
  });
  Mocha.test("reverse", () => {
    Primitive_object.equal(Belt_Array.reverse([
      10,
      11,
      12,
      13,
      14
    ]), [
      14,
      13,
      12,
      11,
      10
    ]);
  });
  Mocha.test("reverseInPlace", () => {
    let arr = [
      10,
      11,
      12,
      13,
      14
    ];
    Belt_Array.reverseInPlace(arr);
    Primitive_object.equal(arr, [
      14,
      13,
      12,
      11,
      10
    ]);
  });
  Mocha.test("slice", () => {
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2, 3), [
      12,
      13,
      14
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4, 3), [
      13,
      14,
      15
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 4, 9), [
      14,
      15,
      16
    ]);
  });
  Mocha.test("sliceToEnd", () => {
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2), [
      12,
      13,
      14,
      15,
      16
    ]);
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4), [
      13,
      14,
      15,
      16
    ]);
  });
  Mocha.test("some", () => {
    Belt_Array.some([
      2,
      3,
      4
    ], x => x % 2 === 1) === true;
    Belt_Array.some([
      -1,
      -3,
      -5
    ], x => x > 0) === false;
  });
  Mocha.test("some2", () => {
    Belt_Array.some2([
      0,
      2
    ], [
      1,
      0,
      3
    ], (a, b) => a > b) === true;
    Belt_Array.some2([], [1], (x, y) => x > y) === false;
    Belt_Array.some2([
      2,
      3
    ], [
      1,
      4
    ], (x, y) => x > y) === true;
  });
  Mocha.test("truncateToLengthUnsafe", () => {
    let arr = [
      "ant",
      "bee",
      "cat",
      "dog",
      "elk"
    ];
    arr.length = 3;
    Primitive_object.equal(arr, [
      "ant",
      "bee",
      "cat"
    ]);
  });
  Mocha.test("unzip", () => {
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ]
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ],
      [
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      [
        1,
        3,
        5,
        7
      ],
      [
        2,
        4,
        6,
        8
      ]
    ]);
  });
  Mocha.test("zip", () => {
    Primitive_object.equal(Belt_Array.zip([
      1,
      2
    ], [
      3,
      4,
      5
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
  });
  Mocha.test("zipBy", () => {
    Primitive_object.equal(Belt_Array.zipBy([
      1,
      2,
      3
    ], [
      4,
      5
    ], (a, b) => (a << 1) + b | 0), [
      6,
      9
    ]);
  });
});

Mocha.describe("Belt_internalMapString.S", () => {
  Mocha.test("binarySearchBy", () => {
    Belt_SortArray.binarySearchBy([
      1,
      2,
      3,
      4,
      33,
      35,
      36
    ], 33, Primitive_int.compare) === 4;
    Pervasives.lnot(Belt_SortArray.binarySearchBy([
      1,
      3,
      5,
      7
    ], 4, Primitive_int.compare)) === 2;
  });
  Mocha.test("strictlySortedLength", () => {
    Belt_SortArray.strictlySortedLength([
      1,
      2,
      3,
      4,
      3
    ], (x, y) => x < y) === 4;
    Belt_SortArray.strictlySortedLength([], Primitive_object.lessthan) === 0;
    Belt_SortArray.strictlySortedLength([1], (x, y) => x < y) === 1;
    Belt_SortArray.strictlySortedLength([
      4,
      3,
      2,
      1
    ], (x, y) => x < y) === -4;
  });
});

Mocha.describe("Belt_internalSetInt.A", () => {
  Mocha.test("blit", () => {
    let v1 = [
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17
    ];
    let v2 = [
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27
    ];
    Belt_Array.blit(v1, 4, v2, 2, 3);
    Primitive_object.equal(v2, [
      20,
      21,
      14,
      15,
      16,
      25,
      26,
      27
    ]);
    Belt_Array.blit(v1, 4, v1, 2, 3);
    Primitive_object.equal(v1, [
      10,
      11,
      14,
      15,
      16,
      15,
      16,
      17
    ]);
  });
  Mocha.test("cmp", () => {
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      4,
      2
    ], Primitive_int.compare) === -1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      2,
      3
    ], Primitive_int.compare) === 1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      3,
      5
    ], Primitive_int.compare) === 0;
  });
  Mocha.test("concat", () => {
    Primitive_object.equal(Belt_Array.concat([
      1,
      2,
      3
    ], [
      4,
      5
    ]), [
      1,
      2,
      3,
      4,
      5
    ]);
    Primitive_object.equal(Belt_Array.concat([], [
      "a",
      "b",
      "c"
    ]), [
      "a",
      "b",
      "c"
    ]);
  });
  Mocha.test("concatMany", () => {
    Primitive_object.equal(Belt_Array.concatMany([
      [
        1,
        2,
        3
      ],
      [
        4,
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8
    ]);
  });
  Mocha.test("eq", () => {
    Belt_Array.eq([
      1,
      2,
      3
    ], [
      -1,
      -2,
      -3
    ], (a, b) => Pervasives.abs(a) === Pervasives.abs(b)) === true;
  });
  Mocha.test("every", () => {
    Belt_Array.every([
      1,
      3,
      5
    ], x => x % 2 === 1) === true;
    Belt_Array.every([
      1,
      -3,
      5
    ], x => x > 0) === false;
  });
  Mocha.test("every2", () => {
    Belt_Array.every2([
      1,
      2,
      3
    ], [
      0,
      1
    ], (a, b) => a > b) === true;
    Belt_Array.every2([], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      2,
      3
    ], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      0,
      1
    ], [
      5,
      0
    ], (x, y) => x > y) === false;
  });
  Mocha.test("fill", () => {
    let arr = Belt_Array.makeBy(5, i => i);
    Belt_Array.fill(arr, 2, 2, 9);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
    Belt_Array.fill(arr, 7, 2, 8);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
  });
  Mocha.test("flatMap", () => {
    Primitive_object.equal(Belt_Array.flatMap([
      1,
      2
    ], x => [
      x + 10 | 0,
      x + 20 | 0
    ]), [
      11,
      21,
      12,
      22
    ]);
  });
  Mocha.test("forEach", () => {
    Belt_Array.forEach([
      "a",
      "b",
      "c"
    ], x => {
      console.log("Item: " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEach([
      1,
      2,
      3,
      4
    ], x => {
      total.contents = total.contents + x | 0;
    });
  });
  Mocha.test("forEachWithIndex", () => {
    Belt_Array.forEachWithIndex([
      "a",
      "b",
      "c"
    ], (i, x) => {
      console.log("Item " + String(i) + " is " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEachWithIndex([
      10,
      11,
      12,
      13
    ], (i, x) => {
      total.contents = (total.contents + x | 0) + i | 0;
    });
  });
  Mocha.test("get", () => {
    Primitive_object.equal(Belt_Array.get([
      "a",
      "b",
      "c"
    ], 0), "a");
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], 3) === undefined;
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], -1) === undefined;
  });
  Mocha.test("getBy", () => {
    Primitive_object.equal(Belt_Array.getBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 4);
    Belt_Array.getBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
  Mocha.test("getIndexBy", () => {
    Primitive_object.equal(Belt_Array.getIndexBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 1);
    Belt_Array.getIndexBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
  Mocha.test("joinWith", () => {
    Belt_Array.joinWith([
      0,
      1
    ], ", ", prim => prim.toString()) === "0, 1";
    Belt_Array.joinWith([], " ", prim => prim.toString()) === "";
    Belt_Array.joinWith([1], " ", prim => prim.toString()) === "1";
  });
  Mocha.test("keepMap", () => {
    Primitive_object.equal(Belt_Array.keepMap([
      1,
      2,
      3
    ], x => {
      if (x % 2 === 0) {
        return x;
      }
      
    }), [2]);
  });
  Mocha.test("keepWithIndex", () => {
    Primitive_object.equal(Belt_Array.keepWithIndex([
      1,
      2,
      3
    ], (_x, i) => i === 1), [2]);
  });
  Mocha.test("length", () => {});
  Mocha.test("makeBy", () => {
    Primitive_object.equal(Belt_Array.makeBy(5, i => i), [
      0,
      1,
      2,
      3,
      4
    ]);
    Primitive_object.equal(Belt_Array.makeBy(5, i => i * i | 0), [
      0,
      1,
      4,
      9,
      16
    ]);
  });
  Mocha.test("makeUninitialized", () => {
    let arr = new Array(5);
    Belt_Array.getExn(arr, 0) === undefined;
  });
  Mocha.test("makeUninitializedUnsafe", () => {
    let arr = new Array(5);
    console.log(Belt_Array.getExn(arr, 0));
    Belt_Array.setExn(arr, 0, "example");
    console.log(Belt_Array.getExn(arr, 0) === "example");
  });
  Mocha.test("map", () => {
    Primitive_object.equal(Belt_Array.map([
      1,
      2
    ], x => x + 1 | 0), [
      3,
      4
    ]);
  });
  Mocha.test("mapWithIndex", () => {
    Primitive_object.equal(Belt_Array.mapWithIndex([
      1,
      2,
      3
    ], (i, x) => i + x | 0), [
      1,
      3,
      5
    ]);
  });
  Mocha.test("partition", () => {
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 === 0), [
      [
        2,
        4
      ],
      [
        1,
        3,
        5
      ]
    ]);
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 !== 0), [
      [
        1,
        3,
        5
      ],
      [
        2,
        4
      ]
    ]);
  });
  Mocha.test("range", () => {
    Primitive_object.equal(Belt_Array.range(0, 3), [
      0,
      1,
      2,
      3
    ]);
    Primitive_object.equal(Belt_Array.range(3, 0), []);
    Primitive_object.equal(Belt_Array.range(3, 3), [3]);
  });
  Mocha.test("rangeBy", () => {
    Primitive_object.equal(Belt_Array.rangeBy(0, 10, 3), [
      0,
      3,
      6,
      9
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(0, 12, 3), [
      0,
      3,
      6,
      9,
      12
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, 1), []);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 12, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 0), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 1), [3]);
  });
  Mocha.test("reduce", () => {
    Belt_Array.reduce([
      2,
      3,
      4
    ], 1, (a, b) => a + b | 0) === 10;
    Belt_Array.reduce([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "abcd";
  });
  Mocha.test("reduceReverse", () => {
    Belt_Array.reduceReverse([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "dcba";
  });
  Mocha.test("reduceReverse2", () => {
    Belt_Array.reduceReverse2([
      1,
      2,
      3
    ], [
      1,
      2
    ], 0, (acc, x, y) => (acc + x | 0) + y | 0) === 6;
  });
  Mocha.test("reduceWithIndex", () => {
    Belt_Array.reduceWithIndex([
      1,
      2,
      3,
      4
    ], 0, (acc, x, i) => (acc + x | 0) + i | 0) === 16;
  });
  Mocha.test("reverse", () => {
    Primitive_object.equal(Belt_Array.reverse([
      10,
      11,
      12,
      13,
      14
    ]), [
      14,
      13,
      12,
      11,
      10
    ]);
  });
  Mocha.test("reverseInPlace", () => {
    let arr = [
      10,
      11,
      12,
      13,
      14
    ];
    Belt_Array.reverseInPlace(arr);
    Primitive_object.equal(arr, [
      14,
      13,
      12,
      11,
      10
    ]);
  });
  Mocha.test("slice", () => {
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2, 3), [
      12,
      13,
      14
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4, 3), [
      13,
      14,
      15
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 4, 9), [
      14,
      15,
      16
    ]);
  });
  Mocha.test("sliceToEnd", () => {
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2), [
      12,
      13,
      14,
      15,
      16
    ]);
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4), [
      13,
      14,
      15,
      16
    ]);
  });
  Mocha.test("some", () => {
    Belt_Array.some([
      2,
      3,
      4
    ], x => x % 2 === 1) === true;
    Belt_Array.some([
      -1,
      -3,
      -5
    ], x => x > 0) === false;
  });
  Mocha.test("some2", () => {
    Belt_Array.some2([
      0,
      2
    ], [
      1,
      0,
      3
    ], (a, b) => a > b) === true;
    Belt_Array.some2([], [1], (x, y) => x > y) === false;
    Belt_Array.some2([
      2,
      3
    ], [
      1,
      4
    ], (x, y) => x > y) === true;
  });
  Mocha.test("truncateToLengthUnsafe", () => {
    let arr = [
      "ant",
      "bee",
      "cat",
      "dog",
      "elk"
    ];
    arr.length = 3;
    Primitive_object.equal(arr, [
      "ant",
      "bee",
      "cat"
    ]);
  });
  Mocha.test("unzip", () => {
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ]
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ],
      [
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      [
        1,
        3,
        5,
        7
      ],
      [
        2,
        4,
        6,
        8
      ]
    ]);
  });
  Mocha.test("zip", () => {
    Primitive_object.equal(Belt_Array.zip([
      1,
      2
    ], [
      3,
      4,
      5
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
  });
  Mocha.test("zipBy", () => {
    Primitive_object.equal(Belt_Array.zipBy([
      1,
      2,
      3
    ], [
      4,
      5
    ], (a, b) => (a << 1) + b | 0), [
      6,
      9
    ]);
  });
});

Mocha.describe("Belt_internalSetString.A", () => {
  Mocha.test("blit", () => {
    let v1 = [
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17
    ];
    let v2 = [
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27
    ];
    Belt_Array.blit(v1, 4, v2, 2, 3);
    Primitive_object.equal(v2, [
      20,
      21,
      14,
      15,
      16,
      25,
      26,
      27
    ]);
    Belt_Array.blit(v1, 4, v1, 2, 3);
    Primitive_object.equal(v1, [
      10,
      11,
      14,
      15,
      16,
      15,
      16,
      17
    ]);
  });
  Mocha.test("cmp", () => {
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      4,
      2
    ], Primitive_int.compare) === -1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      2,
      3
    ], Primitive_int.compare) === 1;
    Belt_Array.cmp([
      1,
      3,
      5
    ], [
      1,
      3,
      5
    ], Primitive_int.compare) === 0;
  });
  Mocha.test("concat", () => {
    Primitive_object.equal(Belt_Array.concat([
      1,
      2,
      3
    ], [
      4,
      5
    ]), [
      1,
      2,
      3,
      4,
      5
    ]);
    Primitive_object.equal(Belt_Array.concat([], [
      "a",
      "b",
      "c"
    ]), [
      "a",
      "b",
      "c"
    ]);
  });
  Mocha.test("concatMany", () => {
    Primitive_object.equal(Belt_Array.concatMany([
      [
        1,
        2,
        3
      ],
      [
        4,
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8
    ]);
  });
  Mocha.test("eq", () => {
    Belt_Array.eq([
      1,
      2,
      3
    ], [
      -1,
      -2,
      -3
    ], (a, b) => Pervasives.abs(a) === Pervasives.abs(b)) === true;
  });
  Mocha.test("every", () => {
    Belt_Array.every([
      1,
      3,
      5
    ], x => x % 2 === 1) === true;
    Belt_Array.every([
      1,
      -3,
      5
    ], x => x > 0) === false;
  });
  Mocha.test("every2", () => {
    Belt_Array.every2([
      1,
      2,
      3
    ], [
      0,
      1
    ], (a, b) => a > b) === true;
    Belt_Array.every2([], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      2,
      3
    ], [1], (x, y) => x > y) === true;
    Belt_Array.every2([
      0,
      1
    ], [
      5,
      0
    ], (x, y) => x > y) === false;
  });
  Mocha.test("fill", () => {
    let arr = Belt_Array.makeBy(5, i => i);
    Belt_Array.fill(arr, 2, 2, 9);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
    Belt_Array.fill(arr, 7, 2, 8);
    Primitive_object.equal(arr, [
      0,
      1,
      9,
      9,
      4
    ]);
  });
  Mocha.test("flatMap", () => {
    Primitive_object.equal(Belt_Array.flatMap([
      1,
      2
    ], x => [
      x + 10 | 0,
      x + 20 | 0
    ]), [
      11,
      21,
      12,
      22
    ]);
  });
  Mocha.test("forEach", () => {
    Belt_Array.forEach([
      "a",
      "b",
      "c"
    ], x => {
      console.log("Item: " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEach([
      1,
      2,
      3,
      4
    ], x => {
      total.contents = total.contents + x | 0;
    });
  });
  Mocha.test("forEachWithIndex", () => {
    Belt_Array.forEachWithIndex([
      "a",
      "b",
      "c"
    ], (i, x) => {
      console.log("Item " + String(i) + " is " + x);
    });
    let total = {
      contents: 0
    };
    Belt_Array.forEachWithIndex([
      10,
      11,
      12,
      13
    ], (i, x) => {
      total.contents = (total.contents + x | 0) + i | 0;
    });
  });
  Mocha.test("get", () => {
    Primitive_object.equal(Belt_Array.get([
      "a",
      "b",
      "c"
    ], 0), "a");
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], 3) === undefined;
    Belt_Array.get([
      "a",
      "b",
      "c"
    ], -1) === undefined;
  });
  Mocha.test("getBy", () => {
    Primitive_object.equal(Belt_Array.getBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 4);
    Belt_Array.getBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
  Mocha.test("getIndexBy", () => {
    Primitive_object.equal(Belt_Array.getIndexBy([
      1,
      4,
      3,
      2
    ], x => x % 2 === 0), 1);
    Belt_Array.getIndexBy([
      15,
      13,
      11
    ], x => x % 2 === 0) === undefined;
  });
  Mocha.test("joinWith", () => {
    Belt_Array.joinWith([
      0,
      1
    ], ", ", prim => prim.toString()) === "0, 1";
    Belt_Array.joinWith([], " ", prim => prim.toString()) === "";
    Belt_Array.joinWith([1], " ", prim => prim.toString()) === "1";
  });
  Mocha.test("keepMap", () => {
    Primitive_object.equal(Belt_Array.keepMap([
      1,
      2,
      3
    ], x => {
      if (x % 2 === 0) {
        return x;
      }
      
    }), [2]);
  });
  Mocha.test("keepWithIndex", () => {
    Primitive_object.equal(Belt_Array.keepWithIndex([
      1,
      2,
      3
    ], (_x, i) => i === 1), [2]);
  });
  Mocha.test("length", () => {});
  Mocha.test("makeBy", () => {
    Primitive_object.equal(Belt_Array.makeBy(5, i => i), [
      0,
      1,
      2,
      3,
      4
    ]);
    Primitive_object.equal(Belt_Array.makeBy(5, i => i * i | 0), [
      0,
      1,
      4,
      9,
      16
    ]);
  });
  Mocha.test("makeUninitialized", () => {
    let arr = new Array(5);
    Belt_Array.getExn(arr, 0) === undefined;
  });
  Mocha.test("makeUninitializedUnsafe", () => {
    let arr = new Array(5);
    console.log(Belt_Array.getExn(arr, 0));
    Belt_Array.setExn(arr, 0, "example");
    console.log(Belt_Array.getExn(arr, 0) === "example");
  });
  Mocha.test("map", () => {
    Primitive_object.equal(Belt_Array.map([
      1,
      2
    ], x => x + 1 | 0), [
      3,
      4
    ]);
  });
  Mocha.test("mapWithIndex", () => {
    Primitive_object.equal(Belt_Array.mapWithIndex([
      1,
      2,
      3
    ], (i, x) => i + x | 0), [
      1,
      3,
      5
    ]);
  });
  Mocha.test("partition", () => {
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 === 0), [
      [
        2,
        4
      ],
      [
        1,
        3,
        5
      ]
    ]);
    Primitive_object.equal(Belt_Array.partition([
      1,
      2,
      3,
      4,
      5
    ], x => x % 2 !== 0), [
      [
        1,
        3,
        5
      ],
      [
        2,
        4
      ]
    ]);
  });
  Mocha.test("range", () => {
    Primitive_object.equal(Belt_Array.range(0, 3), [
      0,
      1,
      2,
      3
    ]);
    Primitive_object.equal(Belt_Array.range(3, 0), []);
    Primitive_object.equal(Belt_Array.range(3, 3), [3]);
  });
  Mocha.test("rangeBy", () => {
    Primitive_object.equal(Belt_Array.rangeBy(0, 10, 3), [
      0,
      3,
      6,
      9
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(0, 12, 3), [
      0,
      3,
      6,
      9,
      12
    ]);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, 1), []);
    Primitive_object.equal(Belt_Array.rangeBy(33, 0, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 12, -1), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 0), []);
    Primitive_object.equal(Belt_Array.rangeBy(3, 3, 1), [3]);
  });
  Mocha.test("reduce", () => {
    Belt_Array.reduce([
      2,
      3,
      4
    ], 1, (a, b) => a + b | 0) === 10;
    Belt_Array.reduce([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "abcd";
  });
  Mocha.test("reduceReverse", () => {
    Belt_Array.reduceReverse([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b) === "dcba";
  });
  Mocha.test("reduceReverse2", () => {
    Belt_Array.reduceReverse2([
      1,
      2,
      3
    ], [
      1,
      2
    ], 0, (acc, x, y) => (acc + x | 0) + y | 0) === 6;
  });
  Mocha.test("reduceWithIndex", () => {
    Belt_Array.reduceWithIndex([
      1,
      2,
      3,
      4
    ], 0, (acc, x, i) => (acc + x | 0) + i | 0) === 16;
  });
  Mocha.test("reverse", () => {
    Primitive_object.equal(Belt_Array.reverse([
      10,
      11,
      12,
      13,
      14
    ]), [
      14,
      13,
      12,
      11,
      10
    ]);
  });
  Mocha.test("reverseInPlace", () => {
    let arr = [
      10,
      11,
      12,
      13,
      14
    ];
    Belt_Array.reverseInPlace(arr);
    Primitive_object.equal(arr, [
      14,
      13,
      12,
      11,
      10
    ]);
  });
  Mocha.test("slice", () => {
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2, 3), [
      12,
      13,
      14
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4, 3), [
      13,
      14,
      15
    ]);
    Primitive_object.equal(Belt_Array.slice([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 4, 9), [
      14,
      15,
      16
    ]);
  });
  Mocha.test("sliceToEnd", () => {
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], 2), [
      12,
      13,
      14,
      15,
      16
    ]);
    Primitive_object.equal(Belt_Array.sliceToEnd([
      10,
      11,
      12,
      13,
      14,
      15,
      16
    ], -4), [
      13,
      14,
      15,
      16
    ]);
  });
  Mocha.test("some", () => {
    Belt_Array.some([
      2,
      3,
      4
    ], x => x % 2 === 1) === true;
    Belt_Array.some([
      -1,
      -3,
      -5
    ], x => x > 0) === false;
  });
  Mocha.test("some2", () => {
    Belt_Array.some2([
      0,
      2
    ], [
      1,
      0,
      3
    ], (a, b) => a > b) === true;
    Belt_Array.some2([], [1], (x, y) => x > y) === false;
    Belt_Array.some2([
      2,
      3
    ], [
      1,
      4
    ], (x, y) => x > y) === true;
  });
  Mocha.test("truncateToLengthUnsafe", () => {
    let arr = [
      "ant",
      "bee",
      "cat",
      "dog",
      "elk"
    ];
    arr.length = 3;
    Primitive_object.equal(arr, [
      "ant",
      "bee",
      "cat"
    ]);
  });
  Mocha.test("unzip", () => {
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ]
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
    Primitive_object.equal(Belt_Array.unzip([
      [
        1,
        2
      ],
      [
        3,
        4
      ],
      [
        5,
        6
      ],
      [
        7,
        8
      ]
    ]), [
      [
        1,
        3,
        5,
        7
      ],
      [
        2,
        4,
        6,
        8
      ]
    ]);
  });
  Mocha.test("zip", () => {
    Primitive_object.equal(Belt_Array.zip([
      1,
      2
    ], [
      3,
      4,
      5
    ]), [
      [
        1,
        3
      ],
      [
        2,
        4
      ]
    ]);
  });
  Mocha.test("zipBy", () => {
    Primitive_object.equal(Belt_Array.zipBy([
      1,
      2,
      3
    ], [
      4,
      5
    ], (a, b) => (a << 1) + b | 0), [
      6,
      9
    ]);
  });
});

Mocha.describe("Pervasives", () => {
  Mocha.test("throw", () => {
    new Error("Everything is upside down.");
    console.log("Phew, sanity still rules.");
  });
});

Mocha.describe("Stdlib", () => {
  Mocha.test("Option", () => {});
  Mocha.test("assertEqual", () => {
    Stdlib.assertEqual(Stdlib_List.tailExn({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }), {
      hd: 2,
      tl: /* [] */0
    });
  });
  Mocha.test("clearInterval", () => {
    let intervalId = setInterval(() => {
      console.log("This prints in 100 ms");
    }, 100);
    setTimeout(() => {
      clearInterval(intervalId);
    }, 500);
  });
  Mocha.test("clearTimeout", () => {
    let timeoutId = setTimeout(() => {
      console.log("This prints in 2 seconds.");
    }, 2000);
    clearTimeout(timeoutId);
  });
  Mocha.test("decodeURI", () => {
    console.log(decodeURI("https://rescript-lang.org?array=%5BsomeValue%5D"));
  });
  Mocha.test("decodeURIComponent", () => {
    console.log(decodeURIComponent("array%3D%5BsomeValue%5D"));
  });
  Mocha.test("encodeURI", () => {
    console.log(encodeURI("https://rescript-lang.org?array=[someValue]"));
  });
  Mocha.test("encodeURIComponent", () => {
    console.log(encodeURIComponent("array=[someValue]"));
  });
  Mocha.test("import", () => {});
  Mocha.test("setInterval", () => {
    let intervalId = setInterval(() => {
      console.log("This prints every 200 ms.");
    }, 200);
    setTimeout(() => {
      clearInterval(intervalId);
    }, 500);
  });
  Mocha.test("setIntervalFloat", () => {
    let intervalId = setInterval(() => {
      console.log("This prints every 200 ms");
    }, 200);
    setTimeout(() => {
      clearInterval(intervalId);
    }, 500.0);
  });
  Mocha.test("setTimeout", () => {
    setTimeout(() => {
      console.log("This prints in 200 ms.");
    }, 200);
  });
  Mocha.test("setTimeoutFloat", () => {
    setTimeout(() => {
      console.log("This prints in 200 ms.");
    }, 200);
  });
});

Mocha.describe("Stdlib.Array", () => {
  Mocha.test("at", () => {
    Stdlib.assertEqual([
      "a",
      "b",
      "c"
    ].at(0), "a");
    Stdlib.assertEqual([
      "a",
      "b",
      "c"
    ].at(2), "c");
    Stdlib.assertEqual([
      "a",
      "b",
      "c"
    ].at(3), undefined);
    Stdlib.assertEqual([
      "a",
      "b",
      "c"
    ].at(-1), "c");
    Stdlib.assertEqual([
      "a",
      "b",
      "c"
    ].at(-3), "a");
    Stdlib.assertEqual([
      "a",
      "b",
      "c"
    ].at(-4), undefined);
  });
  Mocha.test("concat", () => {
    let array1 = [
      "hi",
      "hello"
    ];
    let array2 = [
      "yay",
      "wehoo"
    ];
    let someArray = array1.concat(array2);
    Stdlib.assertEqual(someArray, [
      "hi",
      "hello",
      "yay",
      "wehoo"
    ]);
  });
  Mocha.test("concatMany", () => {
    let array1 = [
      "hi",
      "hello"
    ];
    let array2 = ["yay"];
    let array3 = ["wehoo"];
    let someArray = array1.concat(array2, array3);
    console.log(someArray);
  });
  Mocha.test("copy", () => {
    let myArray = [
      1,
      2,
      3
    ];
    let copyOfMyArray = myArray.slice();
    Stdlib.assertEqual(copyOfMyArray, [
      1,
      2,
      3
    ]);
    Stdlib.assertEqual(myArray === copyOfMyArray, false);
  });
  Mocha.test("every", () => {
    let array = [
      1,
      2,
      3,
      4
    ];
    Stdlib.assertEqual(array.every(num => num <= 4), true);
    Stdlib.assertEqual(array.every(num => num === 1), false);
  });
  Mocha.test("everyWithIndex", () => {
    let array = [
      1,
      2,
      3,
      4
    ];
    Stdlib.assertEqual(array.every((num, index) => {
      if (index < 5) {
        return num <= 4;
      } else {
        return false;
      }
    }), true);
    Stdlib.assertEqual(array.every((num, index) => {
      if (index < 2) {
        return num >= 2;
      } else {
        return false;
      }
    }), false);
  });
  Mocha.test("fill", () => {
    let myArray = [
      1,
      2,
      3,
      4
    ];
    myArray.fill(9, 1, 3);
    Stdlib.assertEqual(myArray, [
      1,
      9,
      9,
      4
    ]);
  });
  Mocha.test("fillAll", () => {
    let myArray = [
      1,
      2,
      3,
      4
    ];
    myArray.fill(9);
    Stdlib.assertEqual(myArray, [
      9,
      9,
      9,
      9
    ]);
  });
  Mocha.test("fillToEnd", () => {
    let myArray = [
      1,
      2,
      3,
      4
    ];
    myArray.fill(9, 1);
    Stdlib.assertEqual(myArray, [
      1,
      9,
      9,
      9
    ]);
  });
  Mocha.test("filter", () => {
    Stdlib.assertEqual([
      1,
      2,
      3,
      4
    ].filter(num => num > 2), [
      3,
      4
    ]);
  });
  Mocha.test("filterMap", () => {
    Stdlib.assertEqual(Stdlib_Array.filterMap([
      "Hello",
      "Hi",
      "Good bye"
    ], item => {
      if (item === "Hello") {
        return item.length;
      }
      
    }), [5]);
    Stdlib.assertEqual(Stdlib_Array.filterMap([
      1,
      2,
      3,
      4,
      5,
      6
    ], n => {
      if (n % 2 === 0) {
        return n * n | 0;
      }
      
    }), [
      4,
      16,
      36
    ]);
    Stdlib.assertEqual(Stdlib_Array.filterMap([
      1,
      2,
      3,
      4,
      5,
      6
    ], param => {}), []);
    Stdlib.assertEqual(Stdlib_Array.filterMap([], n => {
      if (n % 2 === 0) {
        return n * n | 0;
      }
      
    }), []);
  });
  Mocha.test("filterWithIndex", () => {
    Stdlib.assertEqual([
      1,
      2,
      3,
      4
    ].filter((num, index) => {
      if (index === 0) {
        return true;
      } else {
        return num === 2;
      }
    }), [
      1,
      2
    ]);
  });
  Mocha.test("find", () => {
    let array = [
      "ReScript",
      "TypeScript",
      "JavaScript"
    ];
    Stdlib.assertEqual(array.find(item => item === "ReScript"), "ReScript");
  });
  Mocha.test("findIndex", () => {
    let array = [
      "ReScript",
      "JavaScript"
    ];
    Stdlib.assertEqual(array.findIndex(item => item === "ReScript"), 0);
    Stdlib.assertEqual(array.findIndex(item => item === "TypeScript"), -1);
  });
  Mocha.test("findIndexOpt", () => {
    let array = [
      "ReScript",
      "TypeScript",
      "JavaScript"
    ];
    Stdlib.assertEqual(Stdlib_Array.findIndexOpt(array, item => item === "ReScript"), 0);
  });
  Mocha.test("findIndexWithIndex", () => {
    let array = [
      "ReScript",
      "JavaScript"
    ];
    let isReScriptFirst = array.findIndex((item, index) => {
      if (index === 0) {
        return item === "ReScript";
      } else {
        return false;
      }
    });
    let isTypeScriptFirst = array.findIndex((item, index) => {
      if (index === 0) {
        return item === "TypeScript";
      } else {
        return false;
      }
    });
    Stdlib.assertEqual(isReScriptFirst, 0);
    Stdlib.assertEqual(isTypeScriptFirst, -1);
  });
  Mocha.test("findMap", () => {
    Stdlib.assertEqual(Stdlib_Array.findMap([
      1,
      2,
      3
    ], n => {
      if (n % 2 === 0) {
        return n - 2 | 0;
      }
      
    }), 0);
    Stdlib.assertEqual(Stdlib_Array.findMap([
      1,
      2,
      3,
      4,
      5,
      6
    ], n => {
      if (n % 2 === 0) {
        return n - 8 | 0;
      }
      
    }), -6);
    Stdlib.assertEqual(Stdlib_Array.findMap([
      1,
      2,
      3,
      4,
      5,
      6
    ], param => {}), undefined);
    Stdlib.assertEqual(Stdlib_Array.findMap([], n => {
      if (n % 2 === 0) {
        return n * n | 0;
      }
      
    }), undefined);
  });
  Mocha.test("findWithIndex", () => {
    let array = [
      "TypeScript",
      "JavaScript",
      "ReScript"
    ];
    Stdlib.assertEqual(array.find((item, index) => {
      if (index > 1) {
        return item === "ReScript";
      } else {
        return false;
      }
    }), "ReScript");
  });
  Mocha.test("flat", () => {
    Stdlib.assertEqual([
      [1],
      [2],
      [
        3,
        4
      ]
    ].flat(), [
      1,
      2,
      3,
      4
    ]);
  });
  Mocha.test("flatMap", () => {
    let array = [
      "ReScript",
      "TypeScript",
      "JavaScript"
    ];
    Stdlib.assertEqual(array.flatMap(item => {
      switch (item) {
        case "ReScript" :
          return [
            1,
            2,
            3
          ];
        case "TypeScript" :
          return [
            4,
            5,
            6
          ];
        case "JavaScript" :
          return [
            7,
            8,
            9
          ];
      }
    }), [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ]);
  });
  Mocha.test("flatMapWithIndex", () => {
    let array = [
      "ReScript",
      "TypeScript",
      "JavaScript"
    ];
    Stdlib.assertEqual(array.flatMap((item, index) => {
      switch (item) {
        case "ReScript" :
          return [index];
        case "TypeScript" :
          return [
            index,
            index + 1 | 0
          ];
        case "JavaScript" :
          return [
            index,
            index + 1 | 0,
            index + 2 | 0
          ];
      }
    }), [
      0,
      1,
      2,
      2,
      3,
      4
    ]);
  });
  Mocha.test("forEach", () => {
    let array = [
      "Hello",
      "Hi",
      "Good bye"
    ];
    array.forEach(item => {
      console.log(item);
    });
  });
  Mocha.test("forEachWithIndex", () => {
    let array = [
      "Hello",
      "Hi",
      "Good bye"
    ];
    array.forEach((item, index) => {
      console.log("At item " + index.toString() + ": " + item);
    });
  });
  Mocha.test("fromInitializer", () => {
    Stdlib.assertEqual(Stdlib_Array.fromInitializer(3, i => i + 3 | 0), [
      3,
      4,
      5
    ]);
    Stdlib.assertEqual(Stdlib_Array.fromInitializer(7, i => i + 3 | 0), [
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ]);
  });
  Mocha.test("fromIterator", () => {
    Stdlib.assertEqual(Array.from(new Map([
      [
        "foo",
        1
      ],
      [
        "bar",
        2
      ]
    ]).values()), [
      1,
      2
    ]);
  });
  Mocha.test("get", () => {
    let array = [
      "Hello",
      "Hi",
      "Good bye"
    ];
    Stdlib.assertEqual(array[0], "Hello");
    Stdlib.assertEqual(array[3], undefined);
  });
  Mocha.test("getUnsafe", () => {
    let array = [
      1,
      2,
      3
    ];
    for (let index = 0, index_finish = array.length; index < index_finish; ++index) {
      let value = array[index];
      console.log(value);
    }
  });
  Mocha.test("includes", () => {
    Stdlib.assertEqual([
      1,
      2
    ].includes(1), true);
    Stdlib.assertEqual([
      1,
      2
    ].includes(3), false);
    Stdlib.assertEqual([{
        language: "ReScript"
      }].includes({
      language: "ReScript"
    }), false);
  });
  Mocha.test("indexOf", () => {
    Stdlib.assertEqual([
      1,
      2
    ].indexOf(2), 1);
    Stdlib.assertEqual([
      1,
      2
    ].indexOf(3), -1);
    Stdlib.assertEqual([{
        language: "ReScript"
      }].indexOf({
      language: "ReScript"
    }), -1);
  });
  Mocha.test("indexOfOpt", () => {
    Stdlib.assertEqual(Stdlib_Array.indexOfOpt([
      1,
      2
    ], 2), 1);
    Stdlib.assertEqual(Stdlib_Array.indexOfOpt([
      1,
      2
    ], 3), undefined);
    Stdlib.assertEqual(Stdlib_Array.indexOfOpt([{
        language: "ReScript"
      }], {
      language: "ReScript"
    }), undefined);
  });
  Mocha.test("join", () => {
    Stdlib.assertEqual([
      "One",
      "Two",
      "Three"
    ].join(" -- "), "One -- Two -- Three");
  });
  Mocha.test("joinUnsafe", () => {
    Stdlib.assertEqual([
      1,
      2,
      3
    ].join(" -- "), "1 -- 2 -- 3");
  });
  Mocha.test("joinWith", () => {
    Stdlib.assertEqual([
      "One",
      "Two",
      "Three"
    ].join(" -- "), "One -- Two -- Three");
  });
  Mocha.test("joinWithUnsafe", () => {
    Stdlib.assertEqual([
      1,
      2,
      3
    ].join(" -- "), "1 -- 2 -- 3");
  });
  Mocha.test("keepSome", () => {
    Stdlib.assertEqual(Stdlib_Array.keepSome([
      1,
      undefined,
      3
    ]), [
      1,
      3
    ]);
    Stdlib.assertEqual(Stdlib_Array.keepSome([
      1,
      2,
      3
    ]), [
      1,
      2,
      3
    ]);
    Stdlib.assertEqual(Stdlib_Array.keepSome([
      undefined,
      undefined,
      undefined
    ]), []);
    Stdlib.assertEqual(Stdlib_Array.keepSome([]), []);
  });
  Mocha.test("last", () => {
    Stdlib.assertEqual(Stdlib_Array.last([
      "Hello",
      "Hi",
      "Good bye"
    ]), "Good bye");
    Stdlib.assertEqual(Stdlib_Array.last([]), undefined);
  });
  Mocha.test("length", () => {
    let someArray = [
      "hi",
      "hello"
    ];
    Stdlib.assertEqual(someArray.length, 2);
  });
  Mocha.test("make", () => {
    Stdlib.assertEqual(Stdlib_Array.make(3, "apple"), [
      "apple",
      "apple",
      "apple"
    ]);
    Stdlib.assertEqual(Stdlib_Array.make(6, 7), [
      7,
      7,
      7,
      7,
      7,
      7
    ]);
  });
  Mocha.test("map", () => {
    let array = [
      "Hello",
      "Hi",
      "Good bye"
    ];
    let mappedArray = array.map(greeting => greeting + " to you");
    Stdlib.assertEqual(mappedArray, [
      "Hello to you",
      "Hi to you",
      "Good bye to you"
    ]);
  });
  Mocha.test("mapWithIndex", () => {
    let array = [
      "Hello",
      "Hi",
      "Good bye"
    ];
    let mappedArray = array.map((greeting, index) => greeting + " at position " + index.toString());
    Stdlib.assertEqual(mappedArray, [
      "Hello at position 0",
      "Hi at position 1",
      "Good bye at position 2"
    ]);
  });
  Mocha.test("pop", () => {
    let someArray = [
      "hi",
      "hello"
    ];
    Stdlib.assertEqual(someArray.pop(), "hello");
    Stdlib.assertEqual(someArray, ["hi"]);
  });
  Mocha.test("push", () => {
    let someArray = [
      "hi",
      "hello"
    ];
    someArray.push("yay");
    Stdlib.assertEqual(someArray, [
      "hi",
      "hello",
      "yay"
    ]);
  });
  Mocha.test("pushMany", () => {
    let someArray = [
      "hi",
      "hello"
    ];
    someArray.push("yay", "wehoo");
    Stdlib.assertEqual(someArray, [
      "hi",
      "hello",
      "yay",
      "wehoo"
    ]);
  });
  Mocha.test("reduce", () => {
    Stdlib.assertEqual(Stdlib_Array.reduce([
      2,
      3,
      4
    ], 1, (a, b) => a + b | 0), 10);
    Stdlib.assertEqual(Stdlib_Array.reduce([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b), "abcd");
    Stdlib.assertEqual(Stdlib_Array.reduce([
      1,
      2,
      3
    ], /* [] */0, Stdlib_List.add), {
      hd: 3,
      tl: {
        hd: 2,
        tl: {
          hd: 1,
          tl: /* [] */0
        }
      }
    });
    Stdlib.assertEqual(Stdlib_Array.reduce([], /* [] */0, Stdlib_List.add), /* [] */0);
  });
  Mocha.test("reduceRight", () => {
    Stdlib.assertEqual(Stdlib_Array.reduceRight([
      "a",
      "b",
      "c",
      "d"
    ], "", (a, b) => a + b), "dcba");
    Stdlib.assertEqual(Stdlib_Array.reduceRight([
      1,
      2,
      3
    ], /* [] */0, Stdlib_List.add), {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
    Stdlib.assertEqual(Stdlib_Array.reduceRight([], /* [] */0, Stdlib_List.add), /* [] */0);
  });
  Mocha.test("reduceRightWithIndex", () => {
    Stdlib.assertEqual(Stdlib_Array.reduceRightWithIndex([
      1,
      2,
      3,
      4
    ], 0, (acc, x, i) => (acc + x | 0) + i | 0), 16);
    Stdlib.assertEqual(Stdlib_Array.reduceRightWithIndex([], /* [] */0, (acc, v, i) => ({
      hd: v + i | 0,
      tl: acc
    })), /* [] */0);
  });
  Mocha.test("reduceWithIndex", () => {
    Stdlib.assertEqual(Stdlib_Array.reduceWithIndex([
      1,
      2,
      3,
      4
    ], 0, (acc, x, i) => (acc + x | 0) + i | 0), 16);
    Stdlib.assertEqual(Stdlib_Array.reduceWithIndex([
      1,
      2,
      3
    ], /* [] */0, (acc, v, i) => ({
      hd: v + i | 0,
      tl: acc
    })), {
      hd: 5,
      tl: {
        hd: 3,
        tl: {
          hd: 1,
          tl: /* [] */0
        }
      }
    });
    Stdlib.assertEqual(Stdlib_Array.reduceWithIndex([], /* [] */0, (acc, v, i) => ({
      hd: v + i | 0,
      tl: acc
    })), /* [] */0);
  });
  Mocha.test("removeInPlace", () => {
    let array = [];
    array.splice(0, 1);
    Stdlib.assertEqual(array, []);
    let array2 = [
      "Hello",
      "Hi",
      "Good bye"
    ];
    array2.splice(1, 1);
    Stdlib.assertEqual(array2, [
      "Hello",
      "Good bye"
    ]);
  });
  Mocha.test("reverse", () => {
    let someArray = [
      "hi",
      "hello"
    ];
    someArray.reverse();
    Stdlib.assertEqual(someArray, [
      "hello",
      "hi"
    ]);
  });
  Mocha.test("set", () => {
    let array = [
      "Hello",
      "Hi",
      "Good bye"
    ];
    array[1] = "Hello";
    Stdlib.assertEqual(array[1], "Hello");
  });
  Mocha.test("setUnsafe", () => {
    let array = [
      "Hello",
      "Hi",
      "Good bye"
    ];
    array[1] = "Hello";
    Stdlib.assertEqual(array[1], "Hello");
  });
  Mocha.test("shift", () => {
    let someArray = [
      "hi",
      "hello"
    ];
    Stdlib.assertEqual(someArray.shift(), "hi");
    Stdlib.assertEqual(someArray, ["hello"]);
  });
  Mocha.test("shuffle", () => {
    let array = [
      "Hello",
      "Hi",
      "Good bye"
    ];
    Stdlib_Array.shuffle(array);
    console.log(array);
    let array2 = [
      1,
      2,
      3
    ];
    Stdlib_Array.shuffle(array2);
    Stdlib.assertEqual(array2.length, 3);
  });
  Mocha.test("slice", () => {
    Stdlib.assertEqual([
      1,
      2,
      3,
      4
    ].slice(1, 3), [
      2,
      3
    ]);
  });
  Mocha.test("sliceToEnd", () => {
    Stdlib.assertEqual([
      1,
      2,
      3,
      4
    ].slice(1), [
      2,
      3,
      4
    ]);
  });
  Mocha.test("some", () => {
    let array = [
      "Hello",
      "Hi",
      "Good bye"
    ];
    Stdlib.assertEqual(array.some(greeting => greeting === "Hello"), true);
  });
  Mocha.test("someWithIndex", () => {
    let array = [
      "Hello",
      "Hi",
      "Good bye"
    ];
    Stdlib.assertEqual(array.some((greeting, index) => {
      if (greeting === "Hello") {
        return index === 0;
      } else {
        return false;
      }
    }), true);
  });
  Mocha.test("sort", () => {
    let array = [
      3,
      2,
      1
    ];
    array.sort((a, b) => a - b | 0);
    Stdlib.assertEqual(array, [
      1,
      2,
      3
    ]);
  });
  Mocha.test("toReversed", () => {
    let someArray = [
      "hi",
      "hello"
    ];
    let reversed = someArray.toReversed();
    Stdlib.assertEqual(reversed, [
      "hello",
      "hi"
    ]);
    Stdlib.assertEqual(someArray, [
      "hi",
      "hello"
    ]);
  });
  Mocha.test("toShuffled", () => {
    let array = [
      "Hello",
      "Hi",
      "Good bye"
    ];
    let shuffledArray = Stdlib_Array.toShuffled(array);
    console.log(shuffledArray);
    Stdlib.assertEqual(Stdlib_Array.toShuffled([
      1,
      2,
      3
    ]).length, 3);
  });
  Mocha.test("toSorted", () => {
    let someArray = [
      3,
      2,
      1
    ];
    Stdlib.assertEqual(someArray.toSorted(Primitive_int.compare), [
      1,
      2,
      3
    ]);
    Stdlib.assertEqual(someArray, [
      3,
      2,
      1
    ]);
  });
  Mocha.test("toString", () => {
    Stdlib.assertEqual([
      1,
      2,
      3,
      4
    ].toString(), "1,2,3,4");
  });
  Mocha.test("unsafe_get", () => {
    let array = [
      1,
      2,
      3
    ];
    for (let index = 0, index_finish = array.length; index < index_finish; ++index) {
      let value = array[index];
      console.log(value);
    }
  });
  Mocha.test("unshift", () => {
    let someArray = [
      "hi",
      "hello"
    ];
    someArray.unshift("yay");
    Stdlib.assertEqual(someArray, [
      "yay",
      "hi",
      "hello"
    ]);
  });
  Mocha.test("unshiftMany", () => {
    let someArray = [
      "hi",
      "hello"
    ];
    someArray.unshift("yay", "wehoo");
    Stdlib.assertEqual(someArray, [
      "yay",
      "wehoo",
      "hi",
      "hello"
    ]);
  });
});

Mocha.describe("Stdlib.AsyncIterator", () => {
  Mocha.test("done", () => {
    let context = {
      contents: 0
    };
    Stdlib_AsyncIterator.make(async () => {
      let currentValue = context.contents;
      context.contents = currentValue + 1 | 0;
      if (currentValue >= 3) {
        return Stdlib_AsyncIterator.done(undefined);
      } else {
        return Stdlib_AsyncIterator.value(currentValue);
      }
    });
  });
  Mocha.test("forEach", () => {
    let asyncIterator = ((() => {
    var map1 = new Map();

    map1.set('first', '1');
    map1.set('second', '2');

    var iterator1 = map1[Symbol.iterator]();
    return iterator1;
  })());
    let main = async () => await Stdlib_AsyncIterator.forEach(asyncIterator, v => {
      if (v !== undefined && v[0] === "second") {
        return Stdlib.assertEqual(v[1], "2");
      }
      
    });
    main();
  });
  Mocha.test("make", () => {
    let context = {
      contents: 0
    };
    let asyncIterator = Stdlib_AsyncIterator.make(async () => {
      let currentValue = context.contents;
      context.contents = currentValue + 1 | 0;
      return {
        done: currentValue >= 3,
        value: currentValue
      };
    });
    let main = async () => await Stdlib_AsyncIterator.forEach(asyncIterator, value => {
      if (value !== undefined) {
        console.log(value);
        return;
      }
      
    });
    main();
  });
  Mocha.test("next", () => {
    let asyncIterator = ((() => {
    var map1 = new Map();

    map1.set('first', '1');
    map1.set('second', '2');

    var iterator1 = map1[Symbol.iterator]();
    return iterator1;
  })());
    let processMyAsyncIterator = async () => {
      let $$break = false;
      while (!$$break) {
        let match = await asyncIterator.next();
        let done = match.done;
        $$break = done;
        if (done) {
          Stdlib.assertEqual(Stdlib_Option.isNone(match.value), true);
        }
        
      };
    };
    processMyAsyncIterator();
  });
  Mocha.test("value", () => {
    let context = {
      contents: 0
    };
    Stdlib_AsyncIterator.make(async () => {
      let currentValue = context.contents;
      context.contents = currentValue + 1 | 0;
      if (currentValue >= 3) {
        return Stdlib_AsyncIterator.done(undefined);
      } else {
        return Stdlib_AsyncIterator.value(currentValue);
      }
    });
  });
});

Mocha.describe("Stdlib.BigInt", () => {
  Mocha.test("fromStringExn", () => {
    Stdlib.assertEqual(BigInt("123"), 123n);
    Stdlib.assertEqual(BigInt(""), 0n);
    Stdlib.assertEqual(BigInt("0x11"), 17n);
    Stdlib.assertEqual(BigInt("0b11"), 3n);
    Stdlib.assertEqual(BigInt("0o11"), 9n);
    let exit = 0;
    let _bigInt;
    try {
      _bigInt = BigInt("a");
      exit = 1;
    } catch (raw__error) {
      let _error = Primitive_exceptions.internalToException(raw__error);
      if (_error.RE_EXN_ID !== Stdlib_Exn.$$Error) {
        throw _error;
      }
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          9180,
          13
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("toLocaleString", () => {
    Stdlib.assertEqual((123n).toString(), "123");
  });
  Mocha.test("toString", () => {
    Stdlib.assertEqual((123n).toString(), "123");
  });
});

Mocha.describe("Stdlib.Bool", () => {
  Mocha.test("fromString", () => {
    Stdlib.assertEqual(Stdlib_Bool.fromString("true"), true);
    Stdlib.assertEqual(Stdlib_Bool.fromString("false"), false);
    Stdlib.assertEqual(Stdlib_Bool.fromString("notAValidBoolean"), undefined);
  });
  Mocha.test("fromStringExn", () => {
    Stdlib.assertEqual(Stdlib_Bool.fromStringExn("true"), true);
    Stdlib.assertEqual(Stdlib_Bool.fromStringExn("false"), false);
    let exit = 0;
    let val;
    try {
      val = Stdlib_Bool.fromStringExn("notAValidBoolean");
      exit = 1;
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID !== "Invalid_argument") {
        throw exn;
      }
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          9213,
          7
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("toString", () => {
    Stdlib.assertEqual(Stdlib_Bool.toString(true), "true");
    Stdlib.assertEqual(Stdlib_Bool.toString(false), "false");
  });
});

Mocha.describe("Stdlib.Char", () => {
  Mocha.test("toLowerCaseAscii", () => {
    Stdlib.assertEqual(Stdlib_Char.toLowerCaseAscii(/* 'A' */65), /* 'a' */97);
    Stdlib.assertEqual(Stdlib_Char.toLowerCaseAscii(/* 'Z' */90), /* 'z' */122);
    Stdlib.assertEqual(Stdlib_Char.toLowerCaseAscii(/* 'a' */97), /* 'a' */97);
  });
  Mocha.test("toUpperCaseAscii", () => {
    Stdlib.assertEqual(Stdlib_Char.toUpperCaseAscii(/* 'a' */97), /* 'A' */65);
    Stdlib.assertEqual(Stdlib_Char.toUpperCaseAscii(/* 'z' */122), /* 'Z' */90);
    Stdlib.assertEqual(Stdlib_Char.toUpperCaseAscii(/* 'A' */65), /* 'A' */65);
  });
});

Mocha.describe("Stdlib.Console", () => {
  Mocha.test("assert2", () => {
    console.assert(false, "Hello", "World");
    console.assert(true, [
      1,
      2,
      3
    ], /* '4' */52);
  });
  Mocha.test("assert3", () => {
    console.assert(false, "Hello", "World", "ReScript");
    console.assert(true, "One", 2, 3);
  });
  Mocha.test("assert4", () => {
    console.assert(false, "Hello", "World", "ReScript", "!!!");
    console.assert(true, [
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar");
  });
  Mocha.test("assert5", () => {
    console.assert(false, "Hello", "World", "JS", /* '!' */33, /* '!' */33);
    console.assert(true, [
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar", {
      name: "ReScript"
    });
  });
  Mocha.test("assert6", () => {
    console.assert(false, "Hello", "World", "JS", /* '!' */33, /* '!' */33, /* '?' */63);
    console.assert(true, [
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar", {
      name: "ReScript"
    }, 42);
  });
  Mocha.test("assertMany", () => {
    console.assert(false, "Hello", "World");
    console.assert(true, 1, 2, 3);
  });
  Mocha.test("assert_", () => {
    console.assert(false, "Hello World!");
    console.assert(true, "The answer");
  });
  Mocha.test("clear", () => {
    console.clear();
  });
  Mocha.test("count", () => {
    console.count("rescript");
  });
  Mocha.test("countReset", () => {
    console.countReset("rescript");
  });
  Mocha.test("debug", () => {
    console.debug("Hello");
    let obj = {
      name: "ReScript",
      version: 10
    };
    console.debug(obj);
  });
  Mocha.test("debug2", () => {
    console.debug("Hello", "World");
    console.debug([
      1,
      2,
      3
    ], /* '4' */52);
  });
  Mocha.test("debug3", () => {
    console.debug("Hello", "World", "ReScript");
    console.debug("One", 2, 3);
  });
  Mocha.test("debug4", () => {
    console.debug("Hello", "World", "ReScript", "!!!");
    console.debug([
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar");
  });
  Mocha.test("debug5", () => {
    console.debug("Hello", "World", "JS", /* '!' */33, /* '!' */33);
    console.debug([
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar", {
      name: "ReScript"
    });
  });
  Mocha.test("debug6", () => {
    console.debug("Hello", "World", "JS", /* '!' */33, /* '!' */33, /* '?' */63);
    console.debug([
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar", {
      name: "ReScript"
    }, 42);
  });
  Mocha.test("debugMany", () => {
    console.debug("Hello", "World");
    console.debug(1, 2, 3);
  });
  Mocha.test("dir", () => {
    console.dir({
      language: "rescript",
      version: "10.1.2"
    });
  });
  Mocha.test("error", () => {
    console.error("error message");
    console.error([
      "error",
      "invalid value"
    ]);
  });
  Mocha.test("error2", () => {
    console.error("Error", "here");
    console.error([
      "log",
      "error"
    ], "message");
  });
  Mocha.test("error3", () => {
    console.error("Hello", "World", "!!!");
    console.error("first", "second", "third");
  });
  Mocha.test("error4", () => {
    console.error("Hello", "World", "ReScript", /* '!' */33);
    console.error("first", "second", "third", "fourth");
  });
  Mocha.test("error5", () => {
    console.error(/* 'e' */101, /* 'r' */114, /* 'r' */114, /* 'o' */111, /* 'r' */114);
    console.error(1, "second", "third", "fourth", /* 'c' */99);
  });
  Mocha.test("error6", () => {
    console.error("Hello", "World", "from", "JS", "!!!", /* '!' */33);
    console.error([
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar", {
      name: "ReScript"
    }, 42);
  });
  Mocha.test("errorMany", () => {
    console.error("Hello", "World");
    console.error(1, 2, 3);
  });
  Mocha.test("group", () => {
    console.group("first group");
    console.group("second group");
    console.log("a message on the second level");
    console.groupEnd();
    console.log("a message message on the first level");
    console.groupEnd();
  });
  Mocha.test("info", () => {
    console.info("Information");
    console.info([
      "Hello",
      "JS"
    ]);
  });
  Mocha.test("info2", () => {
    console.info("Info", "failed to download");
    console.info("info", {
      name: "ReScript"
    });
  });
  Mocha.test("info3", () => {
    console.info("Hello", "World", "ReScript");
    console.info([
      1,
      2,
      3
    ], 4, 5);
  });
  Mocha.test("info4", () => {
    console.info("Hello", "World", "ReScript", /* '!' */33);
    console.info([
      1,
      2,
      3
    ], 4, 5, "lastinfo");
  });
  Mocha.test("info5", () => {
    console.info("Hello", "World", "from", "JS", "!!!");
    console.info([
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar", {
      name: "ReScript"
    });
  });
  Mocha.test("info6", () => {
    console.info("Hello", "World", "from", "JS", "!!!", /* '!' */33);
    console.info([
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar", {
      name: "ReScript"
    }, 42);
  });
  Mocha.test("infoMany", () => {
    console.info("Hello", "World");
    console.info(1, 2, 3);
  });
  Mocha.test("log", () => {
    console.log("Hello");
    let obj = {
      name: "ReScript",
      version: 10
    };
    console.log(obj);
  });
  Mocha.test("log2", () => {
    console.log("Hello", "World");
    console.log([
      1,
      2,
      3
    ], /* '4' */52);
  });
  Mocha.test("log3", () => {
    console.log("Hello", "World", "ReScript");
    console.log("One", 2, 3);
  });
  Mocha.test("log4", () => {
    console.log("Hello", "World", "ReScript", "!!!");
    console.log([
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar");
  });
  Mocha.test("log5", () => {
    console.log("Hello", "World", "JS", /* '!' */33, /* '!' */33);
    console.log([
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar", {
      name: "ReScript"
    });
  });
  Mocha.test("log6", () => {
    console.log("Hello", "World", "JS", /* '!' */33, /* '!' */33, /* '?' */63);
    console.log([
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar", {
      name: "ReScript"
    }, 42);
  });
  Mocha.test("logMany", () => {
    console.log("Hello", "World");
    console.log(1, 2, 3);
  });
  Mocha.test("table", () => {
    console.table({
      language: "rescript",
      version: "10.1.2"
    });
  });
  Mocha.test("time", () => {
    console.time("for_time");
    for (let x = 3; x >= 1; --x) {
      console.log(x);
      console.timeLog("for_time");
    }
    console.timeEnd("for_time");
  });
  Mocha.test("timeEnd", () => {
    console.time("for_time");
    for (let x = 3; x >= 1; --x) {
      console.log(x);
      console.timeLog("for_time");
    }
    console.timeEnd("for_time");
  });
  Mocha.test("timeLog", () => {
    console.time("for_time");
    for (let x = 3; x >= 1; --x) {
      console.log(x);
      console.timeLog("for_time");
    }
    console.timeEnd("for_time");
  });
  Mocha.test("trace", () => {
    console.trace();
  });
  Mocha.test("warn", () => {
    console.warn("Warning");
    console.warn([
      "Warning",
      "invalid number"
    ]);
  });
  Mocha.test("warn2", () => {
    console.warn("Hello", "World");
    console.warn([
      1,
      2,
      3
    ], 4);
  });
  Mocha.test("warn3", () => {
    console.warn("Hello", "World", "ReScript");
    console.warn([
      1,
      2,
      3
    ], 4, 5);
  });
  Mocha.test("warn4", () => {
    console.warn("Hello", "World", "ReScript", "!!!");
    console.warn("first", "second", "third", "fourth");
  });
  Mocha.test("warn5", () => {
    console.warn("Hello", "World", "from", "JS", "!!!");
    console.warn([
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar", {
      name: "ReScript"
    });
  });
  Mocha.test("warn6", () => {
    console.warn("Hello", "World", "from", "JS", "!!!", /* '!' */33);
    console.warn([
      1,
      2
    ], [
      3,
      4
    ], [
      5,
      6
    ], "polyvar", {
      name: "ReScript"
    }, 42);
  });
  Mocha.test("warnMany", () => {
    console.warn("Hello", "World");
    console.warn(1, 2, 3);
  });
});

Mocha.describe("Stdlib.Date.UTC", () => {
  Mocha.test("makeWithYM", () => {
    Date.UTC(2023, 0);
    Date.UTC(2023, 11);
    Date.UTC(2023, 12);
    Date.UTC(2023, -1);
  });
  Mocha.test("makeWithYMD", () => {
    Date.UTC(2023, 1, 20);
    Date.UTC(2023, 1, -1);
    Date.UTC(2023, 1, 29);
  });
  Mocha.test("makeWithYMDH", () => {
    Date.UTC(2023, 1, 20, 16);
    Date.UTC(2023, 1, 20, 24);
    Date.UTC(2023, 1, 20, -1);
  });
  Mocha.test("makeWithYMDHM", () => {
    Date.UTC(2023, 1, 20, 16, 40);
    Date.UTC(2023, 1, 20, 16, 60);
    Date.UTC(2023, 1, 20, 16, -1);
  });
  Mocha.test("makeWithYMDHMS", () => {
    Date.UTC(2023, 1, 20, 16, 40, 0);
    Date.UTC(2023, 1, 20, 16, 40, 60);
    Date.UTC(2023, 1, 20, 16, 40, -1);
  });
  Mocha.test("makeWithYMDHMSM", () => {
    console.log(Date.UTC(2023, 1, 20, 16, 40, 0, 0));
    console.log(Date.UTC(2023, 1, 20, 16, 40, 0, 1000));
    console.log(Date.UTC(2023, 1, 20, 16, 40, 0, -1));
  });
});

Mocha.describe("Stdlib.Date", () => {
  Mocha.test("fromString", () => {
    new Date("2023");
    new Date("2023-02-20");
    new Date("2023-02-20T16:40:00.00Z");
    new Date("");
    new Date("").getTime();
  });
  Mocha.test("fromTime", () => {
    new Date(0.0);
    new Date(-86400000.0);
    new Date(86400000.0);
  });
  Mocha.test("getDate", () => {
    new Date("2023-02-20T16:40:00.00").getDate();
  });
  Mocha.test("getDay", () => {
    new Date("2023-02-20T16:40:00.00").getDay();
  });
  Mocha.test("getFullYear", () => {
    new Date("2023-02-20").getFullYear();
  });
  Mocha.test("getHours", () => {
    new Date("2023-02-20T16:40:00.00").getHours();
  });
  Mocha.test("getMilliseconds", () => {
    new Date("2023-02-20T16:40:00.00").getMilliseconds();
  });
  Mocha.test("getMinutes", () => {
    new Date("2023-02-20T16:40:00.00").getMinutes();
  });
  Mocha.test("getMonth", () => {
    new Date("2023-01-01").getMonth();
  });
  Mocha.test("getSeconds", () => {
    new Date("2023-02-20T16:40:00.00").getSeconds();
  });
  Mocha.test("getTime", () => {
    new Date("2023-02-20").getTime();
  });
  Mocha.test("getTimezoneOffset", () => {
    new Date("2023-01-01").getTimezoneOffset();
    new Date("2023-06-01").getTimezoneOffset();
  });
  Mocha.test("getUTCDate", () => {
    new Date("2023-01-01T00:00:00.00+01:00").getUTCDate();
  });
  Mocha.test("getUTCDay", () => {
    new Date("2023-01-01T00:00:00.00+01:00").getUTCDay();
  });
  Mocha.test("getUTCFullYear", () => {
    new Date("2023-01-01T00:00:00.00+01:00").getUTCFullYear();
  });
  Mocha.test("getUTCHours", () => {
    new Date("2023-01-01T00:00:00.00+01:00").getUTCHours();
  });
  Mocha.test("getUTCMilliseconds", () => {
    new Date("2023-01-01T00:00:00.00+01:00").getUTCMilliseconds();
  });
  Mocha.test("getUTCMinutes", () => {
    new Date("2023-01-01T00:00:00.00+01:00").getUTCMinutes();
  });
  Mocha.test("getUTCMonth", () => {
    new Date("2023-01-01T00:00:00.00+01:00").getUTCMonth();
  });
  Mocha.test("getUTCSeconds", () => {
    new Date("2023-01-01T00:00:00.00+01:00").getUTCSeconds();
  });
  Mocha.test("make", () => {
    new Date();
  });
  Mocha.test("makeWithYM", () => {
    new Date(2023, 0);
    new Date(2023, 11);
    new Date(2023, 12);
    new Date(2023, -1);
  });
  Mocha.test("makeWithYMD", () => {
    new Date(2023, 1, 20);
    new Date(2023, 1, -1);
    new Date(2023, 1, 29);
  });
  Mocha.test("makeWithYMDH", () => {
    new Date(2023, 1, 20, 16);
    new Date(2023, 1, 20, 24);
    new Date(2023, 1, 20, -1);
  });
  Mocha.test("makeWithYMDHM", () => {
    new Date(2023, 1, 20, 16, 40);
    new Date(2023, 1, 20, 16, 60);
    new Date(2023, 1, 20, 16, -1);
  });
  Mocha.test("makeWithYMDHMS", () => {
    new Date(2023, 1, 20, 16, 40, 0);
    new Date(2023, 1, 20, 16, 40, 60);
    new Date(2023, 1, 20, 16, 40, -1);
  });
  Mocha.test("makeWithYMDHMSM", () => {
    new Date(2023, 1, 20, 16, 40, 0, 0);
    new Date(2023, 1, 20, 16, 40, 0, 1000);
    new Date(2023, 1, 20, 16, 40, 0, -1);
  });
  Mocha.test("setDate", () => {
    new Date("2023-02-20T16:40:00.00").setDate(1);
  });
  Mocha.test("setFullYear", () => {
    new Date("2023-02-20T16:40:00.00").setFullYear(2024);
  });
  Mocha.test("setFullYearM", () => {
    new Date("2023-02-20T16:40:00.00").setFullYear(2024, 0);
  });
  Mocha.test("setFullYearMD", () => {
    new Date("2023-02-20T16:40:00.00").setFullYear(2024, 0, 1);
  });
  Mocha.test("setHours", () => {
    new Date("2023-02-20T16:40:00.00").setHours(0);
  });
  Mocha.test("setHoursM", () => {
    new Date("2023-02-20T16:40:00.00").setHours(0, 0);
  });
  Mocha.test("setHoursMS", () => {
    new Date("2023-02-20T16:40:00.00").setHours(0, 0, 0);
  });
  Mocha.test("setHoursMSMs", () => {
    new Date("2023-02-20T16:40:00.00").setHours(0, 0, 0, 0);
  });
  Mocha.test("setMilliseconds", () => {
    new Date("2023-02-20T16:40:00.00").setMilliseconds(0);
  });
  Mocha.test("setMinutes", () => {
    new Date("2023-02-20T16:40:00.00").setMinutes(0);
  });
  Mocha.test("setMinutesS", () => {
    new Date("2023-02-20T16:40:00.00").setMinutes(0, 0);
  });
  Mocha.test("setMinutesSMs", () => {
    new Date("2023-02-20T16:40:00.00").setMinutes(0, 0, 0);
  });
  Mocha.test("setMonth", () => {
    new Date("2023-02-20T16:40:00.00").setMonth(0);
  });
  Mocha.test("setSeconds", () => {
    new Date("2023-02-20T16:40:00.00").setSeconds(0);
  });
  Mocha.test("setSecondsMs", () => {
    new Date("2023-02-20T16:40:00.00").setSeconds(0, 0);
  });
  Mocha.test("setUTCDate", () => {
    new Date("2023-02-20T16:40:00.00").setUTCDate(1);
  });
  Mocha.test("setUTCFullYear", () => {
    new Date("2023-02-20T16:40:00.00").setUTCFullYear(2024);
  });
  Mocha.test("setUTCFullYearM", () => {
    new Date("2023-02-20T16:40:00.00").setUTCFullYear(2024, 0);
  });
  Mocha.test("setUTCFullYearMD", () => {
    new Date("2023-02-20T16:40:00.00").setUTCFullYear(2024, 0, 1);
  });
  Mocha.test("setUTCHours", () => {
    new Date("2023-02-20T16:40:00.00").setUTCHours(0);
  });
  Mocha.test("setUTCHoursM", () => {
    new Date("2023-02-20T16:40:00.00").setUTCHours(0, 0);
  });
  Mocha.test("setUTCHoursMS", () => {
    new Date("2023-02-20T16:40:00.00").setUTCHours(0, 0, 0);
  });
  Mocha.test("setUTCHoursMSMs", () => {
    new Date("2023-02-20T16:40:00.00").setUTCHours(0, 0, 0, 0);
  });
  Mocha.test("setUTCMilliseconds", () => {
    new Date("2023-02-20T16:40:00.00").setUTCMilliseconds(0);
  });
  Mocha.test("setUTCMinutes", () => {
    new Date("2023-02-20T16:40:00.00").setUTCMinutes(0);
  });
  Mocha.test("setUTCMinutesS", () => {
    new Date("2023-02-20T16:40:00.00").setUTCMinutes(0, 0);
  });
  Mocha.test("setUTCMinutesSMs", () => {
    new Date("2023-02-20T16:40:00.00").setUTCMinutes(0, 0, 0);
  });
  Mocha.test("setUTCMonth", () => {
    new Date("2023-02-20T16:40:00.00").setUTCMonth(0);
  });
  Mocha.test("setUTCSeconds", () => {
    new Date("2023-02-20T16:40:00.00").setUTCSeconds(0);
  });
  Mocha.test("setUTCSecondsMs", () => {
    new Date("2023-02-20T16:40:00.00").setUTCSeconds(0, 0);
  });
  Mocha.test("toDateString", () => {
    console.log(new Date("2023-01-01T00:00:00.00+01:00").toDateString());
    console.log(new Date("2023-01-01T00:00:00.00+08:00").toDateString());
  });
  Mocha.test("toISOString", () => {
    console.log(new Date("2023-01-01T00:00:00.00+00:00").toISOString());
    console.log(new Date("2023-01-01T00:00:00.00+08:00").toISOString());
  });
  Mocha.test("toJSON", () => {
    new Date("2023-01-01T00:00:00.00+00:00").toJSON();
    new Date("").toJSON();
  });
  Mocha.test("toLocaleDateString", () => {
    console.log(new Date().toLocaleDateString());
  });
  Mocha.test("toLocaleDateStringWithLocale", () => {
    console.log(new Date().toLocaleDateString("en-US"));
  });
  Mocha.test("toLocaleDateStringWithLocaleAndOptions", () => {
    console.log(new Date().toLocaleDateString("en-US", {
      dateStyle: "long"
    }));
    console.log(new Date().toLocaleDateString("de", {
      hour: "2-digit",
      minute: "2-digit"
    }));
    console.log(new Date().toLocaleDateString("de", {
      year: "numeric"
    }));
  });
  Mocha.test("toLocaleString", () => {
    console.log(new Date().toLocaleString());
  });
  Mocha.test("toLocaleStringWithLocale", () => {
    console.log(new Date().toLocaleString("en-US"));
  });
  Mocha.test("toLocaleStringWithLocaleAndOptions", () => {
    console.log(new Date().toLocaleString("en", {
      dateStyle: "short",
      timeStyle: "short"
    }));
    console.log(new Date().toLocaleString("en", {
      era: "long",
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "numeric",
      timeZoneName: "short"
    }));
  });
  Mocha.test("toLocaleTimeString", () => {
    console.log(new Date().toLocaleTimeString());
  });
  Mocha.test("toLocaleTimeStringWithLocale", () => {
    console.log(new Date().toLocaleTimeString("en-US"));
  });
  Mocha.test("toLocaleTimeStringWithLocaleAndOptions", () => {
    console.log(new Date().toLocaleTimeString("en-US", {
      timeStyle: "long"
    }));
    console.log(new Date().toLocaleTimeString("de", {
      hour: "2-digit",
      minute: "2-digit"
    }));
  });
  Mocha.test("toString", () => {
    console.log(new Date("2023-01-01T00:00:00.00+01:00").toString());
    console.log(new Date("2023-06-01T00:00:00.00+01:00").toString());
  });
  Mocha.test("toTimeString", () => {
    console.log(new Date("2023-01-01T00:00:00.00+01:00").toTimeString());
    console.log(new Date("2023-01-01T00:00:00.00+08:00").toTimeString());
  });
  Mocha.test("toUTCString", () => {
    console.log(new Date("2023-01-01T00:00:00.00+00:00").toUTCString());
    console.log(new Date("2023-01-01T00:00:00.00+08:00").toUTCString());
  });
});

Mocha.describe("Stdlib.Dict", () => {
  Mocha.test("assign", () => {
    let dict1 = {};
    dict1["firstKey"] = 1;
    console.log(Object.keys(dict1));
    let dict2 = {};
    dict2["someKey"] = 2;
    dict2["someKey2"] = 3;
    let dict1$1 = Object.assign(dict1, dict2);
    console.log(Object.keys(dict1$1));
  });
  Mocha.test("copy", () => {
    let dict = {
      key1: "value1",
      key2: "value2"
    };
    let dict2 = Object.assign({}, dict);
    console.log(Object.keys(dict), Object.keys(dict2));
  });
  Mocha.test("delete", () => {
    let dict = {
      someKey: "someValue"
    };
    Stdlib_Dict.$$delete(dict, "someKey");
  });
  Mocha.test("forEach", () => {
    let dict = {
      key1: "value1",
      key2: "value2"
    };
    Stdlib_Dict.forEach(dict, value => {
      console.log(value);
    });
  });
  Mocha.test("forEachWithKey", () => {
    let dict = {
      key1: "value1",
      key2: "value2"
    };
    Stdlib_Dict.forEachWithKey(dict, (value, key) => {
      console.log(value, key);
    });
  });
  Mocha.test("fromArray", () => {
    Object.fromEntries([
      [
        "key1",
        "value1"
      ],
      [
        "key2",
        "value2"
      ]
    ]);
  });
  Mocha.test("fromIterator", () => {
    let iterator = ((() => {
    var map1 = new Map();
    map1.set('first', 1);
    map1.set('second', 2);
    var iterator1 = map1[Symbol.iterator]();
    return iterator1;
  })());
    Stdlib.assertEqual(Object.values(Object.fromEntries(iterator)), [
      1,
      2
    ]);
  });
  Mocha.test("get", () => {
    let dict = {
      someKey: "someValue"
    };
    let value = dict["someKey"];
    if (value !== undefined) {
      console.log(value);
    } else {
      console.log("Nope, didn't have the key.");
    }
  });
  Mocha.test("getUnsafe", () => {
    let dict = {
      key1: "value1",
      key2: "value2"
    };
    let value = dict["key1"];
    console.log(value);
  });
  Mocha.test("has", () => {
    let dict = {
      key1: 1,
      key2: undefined
    };
    Stdlib_Dict.has(dict, "key1");
    Stdlib_Dict.has(dict, "key2");
    Stdlib_Dict.has(dict, "key3");
  });
  Mocha.test("keysToArray", () => {
    let dict = {};
    dict["someKey"] = 1;
    dict["someKey2"] = 2;
    let keys = Object.keys(dict);
    console.log(keys);
  });
  Mocha.test("make", () => {
    let dict2 = {};
    dict2["someKey"] = 12;
  });
  Mocha.test("mapValues", () => {
    let dict = {
      key1: 1,
      key2: 2
    };
    Object.entries(Stdlib_Dict.mapValues(dict, v => v + 10 | 0));
    Object.entries(Stdlib_Dict.mapValues(dict, v => v.toString()));
  });
  Mocha.test("set", () => {
    let dict = {};
    dict["someKey"] = "someValue";
  });
  Mocha.test("toArray", () => {
    let dict = {};
    dict["someKey"] = 1;
    dict["someKey2"] = 2;
    let asArray = Object.entries(dict);
    console.log(asArray);
  });
  Mocha.test("valuesToArray", () => {
    let dict = {};
    dict["someKey"] = 1;
    dict["someKey2"] = 2;
    let values = Object.values(dict);
    console.log(values);
  });
});

Mocha.describe("Stdlib.Error", () => {
  Mocha.test("make", () => {
    let error = new Error("Some message here");
    console.log(error.message);
    console.log(error.name);
  });
  Mocha.test("message", () => {
    let error = new SyntaxError("Some message here");
    console.log(error.message);
  });
  Mocha.test("name", () => {
    let error = new SyntaxError("Some message here");
    console.log(error.name);
  });
  Mocha.test("panic", () => {
    try {
      Stdlib_Error.panic("Uh oh. This was unexpected!");
    } catch (raw_obj) {
      let obj = Primitive_exceptions.internalToException(raw_obj);
      if (obj.RE_EXN_ID === Stdlib_Exn.$$Error) {
        let m = obj._1.message;
        if (m !== undefined) {
          if (m !== "Panic! Uh oh. This was unexpected!") {
            throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "generated_mocha_test.res",
                10483,
                15
              ],
              Error: new Error()
            };
          }
          
        } else {
          throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "generated_mocha_test.res",
              10484,
              12
            ],
            Error: new Error()
          };
        }
      } else {
        throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "generated_mocha_test.res",
            10486,
            7
          ],
          Error: new Error()
        };
      }
    }
  });
  Mocha.test("raise", () => {
    new Error("Everything is upside down.");
    console.log("Phew, sanity still rules.");
  });
  Mocha.test("stack", () => {
    let error = new Error("error");
    console.log(error.stack);
  });
  Mocha.test("throw", () => {
    new Error("Everything is upside down.");
    console.log("Phew, sanity still rules.");
  });
  Mocha.test("toException", () => {
    new Error("Something went wrong.");
  });
});

Mocha.describe("Stdlib.Float", () => {
  Mocha.test("clamp", () => {
    Stdlib_Float.clamp(undefined, undefined, 4.2) === 4.2;
    Stdlib_Float.clamp(4.3, undefined, 4.2) === 4.3;
    Stdlib_Float.clamp(undefined, 4.1, 4.2) === 4.1;
    Stdlib_Float.clamp(4.3, 4.1, 4.2) === 4.3;
  });
  Mocha.test("fromInt", () => {});
  Mocha.test("fromString", () => {
    Primitive_object.equal(Stdlib_Float.fromString("0"), 0.0);
    Stdlib_Float.fromString("NaN") === undefined;
    Primitive_object.equal(Stdlib_Float.fromString("6"), 6.0);
  });
  Mocha.test("isFinite", () => {
    isFinite(1.0);
    isFinite(NaN);
    isFinite(Number.POSITIVE_INFINITY);
  });
  Mocha.test("isNaN", () => {
    isNaN(3.0);
    isNaN(NaN);
  });
  Mocha.test("mod", () => {});
  Mocha.test("parseFloat", () => {
    parseFloat("1.0");
    parseFloat("  3.14   ");
    parseFloat("3.0");
    parseFloat("3.14some non-digit characters");
    isNaN(parseFloat("error"));
  });
  Mocha.test("parseInt", () => {
    parseInt("1.0");
    parseInt("  3.14   ");
    parseInt(3);
    parseInt("3.14some non-digit characters");
    isNaN(parseInt("error"));
    parseInt("10.0", 2);
    parseInt("15 * 3", 10);
    parseInt("12", 13);
    isNaN(parseInt("17", 40));
  });
  Mocha.test("parseIntWithRadix", () => {
    parseInt("10.0", 2);
    parseInt("15 * 3", 10);
    parseInt("12", 13);
    isNaN(parseInt("17", 40));
  });
  Mocha.test("toExponential", () => {
    (1000.0).toExponential();
    (-1000.0).toExponential();
    (77.0).toExponential(2);
    (5678.0).toExponential(2);
  });
  Mocha.test("toExponentialWithPrecision", () => {
    (77.0).toExponential(2);
    (5678.0).toExponential(2);
  });
  Mocha.test("toFixed", () => {
    (123456.0).toFixed();
    (10.0).toFixed();
    (300.0).toFixed(4);
    (300.0).toFixed(1);
  });
  Mocha.test("toFixedWithPrecision", () => {
    (300.0).toFixed(4);
    (300.0).toFixed(1);
  });
  Mocha.test("toInt", () => {});
  Mocha.test("toLocaleString", () => {
    (1000.0).toLocaleString();
    (1000.0).toLocaleString();
  });
  Mocha.test("toPrecision", () => {
    (100.0).toPrecision();
    (1.0).toPrecision();
    (100.0).toPrecision(2);
    (1.0).toPrecision(1);
  });
  Mocha.test("toPrecisionWithPrecision", () => {
    (100.0).toPrecision(2);
    (1.0).toPrecision(1);
  });
  Mocha.test("toString", () => {
    (1000.0).toString();
    (-1000.0).toString();
  });
  Mocha.test("toStringWithRadix", () => {
    (6.0).toString(2);
    (3735928559.0).toString(16);
    (123456.0).toString(36);
  });
});

Mocha.describe("Stdlib.Float.Constants", () => {
  Mocha.test("epsilon", () => {});
  Mocha.test("maxValue", () => {});
  Mocha.test("minValue", () => {});
  Mocha.test("nan", () => {});
  Mocha.test("negativeInfinity", () => {});
  Mocha.test("positiveInfinity", () => {});
});

Mocha.describe("Stdlib.Int.Constants", () => {
  Mocha.test("maxValue", () => {
    console.log(Stdlib_Int.Constants.maxValue);
  });
  Mocha.test("minValue", () => {
    console.log(Stdlib_Int.Constants.minValue);
  });
});

Mocha.describe("Stdlib.Int", () => {
  Mocha.test("bitwiseAnd", () => {});
  Mocha.test("bitwiseNot", () => {
    Stdlib_Int.bitwiseNot(2) === -3;
  });
  Mocha.test("bitwiseOr", () => {});
  Mocha.test("bitwiseXor", () => {});
  Mocha.test("clamp", () => {
    Stdlib_Int.clamp(undefined, undefined, 42) === 42;
    Stdlib_Int.clamp(50, undefined, 42) === 50;
    Stdlib_Int.clamp(undefined, 40, 42) === 40;
    Stdlib_Int.clamp(50, 40, 42) === 50;
  });
  Mocha.test("fromFloat", () => {});
  Mocha.test("fromString", () => {
    Primitive_object.equal(Stdlib_Int.fromString("0", undefined), 0);
    Stdlib_Int.fromString("NaN", undefined) === undefined;
    Stdlib_Int.fromString("6", 2) === undefined;
  });
  Mocha.test("mod", () => {});
  Mocha.test("range", () => {
    Primitive_object.equal(Stdlib_Int.range(3, 6, undefined), [
      3,
      4,
      5
    ]);
    Primitive_object.equal(Stdlib_Int.range(-3, -1, undefined), [
      -3,
      -2
    ]);
    Primitive_object.equal(Stdlib_Int.range(3, 1, undefined), [
      3,
      2
    ]);
    Primitive_object.equal(Stdlib_Int.range(3, 7, {
      step: 2
    }), [
      3,
      5
    ]);
    Primitive_object.equal(Stdlib_Int.range(3, 7, {
      step: 2,
      inclusive: true
    }), [
      3,
      5,
      7
    ]);
    Stdlib_Int.range(3, 6, {
      step: -2
    });
  });
  Mocha.test("rangeWithOptions", () => {
    Primitive_object.equal(Stdlib_Int.rangeWithOptions(3, 7, {
      step: 2
    }), [
      3,
      5
    ]);
    Primitive_object.equal(Stdlib_Int.rangeWithOptions(3, 7, {
      step: 2,
      inclusive: true
    }), [
      3,
      5,
      7
    ]);
    Stdlib_Int.rangeWithOptions(3, 6, {
      step: -2
    });
  });
  Mocha.test("shiftLeft", () => {});
  Mocha.test("shiftRight", () => {});
  Mocha.test("shiftRightUnsigned", () => {});
  Mocha.test("toExponential", () => {
    (1000).toExponential();
    (-1000).toExponential();
    (77).toExponential(2);
    (5678).toExponential(2);
  });
  Mocha.test("toExponentialWithPrecision", () => {
    (77).toExponential(2);
    (5678).toExponential(2);
  });
  Mocha.test("toFixed", () => {
    (123456).toFixed();
    (10).toFixed();
    (300).toFixed(4);
    (300).toFixed(1);
  });
  Mocha.test("toFixedWithPrecision", () => {
    (300).toFixed(4);
    (300).toFixed(1);
  });
  Mocha.test("toFloat", () => {});
  Mocha.test("toLocaleString", () => {
    (1000).toLocaleString();
    (1000).toLocaleString();
  });
  Mocha.test("toPrecision", () => {
    (100).toPrecision();
    (1).toPrecision();
    (100).toPrecision(2);
    (1).toPrecision(2);
  });
  Mocha.test("toPrecisionWithPrecision", () => {
    (100).toPrecision(2);
    (1).toPrecision(2);
  });
  Mocha.test("toString", () => {
    (1000).toString();
    (-1000).toString();
    (6).toString(2);
    (373592855).toString(16);
    (123456).toString(36);
  });
  Mocha.test("toStringWithRadix", () => {
    (6).toString(2);
    (373592855).toString(16);
    (123456).toString(36);
  });
});

Mocha.describe("Stdlib.Iterator", () => {
  Mocha.test("forEach", () => {
    let iterator = ((() => {
    var array1 = ['a', 'b', 'c'];
    var iterator1 = array1[Symbol.iterator]();
    return iterator1
  })());
    Stdlib_Iterator.forEach(iterator, v => {
      if (v === undefined) {
        return Stdlib.assertEqual(Stdlib_Option.isNone(v), true);
      }
      switch (v) {
        case "a" :
        case "b" :
        case "c" :
          return;
        default:
          return Stdlib.assertEqual(Stdlib_Option.isNone(v), true);
      }
    });
  });
  Mocha.test("next", () => {
    let iterator = ((() => {
    var array1 = ['a'];
    var iterator1 = array1[Symbol.iterator]();
    return iterator1
  })());
    Stdlib.assertEqual(iterator.next().done, false);
    Stdlib.assertEqual(iterator.next().done, true);
  });
  Mocha.test("toArray", () => {
    let map = new Map();
    map.set("someKey", "someValue");
    map.set("someKey2", "someValue2");
    let mapKeysAsArray = Array.from(map.keys());
    console.log(mapKeysAsArray);
  });
  Mocha.test("toArrayWithMapper", () => {
    let map = new Map();
    map.set("someKey", "someValue");
    map.set("someKey2", "someValue2");
    let mapKeysAsArray = Array.from(map.keys(), key => key.length);
    console.log(mapKeysAsArray);
  });
});

Mocha.describe("Stdlib.JSON.Classify", () => {
  Mocha.test("classify", () => {
    Stdlib_JSON.Classify.classify("hello world");
    Stdlib_JSON.Classify.classify(42);
  });
});

Mocha.describe("Stdlib.JSON.Decode", () => {
  Mocha.test("array", () => {
    Stdlib_JSON.Decode.array(JSON.parse("[\"foo\", \"bar\"]"));
    Stdlib_JSON.Decode.array(JSON.parse("\"hello world\""));
  });
  Mocha.test("bool", () => {
    Stdlib_JSON.Decode.bool(JSON.parse("true"));
    Stdlib_JSON.Decode.bool(JSON.parse("\"hello world\""));
  });
  Mocha.test("float", () => {
    Stdlib_JSON.Decode.float(JSON.parse("42.0"));
    Stdlib_JSON.Decode.float(JSON.parse("\"hello world\""));
  });
  Mocha.test("null", () => {
    Stdlib_JSON.Decode.$$null(JSON.parse("null"));
    Stdlib_JSON.Decode.$$null(JSON.parse("\"hello world\""));
  });
  Mocha.test("object", () => {
    Stdlib_JSON.Decode.object(JSON.parse("{\"foo\":\"bar\"}"));
    Stdlib_JSON.Decode.object(JSON.parse("\"hello world\""));
  });
  Mocha.test("string", () => {
    Stdlib_JSON.Decode.string(JSON.parse("\"hello world\""));
    Stdlib_JSON.Decode.string(JSON.parse("42"));
  });
});

Mocha.describe("Stdlib.JSON.Encode", () => {
  Mocha.test("array", () => {});
  Mocha.test("bool", () => {});
  Mocha.test("float", () => {});
  Mocha.test("int", () => {});
  Mocha.test("null", () => {});
  Mocha.test("object", () => {
    Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ]
    ]);
  });
  Mocha.test("string", () => {});
});

Mocha.describe("Stdlib.JSON", () => {
  Mocha.test("parseExn", () => {
    try {
      JSON.parse("{\"foo\":\"bar\",\"hello\":\"world\"}");
      JSON.parse("");
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID === Stdlib_Exn.$$Error) {
        console.log("error");
      } else {
        throw exn;
      }
    }
    let reviver = (param, value) => {
      switch (typeof value) {
        case "string" :
          return value.toUpperCase();
        case "number" :
          return value * 2.0;
        default:
          return value;
      }
    };
    try {
      console.log(JSON.parse("{\"hello\":\"world\",\"someNumber\":21}", reviver));
      console.log(JSON.parse("", reviver));
    } catch (raw_exn$1) {
      let exn$1 = Primitive_exceptions.internalToException(raw_exn$1);
      if (exn$1.RE_EXN_ID === Stdlib_Exn.$$Error) {
        console.log("error");
      } else {
        throw exn$1;
      }
    }
  });
  Mocha.test("parseExnWithReviver", () => {
    let reviver = (param, value) => {
      switch (typeof value) {
        case "string" :
          return value.toUpperCase();
        case "number" :
          return value * 2.0;
        default:
          return value;
      }
    };
    try {
      console.log(JSON.parse("{\"hello\":\"world\",\"someNumber\":21}", reviver));
      console.log(JSON.parse("", reviver));
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID === Stdlib_Exn.$$Error) {
        console.log("error");
      } else {
        throw exn;
      }
    }
  });
  Mocha.test("stringify", () => {
    let json = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    JSON.stringify(json);
    JSON.stringify(json, undefined, 2);
    JSON.stringify(json, [
      "foo",
      "someNumber"
    ]);
    let replacer = (param, value) => {
      let decodedValue = Stdlib_JSON.Decode.string(value);
      if (decodedValue !== undefined) {
        return decodedValue.toUpperCase();
      } else {
        return value;
      }
    };
    JSON.stringify(json, replacer);
  });
  Mocha.test("stringifyAny", () => {
    let dict = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    Stdlib.assertEqual(JSON.stringify(dict), "{\"foo\":\"bar\",\"hello\":\"world\",\"someNumber\":42}");
    Stdlib.assertEqual(JSON.stringify(dict, undefined, 2), "{\n  \"foo\": \"bar\",\n  \"hello\": \"world\",\n  \"someNumber\": 42\n}");
    Stdlib.assertEqual(JSON.stringify(dict, [
      "foo",
      "someNumber"
    ]), "{\"foo\":\"bar\",\"someNumber\":42}");
    let replacer = (param, value) => {
      let decodedValue = Stdlib_JSON.Decode.string(value);
      if (decodedValue !== undefined) {
        return decodedValue.toUpperCase();
      } else {
        return value;
      }
    };
    Stdlib.assertEqual(JSON.stringify(dict, replacer), "{\"foo\":\"BAR\",\"hello\":\"WORLD\",\"someNumber\":42}");
    Stdlib.assertEqual(JSON.stringify(() => "hello world"), undefined);
    let exit = 0;
    let val;
    try {
      val = JSON.stringify(BigInt(0));
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          11253,
          7
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("stringifyAnyWithFilter", () => {
    let dict = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    Stdlib.assertEqual(JSON.stringify(dict, [
      "foo",
      "someNumber"
    ]), "{\"foo\":\"bar\",\"someNumber\":42}");
    Stdlib.assertEqual(JSON.stringify(() => "hello world"), undefined);
    let exit = 0;
    let val;
    try {
      val = JSON.stringify(BigInt(0));
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          11274,
          7
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("stringifyAnyWithFilterAndIndent", () => {
    let dict = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    Stdlib.assertEqual(JSON.stringify(dict), "{\"foo\":\"bar\",\"hello\":\"world\",\"someNumber\":42}");
    Stdlib.assertEqual(JSON.stringify(dict, undefined, 2), "{\n  \"foo\": \"bar\",\n  \"hello\": \"world\",\n  \"someNumber\": 42\n}");
    Stdlib.assertEqual(JSON.stringify(dict, [
      "foo",
      "someNumber"
    ]), "{\"foo\":\"bar\",\"someNumber\":42}");
    Stdlib.assertEqual(JSON.stringify(() => "hello world"), undefined);
    let exit = 0;
    let val;
    try {
      val = JSON.stringify(BigInt(0));
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          11310,
          7
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("stringifyAnyWithIndent", () => {
    let dict = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    Stdlib.assertEqual(JSON.stringify(dict, null, 2), "{\n  \"foo\": \"bar\",\n  \"hello\": \"world\",\n  \"someNumber\": 42\n}");
    Stdlib.assertEqual(JSON.stringify(() => "hello world"), undefined);
    let exit = 0;
    let val;
    try {
      val = JSON.stringify(BigInt(0));
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          11336,
          7
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("stringifyAnyWithReplacer", () => {
    let dict = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    let replacer = (param, value) => {
      let decodedValue = Stdlib_JSON.Decode.string(value);
      if (decodedValue !== undefined) {
        return decodedValue.toUpperCase();
      } else {
        return value;
      }
    };
    Stdlib.assertEqual(JSON.stringify(dict, replacer), "{\"foo\":\"BAR\",\"hello\":\"WORLD\",\"someNumber\":42}");
    Stdlib.assertEqual(JSON.stringify(() => "hello world"), undefined);
    let exit = 0;
    let val;
    try {
      val = JSON.stringify(BigInt(0));
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          11367,
          7
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("stringifyAnyWithReplacerAndIndent", () => {
    let dict = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    let replacer = (param, value) => {
      let decodedValue = Stdlib_JSON.Decode.string(value);
      if (decodedValue !== undefined) {
        return decodedValue.toUpperCase();
      } else {
        return value;
      }
    };
    Stdlib.assertEqual(JSON.stringify(dict, replacer), "{\"foo\":\"BAR\",\"hello\":\"WORLD\",\"someNumber\":42}");
    Stdlib.assertEqual(JSON.stringify(() => "hello world"), undefined);
    let exit = 0;
    let val;
    try {
      val = JSON.stringify(BigInt(0));
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          11398,
          7
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("stringifyWithFilter", () => {
    let json = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    JSON.stringify(json, [
      "foo",
      "someNumber"
    ]);
  });
  Mocha.test("stringifyWithFilterAndIndent", () => {
    let json = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    JSON.stringify(json, [
      "foo",
      "someNumber"
    ], 2);
  });
  Mocha.test("stringifyWithIndent", () => {
    let json = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    JSON.stringify(json, null, 2);
  });
  Mocha.test("stringifyWithReplacer", () => {
    let json = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    let replacer = (param, value) => {
      let decodedValue = Stdlib_JSON.Decode.string(value);
      if (decodedValue !== undefined) {
        return decodedValue.toUpperCase();
      } else {
        return value;
      }
    };
    JSON.stringify(json, replacer);
  });
  Mocha.test("stringifyWithReplacerAndIndent", () => {
    let json = Object.fromEntries([
      [
        "foo",
        "bar"
      ],
      [
        "hello",
        "world"
      ],
      [
        "someNumber",
        42
      ]
    ]);
    let replacer = (param, value) => {
      let decodedValue = Stdlib_JSON.Decode.string(value);
      if (decodedValue !== undefined) {
        return decodedValue.toUpperCase();
      } else {
        return value;
      }
    };
    JSON.stringify(json, replacer, 2);
  });
});

Mocha.describe("Stdlib.List", () => {
  Mocha.test("add", () => {
    Stdlib_List.add({
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, 1);
    Stdlib_List.add({
      hd: "World",
      tl: {
        hd: "!",
        tl: /* [] */0
      }
    }, "Hello");
  });
  Mocha.test("compare", () => {
    Stdlib_List.compare({
      hd: 3,
      tl: /* [] */0
    }, {
      hd: 3,
      tl: {
        hd: 7,
        tl: /* [] */0
      }
    }, Primitive_int.compare);
    Stdlib_List.compare({
      hd: 5,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 5,
      tl: /* [] */0
    }, Primitive_int.compare);
    Stdlib_List.compare({
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 4,
        tl: {
          hd: 2,
          tl: /* [] */0
        }
      }
    }, Primitive_int.compare);
    Stdlib_List.compare({
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, Primitive_int.compare);
    Stdlib_List.compare({
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 3,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }, Primitive_int.compare);
  });
  Mocha.test("compareLength", () => {
    Stdlib_List.compareLength({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 5,
          tl: {
            hd: 6,
            tl: /* [] */0
          }
        }
      }
    });
    Stdlib_List.compareLength({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: {
          hd: 6,
          tl: /* [] */0
        }
      }
    });
    Stdlib_List.compareLength({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, {
      hd: 5,
      tl: {
        hd: 6,
        tl: /* [] */0
      }
    });
  });
  Mocha.test("concat", () => {
    Stdlib.assertEqual(Stdlib_List.concat({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }), {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: {
              hd: 5,
              tl: /* [] */0
            }
          }
        }
      }
    });
  });
  Mocha.test("concatMany", () => {
    Stdlib_List.concatMany([
      {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      },
      /* [] */0,
      {
        hd: 3,
        tl: /* [] */0
      }
    ]);
  });
  Mocha.test("drop", () => {
    Stdlib_List.drop({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 2);
    Stdlib_List.drop({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 3);
    Stdlib_List.drop({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 4);
  });
  Mocha.test("equal", () => {
    Stdlib_List.equal({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, (a, b) => a === b);
    Stdlib_List.equal({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, (a, b) => a === b);
    Stdlib_List.equal({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: -1,
      tl: {
        hd: -2,
        tl: {
          hd: -3,
          tl: /* [] */0
        }
      }
    }, (a, b) => Pervasives.abs(a) === Pervasives.abs(b));
  });
  Mocha.test("every", () => {
    let isBelow10 = value => value < 10;
    Stdlib_List.every({
      hd: 1,
      tl: {
        hd: 9,
        tl: {
          hd: 8,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, isBelow10);
    Stdlib_List.every({
      hd: 1,
      tl: {
        hd: 99,
        tl: {
          hd: 8,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, isBelow10);
  });
  Mocha.test("every2", () => {
    Stdlib_List.every2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
    Stdlib_List.every2(/* [] */0, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    Stdlib_List.every2({
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    Stdlib_List.every2({
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, {
      hd: 5,
      tl: {
        hd: 0,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
  });
  Mocha.test("filter", () => {
    let isEven = x => x % 2 === 0;
    Stdlib_List.filter({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, isEven);
    Stdlib_List.filter({
      hd: undefined,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: undefined,
            tl: /* [] */0
          }
        }
      }
    }, Stdlib_Option.isSome);
  });
  Mocha.test("filterMap", () => {
    let isEven = x => x % 2 === 0;
    Stdlib_List.filterMap({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, x => {
      if (isEven(x)) {
        return x;
      }
      
    });
    Stdlib_List.filterMap({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: undefined,
          tl: /* [] */0
        }
      }
    }, x => x);
  });
  Mocha.test("filterWithIndex", () => {
    Stdlib_List.filterWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, (_x, index) => index % 2 === 0);
  });
  Mocha.test("find", () => {
    Stdlib_List.find({
      hd: 1,
      tl: {
        hd: 4,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, x => x > 3);
    Stdlib_List.find({
      hd: 1,
      tl: {
        hd: 4,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }
    }, x => x > 4);
  });
  Mocha.test("flat", () => {
    Stdlib_List.flat({
      hd: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: /* [] */0,
        tl: {
          hd: {
            hd: 3,
            tl: /* [] */0
          },
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("forEach", () => {
    Stdlib_List.forEach({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: /* [] */0
        }
      }
    }, x => {
      console.log("Item: " + x);
    });
  });
  Mocha.test("forEach2", () => {
    Stdlib_List.forEach2({
      hd: "Z",
      tl: {
        hd: "Y",
        tl: /* [] */0
      }
    }, {
      hd: "A",
      tl: {
        hd: "B",
        tl: {
          hd: "C",
          tl: /* [] */0
        }
      }
    }, (x, y) => {
      console.log(x, y);
    });
  });
  Mocha.test("forEachWithIndex", () => {
    Stdlib_List.forEachWithIndex({
      hd: "a",
      tl: {
        hd: "b",
        tl: {
          hd: "c",
          tl: /* [] */0
        }
      }
    }, (x, index) => {
      console.log("Item " + index.toString() + " is " + x);
    });
  });
  Mocha.test("fromArray", () => {
    Stdlib_List.fromArray([
      1,
      2,
      3
    ]);
  });
  Mocha.test("fromInitializer", () => {
    Stdlib_List.fromInitializer(5, i => i);
    Stdlib_List.fromInitializer(5, i => i * i | 0);
  });
  Mocha.test("get", () => {
    let abc = {
      hd: "A",
      tl: {
        hd: "B",
        tl: {
          hd: "C",
          tl: /* [] */0
        }
      }
    };
    Stdlib_List.get(abc, 1);
    Stdlib_List.get(abc, 4);
  });
  Mocha.test("getAssoc", () => {
    Stdlib_List.getAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 3, (a, b) => a === b);
    Stdlib_List.getAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          15,
          "afternoon"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 15, (k, item) => k === item);
  });
  Mocha.test("getExn", () => {
    let abc = {
      hd: "A",
      tl: {
        hd: "B",
        tl: {
          hd: "C",
          tl: /* [] */0
        }
      }
    };
    Stdlib.assertEqual(Stdlib_List.getExn(abc, 1), "B");
    let exit = 0;
    let val;
    try {
      val = Stdlib_List.getExn(abc, 4);
      exit = 1;
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID !== "Not_found") {
        throw exn;
      }
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          11717,
          7
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("has", () => {
    Stdlib_List.has({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 2, (a, b) => a === b);
    Stdlib_List.has({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 4, (a, b) => a === b);
    Stdlib_List.has({
      hd: -1,
      tl: {
        hd: -2,
        tl: {
          hd: -3,
          tl: /* [] */0
        }
      }
    }, 2, (a, b) => Pervasives.abs(a) === Pervasives.abs(b));
  });
  Mocha.test("hasAssoc", () => {
    Stdlib_List.hasAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 1, (a, b) => a === b);
    Stdlib_List.hasAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          15,
          "afternoon"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 25, (k, item) => k === item);
  });
  Mocha.test("head", () => {
    Stdlib_List.head(/* [] */0);
    Stdlib_List.head({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("headExn", () => {
    Stdlib.assertEqual(Stdlib_List.headExn({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }), 1);
    let exit = 0;
    let val;
    try {
      val = Stdlib_List.headExn(/* [] */0);
      exit = 1;
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID !== "Not_found") {
        throw exn;
      }
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          11754,
          7
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("length", () => {
    Stdlib_List.length({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("make", () => {
    Stdlib_List.make(3, 1);
  });
  Mocha.test("map", () => {
    Stdlib_List.map({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, x => x + 1 | 0);
  });
  Mocha.test("mapReverse", () => {
    let f = x => x * x | 0;
    let l = {
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    };
    let withMap = Stdlib_List.reverse(Stdlib_List.map(l, f));
    let withMapReverse = Stdlib_List.mapReverse(l, f);
    console.log(Primitive_object.equal(withMap, withMapReverse));
  });
  Mocha.test("mapReverse2", () => {
    Stdlib_List.mapReverse2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, (a, b) => a + b | 0);
  });
  Mocha.test("mapWithIndex", () => {
    Stdlib_List.mapWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, (x, index) => index + x | 0);
  });
  Mocha.test("partition", () => {
    Stdlib_List.partition({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, x => x > 2);
  });
  Mocha.test("reduce", () => {
    Stdlib_List.reduce({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (a, b) => a + b | 0);
    Stdlib_List.reduce({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (acc, item) => acc + item | 0);
  });
  Mocha.test("reduce2", () => {
    Stdlib_List.reduce2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }, 0, (acc, x, y) => (acc + (x * x | 0) | 0) + y | 0);
  });
  Mocha.test("reduceReverse", () => {
    Stdlib_List.reduceReverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (a, b) => a + b | 0);
    Stdlib_List.reduceReverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 10, (a, b) => a - b | 0);
    Stdlib_List.reduceReverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, /* [] */0, Stdlib_List.add);
  });
  Mocha.test("reduceReverse2", () => {
    Stdlib_List.reduceReverse2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }, 0, (acc, x, y) => (acc + (x * x | 0) | 0) + y | 0);
  });
  Mocha.test("reduceWithIndex", () => {
    Stdlib_List.reduceWithIndex({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 0, (acc, item, index) => (acc + item | 0) + index | 0);
  });
  Mocha.test("removeAssoc", () => {
    Stdlib_List.removeAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 1, (a, b) => a === b);
    Stdlib_List.removeAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          15,
          "afternoon"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 9, (k, item) => k === item);
  });
  Mocha.test("reverse", () => {
    Stdlib_List.reverse({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("reverseConcat", () => {
    Stdlib_List.reverseConcat({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 3,
      tl: {
        hd: 4,
        tl: /* [] */0
      }
    });
  });
  Mocha.test("setAssoc", () => {
    Stdlib_List.setAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          2,
          "b"
        ],
        tl: {
          hd: [
            3,
            "c"
          ],
          tl: /* [] */0
        }
      }
    }, 2, "x", (a, b) => a === b);
    Stdlib_List.setAssoc({
      hd: [
        1,
        "a"
      ],
      tl: {
        hd: [
          3,
          "c"
        ],
        tl: /* [] */0
      }
    }, 2, "b", (a, b) => a === b);
    Stdlib_List.setAssoc({
      hd: [
        9,
        "morning"
      ],
      tl: {
        hd: [
          3,
          "morning?!"
        ],
        tl: {
          hd: [
            22,
            "night"
          ],
          tl: /* [] */0
        }
      }
    }, 15, "afternoon", (a, b) => a % 12 === b % 12);
  });
  Mocha.test("shuffle", () => {
    Stdlib_List.shuffle({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("size", () => {
    Stdlib_List.size({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("some", () => {
    let isAbove100 = value => value > 100;
    Stdlib_List.some({
      hd: 101,
      tl: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: /* [] */0
          }
        }
      }
    }, isAbove100);
    Stdlib_List.some({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, isAbove100);
  });
  Mocha.test("some2", () => {
    Stdlib_List.some2({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
    Stdlib_List.some2(/* [] */0, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    Stdlib_List.some2({
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: /* [] */0
    }, (a, b) => a > b);
    Stdlib_List.some2({
      hd: 0,
      tl: {
        hd: 1,
        tl: /* [] */0
      }
    }, {
      hd: 5,
      tl: {
        hd: 0,
        tl: /* [] */0
      }
    }, (a, b) => a > b);
  });
  Mocha.test("sort", () => {
    Stdlib_List.sort({
      hd: 5,
      tl: {
        hd: 4,
        tl: {
          hd: 9,
          tl: {
            hd: 3,
            tl: {
              hd: 7,
              tl: /* [] */0
            }
          }
        }
      }
    }, Primitive_int.compare);
  });
  Mocha.test("splitAt", () => {
    Stdlib_List.splitAt({
      hd: "Hello",
      tl: {
        hd: "World",
        tl: /* [] */0
      }
    }, 1);
    Stdlib_List.splitAt({
      hd: 0,
      tl: {
        hd: 1,
        tl: {
          hd: 2,
          tl: {
            hd: 3,
            tl: {
              hd: 4,
              tl: /* [] */0
            }
          }
        }
      }
    }, 2);
  });
  Mocha.test("tail", () => {
    Stdlib_List.tail({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
    Stdlib_List.tail(/* [] */0);
  });
  Mocha.test("tailExn", () => {
    Stdlib.assertEqual(Stdlib_List.tailExn({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }), {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    });
    let exit = 0;
    let val;
    try {
      val = Stdlib_List.tailExn(/* [] */0);
      exit = 1;
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID !== "Not_found") {
        throw exn;
      }
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          11943,
          7
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("take", () => {
    Stdlib_List.take({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 1);
    Stdlib_List.take({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 2);
    Stdlib_List.take({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, 4);
  });
  Mocha.test("toArray", () => {
    Stdlib_List.toArray({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("toShuffled", () => {
    Stdlib_List.toShuffled({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("unzip", () => {
    Stdlib_List.unzip({
      hd: [
        1,
        2
      ],
      tl: {
        hd: [
          3,
          4
        ],
        tl: /* [] */0
      }
    });
    Stdlib_List.unzip({
      hd: [
        "H",
        "W"
      ],
      tl: {
        hd: [
          "e",
          "o"
        ],
        tl: {
          hd: [
            "l",
            "r"
          ],
          tl: {
            hd: [
              "l",
              "l"
            ],
            tl: {
              hd: [
                "o",
                "d"
              ],
              tl: {
                hd: [
                  " ",
                  "!"
                ],
                tl: /* [] */0
              }
            }
          }
        }
      }
    });
  });
  Mocha.test("zip", () => {
    Stdlib_List.zip({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    });
  });
  Mocha.test("zipBy", () => {
    Stdlib_List.zipBy({
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: /* [] */0
        }
      }
    }, {
      hd: 4,
      tl: {
        hd: 5,
        tl: /* [] */0
      }
    }, (a, b) => (a << 1) + b | 0);
  });
});

Mocha.describe("Stdlib.Map", () => {
  Mocha.test("clear", () => {
    let map = new Map();
    map.set("someKey", "someValue");
    map.clear();
  });
  Mocha.test("delete", () => {
    let map = new Map();
    map.set("someKey", "someValue");
    let didDeleteKey = map.delete("someKey");
    console.log(didDeleteKey);
    let didDeleteKey$1 = map.delete("someNonExistantKey");
    console.log(didDeleteKey$1);
  });
  Mocha.test("entries", () => {
    let map = new Map();
    map.set("someKey", "someValue");
    map.set("anotherKey", "anotherValue");
    let entries = map.entries();
    console.log(entries.next().value);
    console.log(Array.from(map.entries()));
  });
  Mocha.test("forEach", () => {
    let map = new Map();
    map.set("someKey", "someValue");
    map.set("someKey2", "someValue2");
    map.forEach(value => {
      console.log(value);
    });
  });
  Mocha.test("forEachWithKey", () => {
    let map = new Map();
    map.set("someKey", "someValue");
    map.set("someKey2", "someValue2");
    map.forEach((value, key) => {
      console.log(value, key);
    });
  });
  Mocha.test("fromArray", () => {
    let languageRank = [
      [
        "ReScript",
        1
      ],
      [
        "JavaScript",
        2
      ],
      [
        "TypeScript",
        3
      ]
    ];
    let map = new Map(languageRank);
    let match = map.get("ReScript");
    if (match === 1) {
      console.log("Yay, ReScript is #1!");
    } else {
      console.log("Uh-oh, something is _terribly_ wrong with this program... abort.");
    }
  });
  Mocha.test("fromIterator", () => {
    let iterator = ((() => {
    var map1 = new Map();

    map1.set('first', '1');
    map1.set('second', '2');

    var iterator1 = map1[Symbol.iterator]();
    return iterator1;
  })());
    Stdlib.assertEqual(new Map(iterator).size, 2);
  });
  Mocha.test("get", () => {
    let map = new Map();
    map.set("someKey", "someValue");
    let value = map.get("someKey");
    if (value !== undefined) {
      console.log("Yay, had the value, and it's:", value);
    } else {
      console.log("Nope, didn't have it.");
    }
  });
  Mocha.test("has", () => {
    let map = new Map();
    map.set("someKey", "someValue");
    if (map.has("someKey")) {
      console.log("Yay, we have the value!");
    } else {
      console.log("Nope, didn't have it.");
    }
  });
  Mocha.test("keys", () => {
    let map = new Map();
    map.set("someKey", "someValue");
    map.set("anotherKey", "anotherValue");
    let keys = map.keys();
    console.log(keys.next().value);
    console.log(Array.from(map.keys()));
  });
  Mocha.test("make", () => {
    new Map();
    let map = new Map();
    map.set("lang", "ReScript");
  });
  Mocha.test("set", () => {
    let map = new Map();
    map.set("someKey", "someValue");
  });
  Mocha.test("size", () => {
    let map = new Map();
    map.set("someKey", "someValue");
  });
  Mocha.test("values", () => {
    let map = new Map();
    map.set("someKey", "someValue");
    map.set("anotherKey", "anotherValue");
    let values = map.values();
    console.log(values.next().value);
    console.log(Array.from(map.values()));
  });
});

Mocha.describe("Stdlib.Math", () => {
  Mocha.test("abs", () => {
    Math.abs(-2.0);
    Math.abs(3.0);
  });
  Mocha.test("acos", () => {
    Math.acos(-1.0);
    isNaN(Math.acos(-3.0));
  });
  Mocha.test("acosh", () => {
    Math.acosh(1.0);
    isNaN(Math.acosh(0.5));
  });
  Mocha.test("asin", () => {
    Math.asin(-1.0);
    isNaN(Math.asin(-2.0));
  });
  Mocha.test("asinh", () => {
    Math.asinh(-1.0);
    Math.asinh(-0.0);
  });
  Mocha.test("atan", () => {
    Math.atan(-0.0);
    Math.atan(0.0);
    Math.atan(1.0);
  });
  Mocha.test("atan2", () => {
    Math.atan2(0.0, 10.0) === 0.0;
    Math.atan2(5.0, 5.0) === Math.PI / 4.0;
    Math.atan2(15.0, 90.0);
    Math.atan2(90.0, 15.0);
  });
  Mocha.test("atanh", () => {
    isNaN(Math.atanh(-2.0));
    isFinite(Math.atanh(-1.0));
    Math.atanh(-0.0);
    Math.atanh(0.0);
    Math.atanh(0.5);
  });
  Mocha.test("cbrt", () => {
    Math.cbrt(-1.0);
    Math.cbrt(-0.0);
    Math.cbrt(0.0);
  });
  Mocha.test("ceil", () => {
    Math.ceil(3.1) === 4.0;
    Math.ceil(3.0) === 3.0;
    Math.ceil(-3.1) === -3.0;
    Math.ceil(2150000000.3) === 2150000001.0;
  });
  Mocha.test("cos", () => {
    Math.cos(-0.0);
    Math.cos(0.0);
    Math.cos(1.0);
  });
  Mocha.test("cosh", () => {
    Math.cosh(-1.0);
    Math.cosh(-0.0);
    Math.cosh(0.0);
  });
  Mocha.test("exp", () => {
    Math.exp(-1.0);
    Math.exp(0.0);
  });
  Mocha.test("expm1", () => {
    Math.expm1(-1.0);
    Math.expm1(-0.0);
  });
  Mocha.test("floor", () => {
    Math.floor(-45.95);
    Math.floor(-45.05);
    Math.floor(-0.0);
  });
  Mocha.test("fround", () => {
    Math.fround(5.5) === 5.5;
    Math.fround(5.05) === 5.050000190734863;
  });
  Mocha.test("hypot", () => {
    Math.hypot(3.0, 4.0);
    Math.hypot(3.0, 5.0);
  });
  Mocha.test("hypotMany", () => {
    Math.hypot(3.0, 4.0, 5.0);
    Math.hypot();
  });
  Mocha.test("log", () => {
    isNaN(Math.log(-1.0));
    isFinite(Math.log(-0.0));
    isFinite(Math.log(0.0));
    Math.log(1.0);
  });
  Mocha.test("log10", () => {
    isNaN(Math.log10(-2.0));
    isFinite(Math.log10(-0.0));
    isFinite(Math.log10(0.0));
    Math.log10(1.0);
  });
  Mocha.test("log1p", () => {
    isNaN(Math.log1p(-2.0));
    isFinite(Math.log1p(-1.0));
    Math.log1p(-0.0);
  });
  Mocha.test("log2", () => {
    isNaN(Math.log2(-2.0));
    isFinite(Math.log2(-0.0));
    isFinite(Math.log2(0.0));
    Math.log2(1.0);
  });
  Mocha.test("max", () => {
    Math.max(1.0, 2.0);
    Math.max(-1.0, -2.0);
  });
  Mocha.test("maxMany", () => {
    Math.max(1.0, 2.0);
    Math.max(-1.0, -2.0);
    isFinite(Math.max());
  });
  Mocha.test("min", () => {
    Math.min(1.0, 2.0);
    Math.min(-1.0, -2.0);
  });
  Mocha.test("minMany", () => {
    Math.min(1.0, 2.0);
    Math.min(-1.0, -2.0);
    isFinite(Math.min());
  });
  Mocha.test("pow", () => {
    Math.pow(2.0, 4.0);
    Math.pow(3.0, 4.0);
  });
  Mocha.test("random", () => {
    Math.random();
  });
  Mocha.test("round", () => {
    Math.round(-20.5);
    Math.round(-0.1);
    Math.round(0.0);
    Math.round(-0.0);
  });
  Mocha.test("sign", () => {
    Math.sign(3.0);
    Math.sign(-3.0);
    Math.sign(0.0);
  });
  Mocha.test("sin", () => {
    Math.sin(-0.0);
    Math.sin(0.0);
    Math.sin(1.0);
  });
  Mocha.test("sinh", () => {
    Math.sinh(-0.0);
    Math.sinh(0.0);
    Math.sinh(1.0);
  });
  Mocha.test("sqrt", () => {
    isNaN(Math.sqrt(-1.0));
    Math.sqrt(-0.0);
    Math.sqrt(0.0);
    Math.sqrt(1.0);
    Math.sqrt(9.0);
  });
  Mocha.test("tan", () => {
    Math.tan(-0.0);
    Math.tan(0.0);
    Math.tan(1.0);
  });
  Mocha.test("tanh", () => {
    Math.tanh(-0.0);
    Math.tanh(0.0);
    Math.tanh(1.0);
  });
  Mocha.test("trunc", () => {
    Math.trunc(0.123);
    Math.trunc(1.999);
    Math.trunc(13.37);
    Math.trunc(42.84);
  });
});

Mocha.describe("Stdlib.Math.Constants", () => {
  Mocha.test("e", () => {});
  Mocha.test("ln10", () => {});
  Mocha.test("ln2", () => {});
  Mocha.test("log10e", () => {});
  Mocha.test("log2e", () => {});
  Mocha.test("pi", () => {});
  Mocha.test("sqrt1_2", () => {});
  Mocha.test("sqrt2", () => {});
});

Mocha.describe("Stdlib.Math.Int", () => {
  Mocha.test("abs", () => {
    Math.abs(-2);
    Math.abs(3);
  });
  Mocha.test("ceil", () => {
    Stdlib_Math.Int.ceil(3.7) === 4;
    Stdlib_Math.Int.ceil(3.0) === 3;
    Stdlib_Math.Int.ceil(-3.1) === -3;
  });
  Mocha.test("clz32", () => {
    Math.clz32(1);
    Math.clz32(4);
  });
  Mocha.test("floor", () => {
    Stdlib_Math.Int.floor(3.7) === 3;
    Stdlib_Math.Int.floor(3.0) === 3;
    Stdlib_Math.Int.floor(-3.1) === -4;
  });
  Mocha.test("imul", () => {
    Math.imul(3, 4);
    Math.imul(-5, 12);
  });
  Mocha.test("max", () => {
    Math.max(1, 2);
    Math.max(-1, -2);
  });
  Mocha.test("maxMany", () => {
    Math.max(1, 2);
    Math.max(-1, -2);
    isFinite(Math.max());
  });
  Mocha.test("min", () => {
    Math.min(1, 2);
    Math.min(-1, -2);
  });
  Mocha.test("minMany", () => {
    Math.min(1, 2);
    Math.min(-1, -2);
    isFinite(Math.min());
  });
  Mocha.test("pow", () => {
    Math.pow(2, 4);
    Math.pow(3, 4);
  });
  Mocha.test("random", () => {
    Stdlib_Math.Int.random(2, 5) === 4;
    Stdlib_Math.Int.random(505, 2000) === 1276;
    Stdlib_Math.Int.random(-7, -2) === -4;
  });
  Mocha.test("sign", () => {
    Math.sign(3);
    Math.sign(-3);
    Math.sign(0);
  });
});

Mocha.describe("Stdlib.Null", () => {
  Mocha.test("asNullable", () => {});
  Mocha.test("flatMap", () => {
    let addIfAboveOne = value => {
      if (value > 1) {
        return value + 1 | 0;
      } else {
        return null;
      }
    };
    Stdlib_Null.flatMap(2, addIfAboveOne);
    Stdlib_Null.flatMap(-4, addIfAboveOne);
    Stdlib_Null.flatMap(null, addIfAboveOne);
  });
  Mocha.test("forEach", () => {
    Stdlib_Null.forEach("thing", x => {
      console.log(x);
    });
    Stdlib_Null.forEach(null, x => {
      console.log(x);
    });
  });
  Mocha.test("fromOption", () => {
    let asNull = Stdlib_Null.fromOption(undefined);
    console.log(asNull === null);
  });
  Mocha.test("getExn", () => {
    Stdlib.assertEqual(Stdlib_Null.getExn(3), 3);
    let exit = 0;
    let value;
    try {
      value = Stdlib_Null.getExn('ReScript');
      exit = 1;
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID === "Invalid_argument") {
        throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "generated_mocha_test.res",
            12655,
            35
          ],
          Error: new Error()
        };
      }
      throw exn;
    }
    if (exit === 1) {
      Stdlib.assertEqual(value, "ReScript");
    }
    let exit$1 = 0;
    let val;
    try {
      val = Stdlib_Null.getExn(null);
      exit$1 = 1;
    } catch (raw_exn$1) {
      let exn$1 = Primitive_exceptions.internalToException(raw_exn$1);
      if (exn$1.RE_EXN_ID !== "Invalid_argument") {
        throw exn$1;
      }
      
    }
    if (exit$1 === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          12661,
          7
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("getOr", () => {
    Stdlib_Null.getOr(null, "Banana");
    Stdlib_Null.getOr("Apple", "Banana");
    let greet = firstName => "Greetings " + Stdlib_Option.getOr(firstName, "Anonymous");
    greet(Primitive_option.fromNull("Jane"));
    greet(undefined);
  });
  Mocha.test("getUnsafe", () => {});
  Mocha.test("make", () => {});
  Mocha.test("map", () => {
    Stdlib_Null.map(3, x => x * x | 0);
    Stdlib_Null.map(null, x => x * x | 0);
  });
  Mocha.test("mapOr", () => {
    Stdlib_Null.mapOr(3, 0, x => x + 5 | 0);
    Stdlib_Null.mapOr(null, 0, x => x + 5 | 0);
  });
  Mocha.test("null", () => {
    console.log(null);
  });
  Mocha.test("toOption", () => {
    let nullStr = "Hello";
    if (nullStr !== null) {
      console.log("Got string:", nullStr);
    } else {
      console.log("Didn't have a value.");
    }
  });
});

Mocha.describe("Stdlib.Nullable", () => {
  Mocha.test("flatMap", () => {
    let addIfAboveOne = value => {
      if (value > 1) {
        return value + 1 | 0;
      } else {
        return null;
      }
    };
    Stdlib_Nullable.flatMap(2, addIfAboveOne);
    Stdlib_Nullable.flatMap(-4, addIfAboveOne);
    Stdlib_Nullable.flatMap(null, addIfAboveOne);
  });
  Mocha.test("forEach", () => {
    Stdlib_Nullable.forEach("thing", x => {
      console.log(x);
    });
    Stdlib_Nullable.forEach(null, x => {
      console.log(x);
    });
    Stdlib_Nullable.forEach(undefined, x => {
      console.log(x);
    });
  });
  Mocha.test("fromOption", () => {
    Stdlib_Nullable.fromOption("Hello");
  });
  Mocha.test("getExn", () => {
    let exit = 0;
    let value;
    try {
      value = Stdlib_Nullable.getExn('Hello');
      exit = 1;
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID === "Invalid_argument") {
        throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "generated_mocha_test.res",
            12762,
            35
          ],
          Error: new Error()
        };
      }
      throw exn;
    }
    if (exit === 1) {
      Stdlib.assertEqual(value, "Hello");
    }
    let exit$1 = 0;
    let val;
    try {
      val = Stdlib_Nullable.getExn(null);
      exit$1 = 1;
    } catch (raw_exn$1) {
      let exn$1 = Primitive_exceptions.internalToException(raw_exn$1);
      if (exn$1.RE_EXN_ID !== "Invalid_argument") {
        throw exn$1;
      }
      
    }
    if (exit$1 === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          12768,
          7
        ],
        Error: new Error()
      };
    }
    let exit$2 = 0;
    let val$1;
    try {
      val$1 = Stdlib_Nullable.getExn(undefined);
      exit$2 = 1;
    } catch (raw_exn$2) {
      let exn$2 = Primitive_exceptions.internalToException(raw_exn$2);
      if (exn$2.RE_EXN_ID !== "Invalid_argument") {
        throw exn$2;
      }
      
    }
    if (exit$2 === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          12773,
          7
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("getOr", () => {
    Stdlib_Nullable.getOr(null, "Banana");
    Stdlib_Nullable.getOr("Apple", "Banana");
    let greet = firstName => "Greetings " + Stdlib_Option.getOr(firstName, "Anonymous");
    greet(Primitive_option.fromNullable("Jane"));
    greet(undefined);
  });
  Mocha.test("getUnsafe", () => {});
  Mocha.test("isNullable", () => {
    if ("Hello" == null) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          12808,
          10
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("make", () => {
    let myStr = "Hello";
    if ((myStr == null) || myStr !== myStr) {
      console.log("Values did not match.");
    } else {
      console.log("Yay, values matched!");
    }
  });
  Mocha.test("map", () => {
    Stdlib_Nullable.map(3, x => x * x | 0);
    Stdlib_Nullable.map(undefined, x => x * x | 0);
  });
  Mocha.test("mapOr", () => {
    Stdlib_Nullable.mapOr(3, 0, x => x + 5 | 0);
    Stdlib_Nullable.mapOr(null, 0, x => x + 5 | 0);
  });
  Mocha.test("null", () => {
    console.log(null);
  });
  Mocha.test("toOption", () => {
    let nullableString = "Hello";
    if (nullableString == null) {
      console.log("Didn't have a value.");
    } else {
      console.log("Got string:", nullableString);
    }
  });
  Mocha.test("undefined", () => {
    console.log(undefined);
  });
});

Mocha.describe("Stdlib.Object", () => {
  Mocha.test("assign", () => {
    Object.assign({
      a: 1
    }, {
      a: 2
    });
    Object.assign({
      a: 1,
      b: 2
    }, {
      a: 0
    });
    Object.assign({
      a: 1
    }, {
      a: null
    });
  });
  Mocha.test("create", () => {
    let x = {
      fruit: "banana"
    };
    Object.create(x);
  });
  Mocha.test("freeze", () => {
    let obj = {
      a: 1
    };
    obj["a"] = 2;
    Object.freeze(obj);
    try {
      obj["a"] = 3;
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID !== Stdlib_Exn.$$Error) {
        throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "generated_mocha_test.res",
            12898,
            7
          ],
          Error: new Error()
        };
      }
      
    }
  });
  Mocha.test("get", () => {
    Stdlib_Option.isSome(({
        a: 1
      })["toString"]);
  });
  Mocha.test("getSymbol", () => {
    let fruit = Symbol("fruit");
    let x = {};
    x[fruit] = "banana";
  });
  Mocha.test("hasOwnProperty", () => {
    Object.prototype.hasOwnProperty.call({
      a: 1
    }, "a");
    Object.prototype.hasOwnProperty.call({
      a: 1
    }, "b");
    Object.prototype.hasOwnProperty.call({
      a: 1
    }, "toString");
  });
  Mocha.test("is", () => {
    Object.is(25, 13);
    Object.is("abc", "abc");
    Object.is(undefined, undefined);
    Object.is(undefined, null);
    Object.is(-0.0, 0.0);
    Object.is({
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    }, {
      hd: 1,
      tl: {
        hd: 2,
        tl: /* [] */0
      }
    });
    Object.is([
      1,
      2,
      3
    ], [
      1,
      2,
      3
    ]);
    Primitive_object.equal([
      1,
      2,
      3
    ], [
      1,
      2,
      3
    ]);
    let fruit = {
      name: "Apple"
    };
    Object.is(fruit, fruit);
    Object.is(fruit, {
      name: "Apple"
    });
    Primitive_object.equal(fruit, {
      name: "Apple"
    });
  });
  Mocha.test("isExtensible", () => {
    let obj = {
      a: 1
    };
    Object.isExtensible(obj);
    Object.preventExtensions(obj);
    Object.isExtensible(obj);
  });
  Mocha.test("isFrozen", () => {
    let point = Object.freeze({
      x: 1,
      y: 3
    });
    Object.isFrozen(point);
    let fruit = {
      name: "Apple"
    };
    Object.isFrozen(fruit);
  });
  Mocha.test("isSealed", () => {
    let point = Object.seal({
      x: 1,
      y: 3
    });
    Object.isSealed(point);
    let fruit = {
      name: "Apple"
    };
    Object.isSealed(fruit);
  });
  Mocha.test("keysToArray", () => {
    Object.keys({
      a: 1,
      b: 2
    });
    Object.keys({
      a: undefined
    });
    Object.keys({});
  });
  Mocha.test("make", () => {
    let x = {};
    Object.keys(x).length;
    Stdlib_Option.isSome(x["toString"]);
  });
  Mocha.test("preventExtensions", () => {
    let obj = {
      a: 1
    };
    obj["b"] = 2;
    Object.preventExtensions(obj);
    try {
      obj["c"] = 3;
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID !== Stdlib_Exn.$$Error) {
        throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "generated_mocha_test.res",
            13004,
            7
          ],
          Error: new Error()
        };
      }
      
    }
  });
  Mocha.test("seal", () => {
    let point = {
      x: 1,
      y: 2
    };
    point["x"] = -7;
    Object.seal(point);
    try {
      point["z"] = 9;
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID !== Stdlib_Exn.$$Error) {
        throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "generated_mocha_test.res",
            13019,
            7
          ],
          Error: new Error()
        };
      }
      
    }
    point["x"] = 13;
  });
  Mocha.test("set", () => {
    ({
        a: 1
      })["a"] = 2;
    ({
        a: 1
      })["a"] = undefined;
    ({
        a: 1
      })["b"] = 2;
  });
});

Mocha.describe("Stdlib.Option", () => {
  Mocha.test("all", () => {
    Stdlib_Option.all([
      1,
      2,
      3
    ]);
    Stdlib_Option.all([
      1,
      undefined
    ]);
  });
  Mocha.test("compare", () => {
    let clockCompare = (a, b) => Primitive_int.compare(a % 12, b % 12);
    Stdlib_Option.compare(3, 15, clockCompare);
    Stdlib_Option.compare(3, 14, clockCompare);
    Stdlib_Option.compare(2, 15, clockCompare);
    Stdlib_Option.compare(undefined, 15, clockCompare);
    Stdlib_Option.compare(14, undefined, clockCompare);
    Stdlib_Option.compare(undefined, undefined, clockCompare);
  });
  Mocha.test("equal", () => {
    let clockEqual = (a, b) => a % 12 === b % 12;
    Stdlib_Option.equal(3, 15, clockEqual);
    Stdlib_Option.equal(3, undefined, clockEqual);
    Stdlib_Option.equal(undefined, 3, clockEqual);
    Stdlib_Option.equal(undefined, undefined, clockEqual);
  });
  Mocha.test("filter", () => {
    Stdlib_Option.filter(10, x => x > 5);
    Stdlib_Option.filter(4, x => x > 5);
    Stdlib_Option.filter(undefined, x => x > 5);
  });
  Mocha.test("flatMap", () => {
    let addIfAboveOne = value => {
      if (value > 1) {
        return value + 1 | 0;
      }
      
    };
    Stdlib_Option.flatMap(2, addIfAboveOne);
    Stdlib_Option.flatMap(-4, addIfAboveOne);
    Stdlib_Option.flatMap(undefined, addIfAboveOne);
  });
  Mocha.test("forEach", () => {
    Stdlib_Option.forEach("thing", x => {
      console.log(x);
    });
    Stdlib_Option.forEach(undefined, x => {
      console.log(x);
    });
  });
  Mocha.test("getExn", () => {
    Stdlib.assertEqual(Stdlib_Option.getExn(3, undefined), 3);
    let exit = 0;
    let val;
    try {
      val = Stdlib_Option.getExn(undefined, undefined);
      exit = 1;
    } catch (exn) {
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          13105,
          7
        ],
        Error: new Error()
      };
    }
    let exit$1 = 0;
    let val$1;
    try {
      val$1 = Stdlib_Option.getExn(undefined, "was None!");
      exit$1 = 1;
    } catch (exn$1) {
      
    }
    if (exit$1 === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          13110,
          7
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("getOr", () => {
    Stdlib_Option.getOr(undefined, "Banana");
    Stdlib_Option.getOr("Apple", "Banana");
    let greet = firstName => "Greetings " + Stdlib_Option.getOr(firstName, "Anonymous");
    greet("Jane");
    greet(undefined);
  });
  Mocha.test("getUnsafe", () => {});
  Mocha.test("isNone", () => {
    Stdlib_Option.isNone(undefined);
    Stdlib_Option.isNone(1);
  });
  Mocha.test("isSome", () => {
    Stdlib_Option.isSome(undefined);
    Stdlib_Option.isSome(1);
  });
  Mocha.test("map", () => {
    Stdlib_Option.map(3, x => x * x | 0);
    Stdlib_Option.map(undefined, x => x * x | 0);
  });
  Mocha.test("mapOr", () => {
    Stdlib_Option.mapOr(3, 0, x => x + 5 | 0);
    Stdlib_Option.mapOr(undefined, 0, x => x + 5 | 0);
  });
  Mocha.test("orElse", () => {
    Primitive_object.equal(Stdlib_Option.orElse(1812, 1066), 1812);
    Primitive_object.equal(Stdlib_Option.orElse(undefined, 1066), 1066);
    Stdlib_Option.orElse(undefined, undefined) === undefined;
  });
});

Mocha.describe("Stdlib.Promise", () => {
  Mocha.test("all", () => {
    let promises = [
      Promise.resolve(1),
      Promise.resolve(2),
      Promise.resolve(3)
    ];
    Promise.all(promises).then(results => {
      results.forEach(num => {
        console.log("Number: ", num);
      });
      return Promise.resolve();
    });
  });
  Mocha.test("allSettled", () => {
    let TestError = /* @__PURE__ */Primitive_exceptions.create("TestError");
    let promises = [
      Promise.resolve(1),
      Promise.resolve(2),
      Promise.reject({
        RE_EXN_ID: TestError,
        _1: "some rejected promise"
      })
    ];
    Promise.allSettled(promises).then(results => {
      results.forEach(result => {
        if (result.status === "fulfilled") {
          console.log("Number: ", result.value);
          return;
        }
        console.log(result.reason);
      });
      return Promise.resolve();
    });
  });
  Mocha.test("any", () => {
    let racer = (ms, name) => new Promise((resolve, param) => {
      setTimeout(() => resolve(name), ms);
    });
    let promises = [
      racer(1000, "Turtle"),
      racer(500, "Hare"),
      racer(100, "Eagle")
    ];
    Promise.any(promises).then(winner => {
      console.log("The winner is " + winner);
      return Promise.resolve();
    });
  });
  Mocha.test("catch", () => {
    let SomeError = /* @__PURE__ */Primitive_exceptions.create("SomeError");
    Stdlib_Promise.$$catch(Promise.reject({
      RE_EXN_ID: SomeError,
      _1: "this is an error"
    }).then(param => Promise.resolve({
      TAG: "Ok",
      _0: "This result will never be returned"
    })), e => {
      let msg;
      if (e.RE_EXN_ID === SomeError) {
        msg = "ReScript error occurred: " + e._1;
      } else if (e.RE_EXN_ID === Stdlib_Exn.$$Error) {
        let msg$1 = e._1.message;
        msg = msg$1 !== undefined ? "JS exception occurred: " + msg$1 : "Some other JS value has been thrown";
      } else {
        msg = "Unexpected error occurred";
      }
      return Promise.resolve({
        TAG: "Error",
        _0: msg
      });
    }).then(result => {
      let tmp;
      if (result.TAG === "Ok") {
        console.log("Operation successful: ", result._0);
        tmp = undefined;
      } else {
        console.log("Operation failed: ", result._0);
        tmp = undefined;
      }
      return Promise.resolve(tmp);
    });
  });
  Mocha.test("finally", () => {
    let SomeError = /* @__PURE__ */Primitive_exceptions.create("SomeError");
    let isDone = {
      contents: false
    };
    Stdlib_Promise.$$catch(Promise.resolve(5).then(param => Promise.reject({
      RE_EXN_ID: SomeError,
      _1: "test"
    })).then(v => {
      console.log("final result", v);
      return Promise.resolve();
    }), param => {
      console.log("Error handled");
      return Promise.resolve();
    }).finally(() => {
      console.log("finally");
      isDone.contents = true;
    }).then(() => {
      console.log("isDone:", isDone.contents);
      return Promise.resolve();
    });
  });
  Mocha.test("make", () => {
    Stdlib_Promise.$$catch(new Promise((resolve, reject) => resolve("success")).then(str => Promise.resolve((console.log(str), undefined))), param => {
      console.log("Error occurred");
      return Promise.resolve();
    });
  });
  Mocha.test("race", () => {
    let racer = (ms, name) => new Promise((resolve, param) => {
      setTimeout(() => resolve(name), ms);
    });
    let promises = [
      racer(1000, "Turtle"),
      racer(500, "Hare"),
      racer(100, "Eagle")
    ];
    Promise.race(promises).then(winner => {
      console.log("The winner is " + winner);
      return Promise.resolve();
    });
  });
  Mocha.test("reject", () => {
    let TestError = /* @__PURE__ */Primitive_exceptions.create("TestError");
    Stdlib_Promise.$$catch(Promise.reject({
      RE_EXN_ID: TestError,
      _1: "some rejected value"
    }), v => {
      if (v.RE_EXN_ID === TestError) {
        Stdlib.assertEqual(v._1, "some rejected value");
      } else {
        throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "generated_mocha_test.res",
            13354,
            9
          ],
          Error: new Error()
        };
      }
      return Promise.resolve();
    });
  });
  Mocha.test("resolve", () => {
    Promise.resolve(5);
  });
  Mocha.test("then", () => {
    Promise.resolve(5).then(num => Promise.resolve(num + 5 | 0)).then(num => {
      console.log("Your lucky number is: ", num);
      return Promise.resolve();
    });
  });
  Mocha.test("thenResolve", () => {
    Promise.resolve("Anna").then(str => "Hello " + str).then(str => {
      console.log(str);
    });
  });
});

Mocha.describe("Stdlib.RegExp.Result", () => {
  Mocha.test("fullMatch", () => {
    let regexp = new RegExp("(\\w+) (\\w+)");
    let result = regexp.exec("ReScript is pretty cool, right?");
    if (result == null) {
      console.log("Nope, no match...");
    } else {
      console.log(result[0]);
    }
  });
  Mocha.test("input", () => {
    let regexp = new RegExp("(\\w+) (\\w+)");
    let result = regexp.exec("ReScript is pretty cool, right?");
    if (result == null) {
      console.log("Nope, no match...");
    } else {
      console.log(result.input);
    }
  });
  Mocha.test("matches", () => {
    let regexp = new RegExp("(\\w+) (\\w+)");
    let result = regexp.exec("ReScript is pretty cool, right?");
    if (result == null) {
      console.log("Nope, no match...");
    } else {
      let match = result.slice(1);
      if (match.length !== 2) {
        console.log("Didn't find exactly two words...");
      } else {
        let firstWord = match[0];
        let secondWord = match[1];
        console.log(firstWord, secondWord);
      }
    }
  });
});

Mocha.describe("Stdlib.RegExp", () => {
  Mocha.test("exec", () => {
    let regexp = new RegExp("\\w+");
    let result = regexp.exec("ReScript is pretty cool, right?");
    if (result == null) {
      console.log("Nope, no match...");
    } else {
      console.log(result[0]);
    }
  });
  Mocha.test("fromString", () => {
    let regexp = new RegExp("\\w+");
    let result = regexp.exec("ReScript is pretty cool, right?");
    if (result == null) {
      console.log("Nope, no match...");
    } else {
      console.log(result[0]);
    }
  });
  Mocha.test("fromStringWithFlags", () => {
    let regexp = new RegExp("\\w+", "g");
    let result = regexp.exec("ReScript is pretty cool, right?");
    if (result == null) {
      console.log("Nope, no match...");
    } else {
      console.log(result[0]);
    }
  });
  Mocha.test("global", () => {
    let regexp1 = new RegExp("\\w+", "g");
    console.log(regexp1.global);
    let regexp2 = new RegExp("\\w+", "i");
    console.log(regexp2.global);
  });
  Mocha.test("ignoreCase", () => {
    let regexp1 = new RegExp("\\w+", "g");
    console.log(regexp1.ignoreCase);
    let regexp2 = new RegExp("\\w+", "i");
    console.log(regexp2.ignoreCase);
  });
  Mocha.test("lastIndex", () => {
    let regexp = new RegExp("\\w+");
    console.log(regexp.lastIndex);
    regexp.exec("Many words here.");
    console.log(regexp.lastIndex);
  });
  Mocha.test("multiline", () => {
    let regexp1 = new RegExp("\\w+", "g");
    console.log(regexp1.multiline);
    let regexp2 = new RegExp("\\w+", "mi");
    console.log(regexp2.multiline);
  });
  Mocha.test("setLastIndex", () => {
    let regexp = new RegExp("\\w+");
    regexp.lastIndex = 4;
    regexp.exec("Many words here.");
    console.log(regexp.lastIndex);
  });
  Mocha.test("source", () => {
    let regexp = new RegExp("\\w+", "g");
    console.log(regexp.source);
  });
  Mocha.test("sticky", () => {
    let regexp1 = new RegExp("\\w+", "g");
    console.log(regexp1.unicode);
    let regexp2 = new RegExp("\\w+", "my");
    console.log(regexp2.unicode);
  });
  Mocha.test("test", () => {
    let regexp = new RegExp("\\w+");
    if (regexp.test("ReScript is cool!")) {
      console.log("Yay, there's a word in there.");
    }
    
  });
  Mocha.test("unicode", () => {
    let regexp1 = new RegExp("\\w+", "g");
    console.log(regexp1.unicode);
    let regexp2 = new RegExp("\\w+", "mu");
    console.log(regexp2.unicode);
  });
});

Mocha.describe("Stdlib.Result", () => {
  Mocha.test("all", () => {
    Stdlib_Result.all([
      {
        TAG: "Ok",
        _0: 1
      },
      {
        TAG: "Ok",
        _0: 2
      },
      {
        TAG: "Ok",
        _0: 3
      }
    ]);
    Stdlib_Result.all([
      {
        TAG: "Ok",
        _0: 1
      },
      {
        TAG: "Error",
        _0: 1
      }
    ]);
  });
  Mocha.test("compare", () => {
    let mod10cmp = (a, b) => Primitive_int.compare(a % 10, b % 10);
    Stdlib_Result.compare({
      TAG: "Ok",
      _0: 39
    }, {
      TAG: "Ok",
      _0: 57
    }, mod10cmp) === 1;
    Stdlib_Result.compare({
      TAG: "Ok",
      _0: 57
    }, {
      TAG: "Ok",
      _0: 39
    }, mod10cmp) === -1;
    Stdlib_Result.compare({
      TAG: "Ok",
      _0: 39
    }, {
      TAG: "Error",
      _0: "y"
    }, mod10cmp) === 1;
    Stdlib_Result.compare({
      TAG: "Error",
      _0: "x"
    }, {
      TAG: "Ok",
      _0: 57
    }, mod10cmp) === -1;
    Stdlib_Result.compare({
      TAG: "Error",
      _0: "x"
    }, {
      TAG: "Error",
      _0: "y"
    }, mod10cmp) === 0;
  });
  Mocha.test("equal", () => {
    let good1 = {
      TAG: "Ok",
      _0: 42
    };
    let good2 = {
      TAG: "Ok",
      _0: 32
    };
    let bad1 = {
      TAG: "Error",
      _0: "invalid"
    };
    let bad2 = {
      TAG: "Error",
      _0: "really invalid"
    };
    let mod10equal = (a, b) => a % 10 === b % 10;
    Stdlib_Result.equal(good1, good2, mod10equal) === true;
    Stdlib_Result.equal(good1, bad1, mod10equal) === false;
    Stdlib_Result.equal(bad2, good2, mod10equal) === false;
    Stdlib_Result.equal(bad1, bad2, mod10equal) === true;
  });
  Mocha.test("flatMap", () => {
    let recip = x => {
      if (x !== 0.0) {
        return {
          TAG: "Ok",
          _0: 1.0 / x
        };
      } else {
        return {
          TAG: "Error",
          _0: "Divide by zero"
        };
      }
    };
    Primitive_object.equal(Stdlib_Result.flatMap({
      TAG: "Ok",
      _0: 2.0
    }, recip), {
      TAG: "Ok",
      _0: 0.5
    });
    Primitive_object.equal(Stdlib_Result.flatMap({
      TAG: "Ok",
      _0: 0.0
    }, recip), {
      TAG: "Error",
      _0: "Divide by zero"
    });
    Primitive_object.equal(Stdlib_Result.flatMap({
      TAG: "Error",
      _0: "Already bad"
    }, recip), {
      TAG: "Error",
      _0: "Already bad"
    });
  });
  Mocha.test("forEach", () => {
    Stdlib_Result.forEach({
      TAG: "Ok",
      _0: 3
    }, prim => {
      console.log(prim);
    });
    Stdlib_Result.forEach({
      TAG: "Error",
      _0: "x"
    }, prim => {
      console.log(prim);
    });
  });
  Mocha.test("getExn", () => {
    Stdlib_Result.getExn({
      TAG: "Ok",
      _0: 42
    }) === 42;
    let exit = 0;
    let val;
    try {
      val = Stdlib_Result.getExn({
        TAG: "Error",
        _0: "Invalid data"
      });
      exit = 1;
    } catch (raw_exn) {
      let exn = Primitive_exceptions.internalToException(raw_exn);
      if (exn.RE_EXN_ID !== "Not_found") {
        throw exn;
      }
      
    }
    if (exit === 1) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          13658,
          9
        ],
        Error: new Error()
      };
    }
    
  });
  Mocha.test("getOr", () => {
    Stdlib_Result.getOr({
      TAG: "Ok",
      _0: 42
    }, 0) === 42;
    Stdlib_Result.getOr({
      TAG: "Error",
      _0: "Invalid Data"
    }, 0) === 0;
  });
  Mocha.test("map", () => {
    let f = x => Math.sqrt(x);
    Primitive_object.equal(Stdlib_Result.map({
      TAG: "Ok",
      _0: 64
    }, f), {
      TAG: "Ok",
      _0: 8.0
    });
    Primitive_object.equal(Stdlib_Result.map({
      TAG: "Error",
      _0: "Invalid data"
    }, f), {
      TAG: "Error",
      _0: "Invalid data"
    });
  });
  Mocha.test("mapError", () => {
    let format = n => "Error code: " + n.toString();
    Stdlib_Result.mapError({
      TAG: "Error",
      _0: 14
    }, format);
    Stdlib_Result.mapError({
      TAG: "Ok",
      _0: "abc"
    }, format);
  });
  Mocha.test("mapOr", () => {
    Stdlib_Result.mapOr({
      TAG: "Ok",
      _0: 42
    }, 0, x => x / 2 | 0) === 21;
    Stdlib_Result.mapOr({
      TAG: "Error",
      _0: "Invalid data"
    }, 0, x => x / 2 | 0) === 0;
  });
});

Mocha.describe("Stdlib.Set", () => {
  Mocha.test("add", () => {
    let set = new Set();
    set.add("someValue");
  });
  Mocha.test("clear", () => {
    let set = new Set();
    set.add("someKey");
    set.clear();
  });
  Mocha.test("delete", () => {
    let set = new Set();
    set.add("someValue");
    let didDeleteValue = set.delete("someValue");
    console.log(didDeleteValue);
    let didDeleteValue$1 = set.delete("someNonExistantKey");
    console.log(didDeleteValue$1);
  });
  Mocha.test("forEach", () => {
    let set = new Set();
    set.add("someValue");
    set.add("someValue2");
    set.forEach(value => {
      console.log(value);
    });
  });
  Mocha.test("fromArray", () => {
    let languageRank = [
      "ReScript",
      "JavaScript",
      "TypeScript"
    ];
    let set = new Set(languageRank);
    if (set.has("ReScript")) {
      console.log("Yay, ReScript is in there!");
    } else {
      console.log("Uh-oh, something is _terribly_ wrong with this program... abort.");
    }
  });
  Mocha.test("fromIterator", () => {
    let iterator = ((() => {
    var array1 = ['a', 'b', 'c'];
    var iterator1 = array1[Symbol.iterator]();
    return iterator1
  })());
    Stdlib.assertEqual(new Set(iterator).size, 3);
  });
  Mocha.test("has", () => {
    let set = new Set();
    set.add("someValue");
    if (set.has("someValue")) {
      console.log("Yay, we have the value!");
    } else {
      console.log("Nope, didn't have it.");
    }
  });
  Mocha.test("make", () => {
    new Set();
    let set = new Set();
    set.add("Fine name");
  });
  Mocha.test("size", () => {
    let set = new Set();
    set.add("someValue");
    set.add("someValue");
    set.add("someValue2");
  });
  Mocha.test("toArray", () => {
    let set = new Set([
      "apple",
      "orange",
      "apple",
      "banana"
    ]);
    Array.from(set);
  });
  Mocha.test("values", () => {
    let set = new Set();
    set.add("someValue");
    set.add("anotherValue");
    let values = set.values();
    console.log(values.next().value);
    console.log(Array.from(set.values()));
  });
});

Mocha.describe("Stdlib.String", () => {
  Mocha.test("charAt", () => {
    "ReScript".charAt(0) === "R";
    "Hello".charAt(12) === "";
    "JS".charAt(5) === "";
  });
  Mocha.test("charCodeAt", () => {
    "😺".charCodeAt(0) === 55357;
    Primitive_object.equal("😺".codePointAt(0), 128570);
  });
  Mocha.test("codePointAt", () => {
    Primitive_object.equal("¿😺?".codePointAt(1), 128570);
    "abc".codePointAt(5) === undefined;
  });
  Mocha.test("concat", () => {
    "cow".concat("bell") === "cowbell";
    "Re".concat("Script") === "ReScript";
  });
  Mocha.test("concatMany", () => {
    "1st".concat("2nd", "3rd", "4th") === "1st2nd3rd4th";
  });
  Mocha.test("endsWith", () => {
    "BuckleScript".endsWith("Script") === true;
    "BuckleShoes".endsWith("Script") === false;
  });
  Mocha.test("endsWithFrom", () => {
    "abcd".endsWith("cd", 4) === true;
    "abcde".endsWith("cd", 3) === false;
    "abcde".endsWith("cde", 99) === true;
    "example.dat".endsWith("ple", 7) === true;
  });
  Mocha.test("fromCharCode", () => {
    String.fromCharCode(65) === "A";
    String.fromCharCode(968) === "ψ";
    String.fromCharCode(54620) === "한";
    String.fromCharCode(-64568) === "ψ";
  });
  Mocha.test("fromCharCodeMany", () => {
    String.fromCharCode(189, 43, 190, 61) === "½+¾=";
    String.fromCharCode(65, 66, 67) === "ABC";
  });
  Mocha.test("fromCodePoint", () => {
    String.fromCodePoint(65) === "A";
    String.fromCodePoint(968) === "ψ";
    String.fromCodePoint(54620) === "한";
    String.fromCodePoint(128570) === "😺";
  });
  Mocha.test("fromCodePointMany", () => {
    String.fromCodePoint(54620, 44544, 128570) === "한글😺";
  });
  Mocha.test("get", () => {
    Primitive_object.equal("ReScript"[0], "R");
    Primitive_object.equal("Hello"[4], "o");
  });
  Mocha.test("getUnsafe", () => {});
  Mocha.test("includes", () => {
    "programmer".includes("gram") === true;
    "programmer".includes("er") === true;
    "programmer".includes("pro") === true;
    "programmer.dat".includes("xyz") === false;
  });
  Mocha.test("includesFrom", () => {
    "programmer".includes("gram", 1) === true;
    "programmer".includes("gram", 4) === false;
    "대한민국".includes("한", 1) === true;
  });
  Mocha.test("indexOf", () => {
    "bookseller".indexOf("ok") === 2;
    "bookseller".indexOf("sell") === 4;
    "beekeeper".indexOf("ee") === 1;
    "bookseller".indexOf("xyz") === -1;
  });
  Mocha.test("indexOfFrom", () => {
    "bookseller".indexOf("ok", 1) === 2;
    "bookseller".indexOf("sell", 2) === 4;
    "bookseller".indexOf("sell", 5) === -1;
  });
  Mocha.test("indexOfOpt", () => {
    Primitive_object.equal(Stdlib_String.indexOfOpt("bookseller", "ok"), 2);
    Stdlib_String.indexOfOpt("bookseller", "xyz") === undefined;
  });
  Mocha.test("lastIndexOf", () => {
    "bookseller".lastIndexOf("ok") === 2;
    "beekeeper".lastIndexOf("ee") === 4;
    "abcdefg".lastIndexOf("xyz") === -1;
  });
  Mocha.test("lastIndexOfFrom", () => {
    "bookseller".lastIndexOf("ok", 6) === 2;
    "beekeeper".lastIndexOf("ee", 8) === 4;
    "beekeeper".lastIndexOf("ee", 3) === 1;
    "abcdefg".lastIndexOf("xyz", 4) === -1;
  });
  Mocha.test("lastIndexOfOpt", () => {
    Primitive_object.equal(Stdlib_String.lastIndexOfOpt("bookseller", "ok"), 2);
    Primitive_object.equal(Stdlib_String.lastIndexOfOpt("beekeeper", "ee"), 4);
    Stdlib_String.lastIndexOfOpt("abcdefg", "xyz") === undefined;
  });
  Mocha.test("length", () => {});
  Mocha.test("localeCompare", () => {
    "a".localeCompare("c") < 0.0 === true;
    "a".localeCompare("a") === 0.0;
  });
  Mocha.test("make", () => {
    String(3.5) === "3.5";
    String([
      1,
      2,
      3
    ]) === "1,2,3";
  });
  Mocha.test("match", () => {
    Primitive_object.equal(Primitive_option.fromNullable("The better bats".match(/b[aeiou]t/)), ["bet"]);
    Primitive_object.equal(Primitive_option.fromNullable("The better bats".match(/b[aeiou]t/g)), [
      "bet",
      "bat"
    ]);
    Primitive_object.equal(Primitive_option.fromNullable("Today is 2018-04-05.".match(/(\d+)-(\d+)-(\d+)/)), [
      "2018-04-05",
      "2018",
      "04",
      "05"
    ]);
    Primitive_object.equal(Primitive_option.fromNullable("The optional example".match(/(foo)?(example)/)), [
      "example",
      undefined,
      "example"
    ]);
    Primitive_option.fromNullable("The large container.".match(/b[aeiou]g/)) === undefined;
  });
  Mocha.test("normalize", () => {
    let string1 = "\u00F1";
    let string2 = "\u006E\u0303";
    if (string1 === string2) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "generated_mocha_test.res",
          14036,
          0
        ],
        Error: new Error()
      };
    }
    Stdlib.assertEqual(string1.normalize(), string2.normalize());
  });
  Mocha.test("normalizeForm", () => {
    let string1 = "\uFB00";
    let string2 = "\u0066\u0066";
    console.log(string1 === string2);
    let normalizeString1 = string1.normalize("NFKD");
    let normalizeString2 = string2.normalize("NFKD");
    console.log(normalizeString1 === normalizeString2);
  });
  Mocha.test("padEnd", () => {
    "Hello".padEnd(10, ".") === "Hello.....";
    "abc".padEnd(1, "") === "abc";
  });
  Mocha.test("padStart", () => {
    "abc".padStart(5, " ") === "  abc";
    "abc".padStart(6, "123465") === "123abc";
  });
  Mocha.test("repeat", () => {
    "ha".repeat(3) === "hahaha";
    "empty".repeat(0) === "";
  });
  Mocha.test("replace", () => {
    "old string".replace("old", "new") === "new string";
    "the cat and the dog".replace("the", "this") === "this cat and the dog";
  });
  Mocha.test("replaceAll", () => {
    "old old string".replaceAll("old", "new") === "new new string";
    "the cat and the dog".replaceAll("the", "this") === "this cat and this dog";
  });
  Mocha.test("replaceAllRegExp", () => {
    "vowels be gone".replaceAll(/[aeiou]/g, "x") === "vxwxls bx gxnx";
    "aabbcc".replaceAll(/b/g, ".") === "aa..cc";
  });
  Mocha.test("replaceRegExp", () => {
    "vowels be gone".replace(/[aeiou]/g, "x") === "vxwxls bx gxnx";
    "Juan Fulano".replace(/(\w+) (\w+)/, "$2, $1") === "Fulano, Juan";
  });
  Mocha.test("replaceRegExpBy0Unsafe", () => {
    let re = /[aeiou]/g;
    let matchFn = (match, param, param$1) => match.toUpperCase();
    "beautiful vowels".replace(re, matchFn) === "bEAUtIfUl vOwEls";
  });
  Mocha.test("replaceRegExpBy1Unsafe", () => {
    let re = /(Jony is )\d+/g;
    let matchFn = (param, group1, param$1, param$2) => group1 + "41";
    "Jony is 40".replace(re, matchFn) === "Jony is 41";
  });
  Mocha.test("replaceRegExpBy2Unsafe", () => {
    let re = /(\d+) times (\d+)/;
    let matchFn = (param, group1, group2, param$1, param$2) => {
      let match = Stdlib_Int.fromString(group1, undefined);
      let match$1 = Stdlib_Int.fromString(group2, undefined);
      if (match !== undefined && match$1 !== undefined) {
        return (match * match$1 | 0).toString();
      } else {
        return "???";
      }
    };
    "7 times 6".replace(re, matchFn) === "42";
  });
  Mocha.test("search", () => {
    "testing 1 2 3".search(/\d+/) === 8;
    "no numbers".search(/\d+/) === -1;
  });
  Mocha.test("searchOpt", () => {
    Primitive_object.equal(Stdlib_String.searchOpt("testing 1 2 3", /\d+/), 8);
    Stdlib_String.searchOpt("no numbers", /\d+/) === undefined;
  });
  Mocha.test("slice", () => {
    "abcdefg".slice(2, 5) === "cde";
    "abcdefg".slice(2, 9) === "cdefg";
    "abcdefg".slice(-4, -2) === "de";
    "abcdefg".slice(5, 1) === "";
  });
  Mocha.test("sliceToEnd", () => {
    "abcdefg".slice(4) === "efg";
    "abcdefg".slice(-2) === "fg";
    "abcdefg".slice(7) === "";
  });
  Mocha.test("split", () => {
    Primitive_object.equal("2018-01-02".split("-"), [
      "2018",
      "01",
      "02"
    ]);
    Primitive_object.equal("a,b,,c".split(","), [
      "a",
      "b",
      "",
      "c"
    ]);
    Primitive_object.equal("good::bad as great::awful".split("::"), [
      "good",
      "bad as great",
      "awful"
    ]);
    Primitive_object.equal("has-no-delimiter".split(";"), ["has-no-delimiter"]);
  });
  Mocha.test("splitAtMost", () => {
    Primitive_object.equal("ant/bee/cat/dog/elk".split("/", 3), [
      "ant",
      "bee",
      "cat"
    ]);
    Primitive_object.equal("ant/bee/cat/dog/elk".split("/", 0), []);
    Primitive_object.equal("ant/bee/cat/dog/elk".split("/", 9), [
      "ant",
      "bee",
      "cat",
      "dog",
      "elk"
    ]);
  });
  Mocha.test("splitByRegExp", () => {
    Primitive_object.equal("Jan,Feb,Mar".split(/,/), [
      "Jan",
      "Feb",
      "Mar"
    ]);
  });
  Mocha.test("splitByRegExpAtMost", () => {
    Primitive_object.equal("Hello World. How are you doing?".split(/ /, 3), [
      "Hello",
      "World.",
      "How"
    ]);
  });
  Mocha.test("startsWith", () => {
    "BuckleScript".startsWith("Buckle") === true;
    "BuckleScript".startsWith("") === true;
    "JavaScript".startsWith("Buckle") === false;
  });
  Mocha.test("startsWithFrom", () => {
    "BuckleScript".startsWith("kle", 3) === true;
    "BuckleScript".startsWith("", 3) === true;
    "JavaScript".startsWith("Buckle", 2) === false;
  });
  Mocha.test("substring", () => {
    "playground".substring(3, 6) === "ygr";
    "playground".substring(6, 3) === "ygr";
    "playground".substring(4, 12) === "ground";
  });
  Mocha.test("substringToEnd", () => {
    "playground".substring(4) === "ground";
    "playground".substring(-3) === "playground";
    "playground".substring(12) === "";
  });
  Mocha.test("toLowerCase", () => {
    "ABC".toLowerCase() === "abc";
    "ΣΠ".toLowerCase() === "σπ";
    "ΠΣ".toLowerCase() === "πς";
  });
  Mocha.test("toUpperCase", () => {
    "abc".toUpperCase() === "ABC";
    "Straße".toUpperCase() === "STRASSE";
    "πς".toUpperCase() === "ΠΣ";
  });
  Mocha.test("trim", () => {
    "   abc def   ".trim() === "abc def";
    "\n\r\t abc def \n\n\t\r ".trim() === "abc def";
  });
  Mocha.test("trimEnd", () => {
    "   Hello world!   ".trimEnd() === "   Hello world!";
    "   Hello   world!   ".trimEnd() === "   Hello   world!";
  });
  Mocha.test("trimStart", () => {
    "   Hello world!   ".trimStart() === "Hello world!   ";
    "   Hello   world!   ".trimStart() === "Hello   world!   ";
  });
  Mocha.test("unsafeReplaceRegExpBy0", () => {
    let re = /[aeiou]/g;
    let matchFn = (match, param, param$1) => match.toUpperCase();
    "beautiful vowels".replace(re, matchFn) === "bEAUtIfUl vOwEls";
  });
  Mocha.test("unsafeReplaceRegExpBy1", () => {
    let re = /(Jony is )\d+/g;
    let matchFn = (param, group1, param$1, param$2) => group1 + "41";
    "Jony is 40".replace(re, matchFn) === "Jony is 41";
  });
  Mocha.test("unsafeReplaceRegExpBy2", () => {
    let re = /(\d+) times (\d+)/;
    let matchFn = (param, group1, group2, param$1, param$2) => {
      let match = Stdlib_Int.fromString(group1, undefined);
      let match$1 = Stdlib_Int.fromString(group2, undefined);
      if (match !== undefined && match$1 !== undefined) {
        return (match * match$1 | 0).toString();
      } else {
        return "???";
      }
    };
    "7 times 6".replace(re, matchFn) === "42";
  });
});

Mocha.describe("Stdlib.Symbol", () => {
  Mocha.test("description", () => {
    let sym = Symbol("sym1");
    Stdlib.assertEqual(sym.description, "sym1");
  });
  Mocha.test("getFor", () => {
    Stdlib.assertEqual(Symbol.for("sym1"), Symbol.for("sym1"));
  });
  Mocha.test("keyFor", () => {
    let globalSym = Symbol.for("sym1");
    Stdlib.assertEqual(Stdlib_Option.flatMap(globalSym, prim => prim.description), "sym1");
  });
  Mocha.test("make", () => {
    Stdlib.assertEqual(Symbol("sym1").description, "sym1");
  });
  Mocha.test("toString", () => {
    let sym = Symbol("sym1");
    Stdlib.assertEqual(sym.toString(), "Symbol(sym1)");
  });
});

Mocha.describe("Stdlib.Type.Classify", () => {
  Mocha.test("classify", () => {
    let match = Stdlib_Type.Classify.classify(null);
    if (typeof match !== "object" && match === "Null") {
      console.log("Yup, that's null.");
    } else {
      console.log("This doesn't actually appear to be null...");
    }
  });
});

Mocha.describe("Stdlib.Type", () => {
  Mocha.test("typeof", () => {
    console.log("string");
    let match = "boolean";
    if (match === "boolean") {
      console.log("This is a bool, yay!");
    } else {
      console.log("Oh, not a bool sadly...");
    }
  });
});

/*  Not a pure module */
