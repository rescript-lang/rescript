// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Nodefs from "node:fs";
import * as Nodeos from "node:os";
import * as Nodeurl from "node:url";
import * as Nodepath from "node:path";
import * as ArrayUtils from "./ArrayUtils.res.js";
import * as SpawnAsync from "./SpawnAsync.res.js";
import * as Stdlib_Int from "rescript/lib/es6/Stdlib_Int.js";
import * as Stdlib_Dict from "rescript/lib/es6/Stdlib_Dict.js";
import * as Stdlib_Array from "rescript/lib/es6/Stdlib_Array.js";
import * as Stdlib_Option from "rescript/lib/es6/Stdlib_Option.js";
import * as Stdlib_JsError from "rescript/lib/es6/Stdlib_JsError.js";
import * as Primitive_string from "rescript/lib/es6/Primitive_string.js";
import * as Promises from "node:fs/promises";
import * as Primitive_exceptions from "rescript/lib/es6/Primitive_exceptions.js";

let nodeVersion = Stdlib_Option.getOrThrow(Stdlib_Int.fromString(Stdlib_Option.getOrThrow(process.version.replace("v", "").split(".")[0], "Failed to find major version of Node"), undefined), "Failed to convert node version to Int");

let ignoreRuntimeTests = [
  [
    20,
    [
      "Stdlib_Array.toReversed",
      "Stdlib_Array.toSorted"
    ]
  ],
  [
    22,
    [
      "Stdlib_Promise.withResolvers",
      "Stdlib_Set.union",
      "Stdlib_Set.isSupersetOf",
      "Stdlib_Set.isSubsetOf",
      "Stdlib_Set.isDisjointFrom",
      "Stdlib_Set.intersection",
      "Stdlib_Set.symmetricDifference",
      "Stdlib_Set.difference"
    ]
  ]
];

function getOutput(buffer) {
  return buffer.map(e => e.toString()).join("");
}

async function extractDocFromFile(file) {
  let toolsBin = Nodepath.join(process.cwd(), "cli", "rescript-tools.js");
  let match = await SpawnAsync.run(toolsBin, [
    "extract-codeblocks",
    file,
    "--transform-assert-equal"
  ], undefined);
  try {
    return JSON.parse(getOutput(match.stdout));
  } catch (raw_e) {
    let e = Primitive_exceptions.internalToException(raw_e);
    if (e.RE_EXN_ID === "JsExn") {
      console.error(e._1);
      return Stdlib_JsError.panic("Failed to extract code blocks from " + file);
    }
    throw e;
  }
}

let batchSize = Nodeos.cpus().length;

async function extractExamples() {
  let files = Nodefs.readdirSync("runtime");
  let docFiles = files.filter(f => {
    if (f.startsWith("Js") || f.startsWith("RescriptTools")) {
      return false;
    } else if (f.endsWith(".resi")) {
      return true;
    } else if (f.endsWith(".res")) {
      return !files.includes(f + "i");
    } else {
      return false;
    }
  });
  console.log("Extracting examples from " + docFiles.length.toString() + " runtime files...");
  let examples = [];
  await ArrayUtils.forEachAsyncInBatches(docFiles, batchSize, async f => {
    let doc = await extractDocFromFile(Nodepath.join("runtime", f));
    if (doc.TAG === "Ok") {
      examples.push(...doc._0.filter(d => d.code.includes("assertEqual(")));
      return;
    }
    console.error(doc._0);
  });
  examples.sort((a, b) => Primitive_string.compare(a.id, b.id));
  return examples;
}

async function main() {
  let examples = await extractExamples();
  let dict = {};
  examples.forEach(cur => {
    let modulePath = cur.id.split(".");
    let id = modulePath.slice(0, modulePath.length - 1 | 0).join(".");
    let p = dict[id];
    let previous = p !== undefined ? p : [];
    dict[id] = [cur].concat(previous);
  });
  let output = [];
  Stdlib_Dict.forEachWithKey(dict, (examples, key) => {
    examples.sort((a, b) => Primitive_string.compare(a.name, b.name));
    let codeExamples = Stdlib_Array.filterMap(examples, example => {
      let ignoreExample = ignoreRuntimeTests.some(param => {
        if (nodeVersion < param[0]) {
          return param[1].includes(example.id);
        } else {
          return false;
        }
      });
      if (ignoreExample) {
        console.warn("Ignoring " + example.id + " tests. Not supported by Node " + nodeVersion.toString());
        return;
      }
      let code = example.code;
      if (code.length === 0) {
        return;
      } else {
        return "test(\"" + example.name + "\", () => {\n  module Test = {\n    " + code + "\n  }\n  ()\n})";
      }
    });
    if (codeExamples.length <= 0) {
      return;
    }
    let content = "describe(\"" + key + "\", () => {\n" + codeExamples.join("\n") + "\n })";
    output.push(content);
  });
  let dirname = Nodepath.dirname(Nodeurl.fileURLToPath(import.meta.url));
  let filepath = Nodepath.join(dirname, "generated_mocha_test.res");
  let fileContent = "open Mocha\n@@warning(\"-32-34-60-37-109-3-44\")\n\n" + output.join("\n");
  return await Promises.writeFile(filepath, fileContent);
}

await main();

/* nodeVersion Not a pure module */
