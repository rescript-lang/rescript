let greetUser =
  ((Function$
      ((fun userId ->
          ((let name = ((getUserName userId)[@res.await ]) in
            ({js|Hello |js} ^ name) ^ {js|!|js})
          [@res.braces ]))
      [@res.async ]))
  [@res.arity 1])
;;((Function$ ((fun () -> 123)[@res.async ]))[@res.arity 1])
let fetch = ((Function$ ((fun url -> browserFetch url)[@res.async ]))
  [@res.braces ][@res.arity 1])
let fetch2 =
  ((((Function$ (((fun url -> browserFetch url))[@res.async ]))
    [@res.arity 1]);
    ((Function$ (((fun url -> browserFetch2 url))[@res.async ]))
    [@res.arity 1]))
  [@res.braces ])
let async =
  ((let f = async () in
    () |.u async;
    async ();
    async.async;
    { async = (async.(async)) };
    (result |.u async) |.u
      (mapAsync ((Function$ (fun a -> doStuff a))[@res.arity 1])))
  [@res.braces ])
let f =
  ((if isPositive
    then ((Function$ ((fun a -> fun b -> (a + b : int))[@res.async ]))
      [@res.arity 2])
    else ((Function$ (((fun c -> fun d -> (c - d : int)))[@res.async ]))
      [@res.arity 2]))
  [@res.ternary ])
let foo = async ~a:((34)[@res.namedArgLoc ])
let bar =
  ((Function$ ((fun ~a:((a)[@res.namedArgLoc ]) -> a + 1)[@res.async ]))
  [@res.arity 1])
let ex1 = ((3)[@res.await ]) + ((4)[@res.await ])
let ex2 = ((3)[@res.await ]) ** ((4)[@res.await ])
let ex3 = ((foo |.u (bar ~arg:((arg)[@res.namedArgLoc ])))[@res.await ])
let ex4 = (((foo.bar).baz)[@res.await ])