let cApp = foo 3
let uApp = ((foo 3)[@res.uapp ])
let cFun x = 3
let uFun = { Js.Fn.I1 = (fun x -> 3) }
let mixFun a =
  {
    Js.Fn.I2 =
      (fun b ->
         fun c ->
           ((fun d -> fun e -> fun f -> fun g -> { Js.Fn.I1 = (fun h -> 4) })
           [@ns.braces ]))
  }
let bracesFun = { Js.Fn.I1 = (fun x -> ((fun y -> x + y)[@ns.braces ])) }
let cFun2 x y = 3
let uFun2 = { Js.Fn.I2 = (fun x -> fun y -> 3) }
type nonrec cTyp = string -> int
type nonrec uTyp = (string -> int) Js.Fn.arity1
type nonrec mixTyp =
  string ->
    (string ->
       string ->
         string -> string -> string -> string -> (string -> int) Js.Fn.arity1)
      Js.Fn.arity2
type nonrec bTyp = (string -> string -> int) Js.Fn.arity1
type nonrec cTyp2 = string -> string -> int
type nonrec uTyp2 = (string -> string -> int) Js.Fn.arity2
type nonrec cu = unit -> int
type nonrec cp = unit -> int
type nonrec cuu = unit -> unit -> int
type nonrec cpu = unit -> unit -> int
type nonrec cup = unit -> unit -> int
type nonrec cpp = unit -> unit -> int
type nonrec cu2 = unit -> unit -> unit
type nonrec cp2 = unit -> unit -> unit
type nonrec uu = (unit -> int) Js.Fn.arity1
type nonrec up = (unit -> int) Js.Fn.arity1
type nonrec uuu = (unit -> (unit -> int) Js.Fn.arity1) Js.Fn.arity1
type nonrec upu = (unit -> (unit -> int) Js.Fn.arity1) Js.Fn.arity1
type nonrec uup = (unit -> (unit -> int) Js.Fn.arity1) Js.Fn.arity1
type nonrec upp = (unit -> (unit -> int) Js.Fn.arity1) Js.Fn.arity1
type nonrec uu2 = (unit -> unit -> unit) Js.Fn.arity2
type nonrec up2 = (unit -> unit -> unit) Js.Fn.arity2
type nonrec cnested = (string -> unit) -> unit
type nonrec unested = ((string -> unit) Js.Fn.arity1 -> unit) Js.Fn.arity1
let (uannpoly : ('a -> string) Js.Fn.arity1) = xx
let (uannint : (int -> string) Js.Fn.arity1) = xx
let _ = { Js.Fn.I1 = ((fun x -> 34)[@att ]) }
let _ = { Js.Fn.I1 = ((fun x -> 34)[@res.async ][@att ]) }
let _ = preserveAttr { Js.Fn.I1 = ((fun x -> 34)[@att ]) }
let _ = preserveAttr { Js.Fn.I1 = ((fun x -> 34)[@res.async ][@att ]) }
let t0 (type a) (type b) (l : a list) (x : a) = x :: l
let t1 (type a) (type b) =
  { Js.Fn.I2 = (fun (l : a list) -> fun (x : a) -> x :: l) }
let t2 (type a) (type b) =
  { Js.Fn.I2 = (fun (l : a list) -> fun (x : a) -> x :: l) }
let t3 (type a) (type b) =
  { Js.Fn.I2 = (fun (l : a list) -> fun (x : a) -> x :: l) }
let t4 (type a) (type b) (l : a list) (x : a) = x :: l
let t5 (type a) (type b) =
  { Js.Fn.I2 = (fun (l : a list) -> fun (x : a) -> x :: l) }
let t6 (type a) (type b) =
  { Js.Fn.I2 = (fun (l : a list) -> fun (x : a) -> x :: l) }
[@@@uncurried ]
let cApp = foo 3
let uApp = ((foo 3)[@res.uapp ])
let cFun x = 3
let uFun = { Js.Fn.I1 = (fun x -> 3) }
let mixFun a =
  {
    Js.Fn.I2 =
      (fun b ->
         fun c ->
           ((fun d -> fun e -> fun f -> fun g -> { Js.Fn.I1 = (fun h -> 4) })
           [@ns.braces ]))
  }
let bracesFun = { Js.Fn.I1 = (fun x -> ((fun y -> x + y)[@ns.braces ])) }
let cFun2 x y = 3
let uFun2 = { Js.Fn.I2 = (fun x -> fun y -> 3) }
let cFun2Dots x y = 3
type nonrec cTyp = string -> int
type nonrec uTyp = (string -> int) Js.Fn.arity1
type nonrec mixTyp =
  string ->
    (string ->
       string ->
         string -> string -> string -> string -> (string -> int) Js.Fn.arity1)
      Js.Fn.arity2
type nonrec bTyp = (string -> string -> int) Js.Fn.arity1
type nonrec cTyp2 = string -> string -> int
type nonrec uTyp2 = (string -> string -> int) Js.Fn.arity2
type nonrec cu = unit -> int
type nonrec cp = unit -> int
type nonrec cuu = unit -> unit -> int
type nonrec cpu = unit -> unit -> int
type nonrec cup = unit -> unit -> int
type nonrec cpp = unit -> unit -> int
type nonrec cu2 = unit -> unit -> unit
type nonrec cp2 = unit -> unit -> unit
type nonrec uu = (unit -> int) Js.Fn.arity1
type nonrec up = (unit -> int) Js.Fn.arity1
type nonrec uuu = (unit -> (unit -> int) Js.Fn.arity1) Js.Fn.arity1
type nonrec upu = (unit -> (unit -> int) Js.Fn.arity1) Js.Fn.arity1
type nonrec uup = (unit -> (unit -> int) Js.Fn.arity1) Js.Fn.arity1
type nonrec upp = (unit -> (unit -> int) Js.Fn.arity1) Js.Fn.arity1
type nonrec uu2 = (unit -> unit -> unit) Js.Fn.arity2
type nonrec up2 = (unit -> unit -> unit) Js.Fn.arity2
type nonrec cnested = (string -> unit) -> unit
type nonrec unested = ((string -> unit) Js.Fn.arity1 -> unit) Js.Fn.arity1
let pipe1 = 3 |.u f
let (uannpoly : ('a -> string) Js.Fn.arity1) = xx
let (uannint : (int -> string) Js.Fn.arity1) = xx
let _ = { Js.Fn.I1 = ((fun x -> 34)[@att ]) }
let _ = { Js.Fn.I1 = ((fun x -> 34)[@res.async ][@att ]) }
let _ = ((preserveAttr { Js.Fn.I1 = ((fun x -> 34)[@att ]) })[@res.uapp ])
let _ = ((preserveAttr { Js.Fn.I1 = ((fun x -> 34)[@res.async ][@att ]) })
  [@res.uapp ])
let t0 (type a) (type b) =
  { Js.Fn.I2 = (fun (l : a list) -> fun (x : a) -> x :: l) }
let t1 (type a) (type b) (l : a list) (x : a) = x :: l
let t2 (type a) (type b) (l : a list) (x : a) = x :: l
let t3 (type a) (type b) (l : a list) (x : a) = x :: l