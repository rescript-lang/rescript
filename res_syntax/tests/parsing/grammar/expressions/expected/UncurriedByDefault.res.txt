let cApp = foo 3
let uApp = ((foo 3)[@bs ])
let cFun x = 3
let uFun = { Js.Fn.I1 = (fun x -> 3) }
let mixFun a =
  {
    Js.Fn.I2 =
      (fun b ->
         fun c ->
           ((fun d -> fun e -> fun f -> fun g -> { Js.Fn.I1 = (fun h -> 4) })
           [@ns.braces ]))
  }
let bracesFun = { Js.Fn.I1 = (fun x -> ((fun y -> x + y)[@ns.braces ])) }
let cFun2 x y = 3
let uFun2 = { Js.Fn.I2 = (fun x -> fun y -> 3) }
type nonrec cTyp = string -> int
type nonrec uTyp = (string -> int) Js.Fn.arity1
type nonrec mixTyp =
  string ->
    (string ->
       string ->
         string -> string -> string -> string -> (string -> int) Js.Fn.arity1)
      Js.Fn.arity2
type nonrec bTyp = (string -> string -> int) Js.Fn.arity1
type nonrec cTyp2 = string -> string -> int
type nonrec uTyp2 = (string -> string -> int) Js.Fn.arity2
[@@@uncurried ]
let cApp = foo 3
let uApp = ((foo 3)[@bs ])
let cFun x = 3
let uFun = { Js.Fn.I1 = (fun x -> 3) }
let mixFun a =
  {
    Js.Fn.I2 =
      (fun b ->
         fun c ->
           ((fun d -> fun e -> fun f -> fun g -> { Js.Fn.I1 = (fun h -> 4) })
           [@ns.braces ]))
  }
let bracesFun = { Js.Fn.I1 = (fun x -> ((fun y -> x + y)[@ns.braces ])) }
let cFun2 x y = 3
let uFun2 = { Js.Fn.I2 = (fun x -> fun y -> 3) }
let cFun2Dots x y = 3
type nonrec cTyp = string -> int
type nonrec uTyp = (string -> int) Js.Fn.arity1
type nonrec mixTyp =
  string ->
    (string ->
       string ->
         string -> string -> string -> string -> (string -> int) Js.Fn.arity1)
      Js.Fn.arity2
type nonrec bTyp = (string -> string -> int) Js.Fn.arity1
type nonrec cTyp2 = string -> string -> int
type nonrec uTyp2 = (string -> string -> int) Js.Fn.arity2