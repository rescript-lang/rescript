// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

let List = require("../../lib/js/list.js");
let Hashtbl = require("../../lib/js/hashtbl.js");
let Caml_obj = require("../../lib/js/caml_obj.js");
let Pervasives = require("../../lib/js/pervasives.js");
let Caml_format = require("../../lib/js/caml_format.js");
let Caml_option = require("../../lib/js/caml_option.js");
let Caml_js_exceptions = require("../../lib/js/caml_js_exceptions.js");

let equal = Caml_obj.equal;

let compare = Caml_obj.compare;

let hash = Hashtbl.hash;

function of_int(x) {
  return {
    NAME: "Atom",
    VAL: String(x)
  };
}

function of_float(x) {
  return {
    NAME: "Atom",
    VAL: Pervasives.string_of_float(x)
  };
}

function of_bool(x) {
  return {
    NAME: "Atom",
    VAL: x ? "true" : "false"
  };
}

function atom(x) {
  return {
    NAME: "Atom",
    VAL: x
  };
}

function of_list(l) {
  return {
    NAME: "List",
    VAL: l
  };
}

function of_rev_list(l) {
  return {
    NAME: "List",
    VAL: List.rev(l)
  };
}

function of_pair(param) {
  return {
    NAME: "List",
    VAL: {
      hd: param[0],
      tl: {
        hd: param[1],
        tl: /* [] */0
      }
    }
  };
}

function of_triple(param) {
  return {
    NAME: "List",
    VAL: {
      hd: param[0],
      tl: {
        hd: param[1],
        tl: {
          hd: param[2],
          tl: /* [] */0
        }
      }
    }
  };
}

function of_quad(param) {
  return {
    NAME: "List",
    VAL: {
      hd: param[0],
      tl: {
        hd: param[1],
        tl: {
          hd: param[2],
          tl: {
            hd: param[3],
            tl: /* [] */0
          }
        }
      }
    }
  };
}

function of_variant(name, args) {
  return {
    NAME: "List",
    VAL: {
      hd: {
        NAME: "Atom",
        VAL: name
      },
      tl: args
    }
  };
}

function of_field(name, t) {
  return {
    NAME: "List",
    VAL: {
      hd: {
        NAME: "Atom",
        VAL: name
      },
      tl: {
        hd: t,
        tl: /* [] */0
      }
    }
  };
}

function of_record(l) {
  return {
    NAME: "List",
    VAL: List.map(param => of_field(param[0], param[1]), l)
  };
}

function $$return(x) {
  return Caml_option.some(x);
}

function $great$pipe$eq(e, f) {
  if (e !== undefined) {
    return Caml_option.some(f(Caml_option.valFromOption(e)));
  }
  
}

function $great$great$eq(e, f) {
  if (e !== undefined) {
    return f(Caml_option.valFromOption(e));
  }
  
}

function map_opt(f, l) {
  let _acc = /* [] */0;
  let _l = l;
  while (true) {
    let l$1 = _l;
    let acc = _acc;
    if (!l$1) {
      return List.rev(acc);
    }
    let y = f(l$1.hd);
    if (y === undefined) {
      return;
    }
    _l = l$1.tl;
    _acc = {
      hd: Caml_option.valFromOption(y),
      tl: acc
    };
    continue;
  };
}

function list_any(f, e) {
  if (e.NAME === "List") {
    let _l = e.VAL;
    while (true) {
      let l = _l;
      if (!l) {
        return;
      }
      let res = f(l.hd);
      if (res !== undefined) {
        return res;
      }
      _l = l.tl;
      continue;
    };
  }
  
}

function list_all(f, e) {
  if (e.NAME === "List") {
    let _acc = /* [] */0;
    let _l = e.VAL;
    while (true) {
      let l = _l;
      let acc = _acc;
      if (!l) {
        return List.rev(acc);
      }
      let tl = l.tl;
      let y = f(l.hd);
      if (y !== undefined) {
        _l = tl;
        _acc = {
          hd: Caml_option.valFromOption(y),
          tl: acc
        };
        continue;
      }
      _l = tl;
      continue;
    };
  } else {
    return /* [] */0;
  }
}

function _try_atom(e, f) {
  if (e.NAME === "List") {
    return;
  }
  try {
    return Caml_option.some(f(e.VAL));
  } catch (exn) {
    return;
  }
}

function to_int(e) {
  return _try_atom(e, Caml_format.int_of_string);
}

function to_bool(e) {
  return _try_atom(e, Pervasives.bool_of_string);
}

function to_float(e) {
  return _try_atom(e, Caml_format.float_of_string);
}

function to_string(e) {
  return _try_atom(e, x => x);
}

function to_pair(e) {
  if (typeof e !== "object") {
    return;
  }
  if (e.NAME !== "List") {
    return;
  }
  let match = e.VAL;
  if (!match) {
    return;
  }
  let match$1 = match.tl;
  if (match$1 && !match$1.tl) {
    return [
      match.hd,
      match$1.hd
    ];
  }
  
}

function to_pair_with(f1, f2) {
  return e => $great$great$eq(to_pair(e), param => {
    let y = param[1];
    return $great$great$eq(f1(param[0]), x => $great$great$eq(f2(y), y => [
      x,
      y
    ]));
  });
}

function to_triple(e) {
  if (typeof e !== "object") {
    return;
  }
  if (e.NAME !== "List") {
    return;
  }
  let match = e.VAL;
  if (!match) {
    return;
  }
  let match$1 = match.tl;
  if (!match$1) {
    return;
  }
  let match$2 = match$1.tl;
  if (match$2 && !match$2.tl) {
    return [
      match.hd,
      match$1.hd,
      match$2.hd
    ];
  }
  
}

function to_triple_with(f1, f2, f3) {
  return e => $great$great$eq(to_triple(e), param => {
    let z = param[2];
    let y = param[1];
    return $great$great$eq(f1(param[0]), x => $great$great$eq(f2(y), y => $great$great$eq(f3(z), z => [
      x,
      y,
      z
    ])));
  });
}

function to_list(e) {
  if (e.NAME === "List") {
    return Caml_option.some(e.VAL);
  }
  
}

function to_list_with(f) {
  return e => {
    if (e.NAME === "List") {
      return map_opt(f, e.VAL);
    }
    
  };
}

function get_field(name) {
  return e => {
    if (e.NAME === "List") {
      let _l = e.VAL;
      while (true) {
        let l = _l;
        if (!l) {
          return;
        }
        let match = l.hd;
        if (typeof match === "object") {
          if (match.NAME === "List") {
            let match$1 = match.VAL;
            if (match$1) {
              let match$2 = match$1.hd;
              if (typeof match$2 === "object") {
                if (match$2.NAME === "Atom") {
                  let match$3 = match$1.tl;
                  if (match$3) {
                    if (match$3.tl) {
                      _l = l.tl;
                      continue;
                    }
                    if (Caml_obj.equal(name, match$2.VAL)) {
                      return match$3.hd;
                    }
                    _l = l.tl;
                    continue;
                  }
                  _l = l.tl;
                  continue;
                }
                _l = l.tl;
                continue;
              }
              _l = l.tl;
              continue;
            }
            _l = l.tl;
            continue;
          }
          _l = l.tl;
          continue;
        }
        _l = l.tl;
        continue;
      };
    }
    
  };
}

function field(name, f) {
  return e => $great$great$eq(get_field(name)(e), f);
}

function _get_field_list(name, _l) {
  while (true) {
    let l = _l;
    if (!l) {
      return;
    }
    let match = l.hd;
    if (typeof match === "object") {
      if (match.NAME === "List") {
        let match$1 = match.VAL;
        if (match$1) {
          let match$2 = match$1.hd;
          if (typeof match$2 === "object") {
            if (match$2.NAME === "Atom") {
              if (Caml_obj.equal(name, match$2.VAL)) {
                return match$1.tl;
              }
              _l = l.tl;
              continue;
            }
            _l = l.tl;
            continue;
          }
          _l = l.tl;
          continue;
        }
        _l = l.tl;
        continue;
      }
      _l = l.tl;
      continue;
    }
    _l = l.tl;
    continue;
  };
}

function field_list(name, f) {
  return e => {
    if (e.NAME === "List") {
      return $great$great$eq(_get_field_list(name, e.VAL), f);
    }
    
  };
}

function _get_variant(s, args, _l) {
  while (true) {
    let l = _l;
    if (!l) {
      return;
    }
    let match = l.hd;
    if (Caml_obj.equal(s, match[0])) {
      return match[1](args);
    }
    _l = l.tl;
    continue;
  };
}

function get_variant(l) {
  return e => {
    if (e.NAME !== "List") {
      return _get_variant(e.VAL, /* [] */0, l);
    }
    let match = e.VAL;
    if (!match) {
      return;
    }
    let match$1 = match.hd;
    if (typeof match$1 === "object" && match$1.NAME === "Atom") {
      return _get_variant(match$1.VAL, match.tl, l);
    }
    
  };
}

function get_exn(e) {
  if (e !== undefined) {
    return Caml_option.valFromOption(e);
  }
  throw Caml_js_exceptions.internalFromExtension({
    RE_EXN_ID: "Failure",
    _1: "CCSexp.Traverse.get_exn"
  });
}

let of_unit = {
  NAME: "List",
  VAL: /* [] */0
};

let Traverse = {
  map_opt: map_opt,
  list_any: list_any,
  list_all: list_all,
  to_int: to_int,
  to_string: to_string,
  to_bool: to_bool,
  to_float: to_float,
  to_list: to_list,
  to_list_with: to_list_with,
  to_pair: to_pair,
  to_pair_with: to_pair_with,
  to_triple: to_triple,
  to_triple_with: to_triple_with,
  get_field: get_field,
  field: field,
  get_variant: get_variant,
  field_list: field_list,
  $great$great$eq: $great$great$eq,
  $great$pipe$eq: $great$pipe$eq,
  $$return: $$return,
  get_exn: get_exn
};

exports.equal = equal;
exports.compare = compare;
exports.hash = hash;
exports.atom = atom;
exports.of_int = of_int;
exports.of_bool = of_bool;
exports.of_list = of_list;
exports.of_rev_list = of_rev_list;
exports.of_float = of_float;
exports.of_unit = of_unit;
exports.of_pair = of_pair;
exports.of_triple = of_triple;
exports.of_quad = of_quad;
exports.of_variant = of_variant;
exports.of_field = of_field;
exports.of_record = of_record;
exports.Traverse = Traverse;
/* No side effect */
