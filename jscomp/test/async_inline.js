// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

let React = require("react");

async function willBeInlined() {
  return 3;
}

let inlined = willBeInlined();

function wrapSomethingAsync() {
  ((async function (param) {
      let test = await Promise.resolve("Test");
      console.log(test);
    })(777));
}

function wrapSomethingAsync2() {
  ((async function () {
      let test = await Promise.resolve("Test");
      console.log(test);
    })());
}

async function doSomethingAsync(someAsyncFunction) {
  return await someAsyncFunction();
}

function broken(someAsyncFunction) {
  return doSomethingAsync(someAsyncFunction);
}

let M = {
  broken: broken
};

async function broken$1(someAsyncFunction) {
  return await someAsyncFunction();
}

function broken$2(someAsyncFunction) {
  return broken$1(someAsyncFunction);
}

function curriedId(x) {
  return x;
}

async function curriedIdAsync(x) {
  return x;
}

function uncurriedId(x) {
  return x;
}

async function uncurriedIdAsync(x) {
  return x;
}

let tci = 3;

let tcia = curriedIdAsync(3);

let tui = 3;

let tuia = uncurriedIdAsync(3);

function nested1() {
  return async function (y) {
    return await y;
  };
}

async function nested2() {
  return async function (y) {
    return await y;
  };
}

function onSubmit() {
  return React.useCallback(async function (b) {
    return await b;
  });
}

exports.willBeInlined = willBeInlined;
exports.inlined = inlined;
exports.wrapSomethingAsync = wrapSomethingAsync;
exports.wrapSomethingAsync2 = wrapSomethingAsync2;
exports.M = M;
exports.broken = broken$2;
exports.curriedId = curriedId;
exports.curriedIdAsync = curriedIdAsync;
exports.uncurriedId = uncurriedId;
exports.uncurriedIdAsync = uncurriedIdAsync;
exports.tci = tci;
exports.tcia = tcia;
exports.tui = tui;
exports.tuia = tuia;
exports.nested1 = nested1;
exports.nested2 = nested2;
exports.onSubmit = onSubmit;
/* inlined Not a pure module */
