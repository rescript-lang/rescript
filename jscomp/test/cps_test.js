// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

let Mt = require("./mt.js");
let $$Array = require("../../lib/js/array.js");
let Caml_array = require("../../lib/js/caml_array.js");

function test() {
  let v = {
    contents: 0
  };
  let f = function (_n, _acc) {
    while(true) {
      let acc = _acc;
      let n = _n;
      if (n === 0) {
        return acc();
      }
      _acc = (function () {
        v.contents = v.contents + n | 0;
        return acc();
      });
      _n = n - 1 | 0;
      continue;
    };
  };
  f(10, (function () {
    
  }));
  return v.contents;
}

function test_closure() {
  let v = {
    contents: 0
  };
  let arr = Caml_array.make(6, (function (x) {
    return x;
  }));
  for(let i = 0; i <= 5; ++i){
    Caml_array.set(arr, i, (function (param) {
      return i;
    }));
  }
  $$Array.iter((function (i) {
    v.contents = v.contents + i(0) | 0;
  }), arr);
  return v.contents;
}

function test_closure2() {
  let v = {
    contents: 0
  };
  let arr = Caml_array.make(6, (function (x) {
    return x;
  }));
  for(let i = 0; i <= 5; ++i){
    let j = i + i | 0;
    Caml_array.set(arr, i, (function (param) {
      return j;
    }));
  }
  $$Array.iter((function (i) {
    v.contents = v.contents + i(0) | 0;
  }), arr);
  return v.contents;
}

Mt.from_pair_suites("Cps_test", {
  hd: [
    "cps_test_sum",
    (function () {
      return {
        TAG: "Eq",
        _0: 55,
        _1: test()
      };
    })
  ],
  tl: {
    hd: [
      "cps_test_closure",
      (function () {
        return {
          TAG: "Eq",
          _0: 15,
          _1: test_closure()
        };
      })
    ],
    tl: {
      hd: [
        "cps_test_closure2",
        (function () {
          return {
            TAG: "Eq",
            _0: 30,
            _1: test_closure2()
          };
        })
      ],
      tl: /* [] */0
    }
  }
});

exports.test = test;
exports.test_closure = test_closure;
exports.test_closure2 = test_closure2;
/*  Not a pure module */
