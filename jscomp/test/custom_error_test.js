// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

let Js_exn = require("../../lib/js/js_exn.js");
let Caml_js_exceptions = require("../../lib/js/caml_js_exceptions.js");

function test_js_error(param) {
  let e;
  try {
    e = JSON.parse(" {\"x\" : }");
  }
  catch (raw_err){
    let err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === Js_exn.$$Error) {
      console.log(err._1.stack);
      return;
    }
    throw new Error(err.RE_EXN_ID, {
          cause: err
        });
  }
  return e;
}

function test_js_error2(param) {
  try {
    return JSON.parse(" {\"x\" : }");
  }
  catch (raw_e){
    let e = Caml_js_exceptions.internalToOCamlException(raw_e);
    if (e.RE_EXN_ID === Js_exn.$$Error) {
      console.log(e._1.stack);
      throw new Error(e.RE_EXN_ID, {
            cause: e
          });
    }
    throw new Error(e.RE_EXN_ID, {
          cause: e
        });
  }
}

function example1(param) {
  let v;
  try {
    v = JSON.parse(" {\"x\"  }");
  }
  catch (raw_err){
    let err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === Js_exn.$$Error) {
      console.log(err._1.stack);
      return;
    }
    throw new Error(err.RE_EXN_ID, {
          cause: err
        });
  }
  return v;
}

function example2(param) {
  try {
    return JSON.parse(" {\"x\"}");
  }
  catch (raw_exn){
    let exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Js_exn.$$Error) {
      return;
    }
    throw new Error(exn.RE_EXN_ID, {
          cause: exn
        });
  }
}

exports.test_js_error = test_js_error;
exports.test_js_error2 = test_js_error2;
exports.example1 = example1;
exports.example2 = example2;
/* No side effect */
