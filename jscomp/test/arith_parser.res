type token =
  | NUMERAL(float)
  | IDENT(string)
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | UMINUS
  | LPAREN
  | RPAREN
  | EOF

open Parsing
let _ = parse_error
open Arith_syntax

let yytransl_const = [
  259 /* PLUS */,
  260 /* MINUS */,
  261 /* TIMES */,
  262 /* DIVIDE */,
  263 /* UMINUS */,
  264 /* LPAREN */,
  265 /* RPAREN */,
  0 /* EOF */,
  0,
]

let yytransl_block = [257 /* NUMERAL */, 258 /* IDENT */, 0]

let yylhs = "\xff\xff\
\x01\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\
\x02\x00\x00\x00"

let yylen = "\x02\x00\
\x02\x00\x01\x00\x01\x00\x03\x00\x03\x00\x03\x00\x03\x00\x02\x00\
\x03\x00\x02\x00"

let yydefred = "\x00\x00\
\x00\x00\x00\x00\x02\x00\x03\x00\x00\x00\x00\x00\x0a\x00\x00\x00\
\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x09\x00\
\x00\x00\x00\x00\x06\x00\x07\x00"

let yydgoto = "\x02\x00\
\x07\x00\x08\x00"

let yysindex = "\xff\xff\
\x10\xff\x00\x00\x00\x00\x00\x00\x10\xff\x10\xff\x00\x00\x0a\x00\
\x00\x00\x16\xff\x10\xff\x10\xff\x10\xff\x10\xff\x00\x00\x00\x00\
\xff\xfe\xff\xfe\x00\x00\x00\x00"

let yyrindex = "\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x01\x00\x03\x00\x00\x00\x00\x00"

let yygindex = "\x00\x00\
\x00\x00\x02\x00"

let yytablesize = 272
let yytable = "\x01\x00\
\x04\x00\x00\x00\x05\x00\x0d\x00\x0e\x00\x00\x00\x09\x00\x0a\x00\
\x00\x00\x0f\x00\x00\x00\x00\x00\x11\x00\x12\x00\x13\x00\x14\x00\
\x03\x00\x04\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\
\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x00\x00\x00\x00\x10\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x04\x00\x04\x00\x05\x00\x05\x00\x00\x00\
\x00\x00\x04\x00\x00\x00\x05\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00"

let yycheck = "\x01\x00\
\x00\x00\xff\xff\x00\x00\x05\x01\x06\x01\xff\xff\x05\x00\x06\x00\
\xff\xff\x00\x00\xff\xff\xff\xff\x0b\x00\x0c\x00\x0d\x00\x0e\x00\
\x01\x01\x02\x01\xff\xff\x04\x01\xff\xff\xff\xff\xff\xff\x08\x01\
\x03\x01\x04\x01\x05\x01\x06\x01\xff\xff\xff\xff\x09\x01\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\x03\x01\x04\x01\x03\x01\x04\x01\xff\xff\
\xff\xff\x09\x01\xff\xff\x09\x01\x03\x01\x04\x01\x05\x01\x06\x01"

let yynames_const = "\
  PLUS\x00\
  MINUS\x00\
  TIMES\x00\
  DIVIDE\x00\
  UMINUS\x00\
  LPAREN\x00\
  RPAREN\x00\
  EOF\x00\
  "

let yynames_block = "\
  NUMERAL\x00\
  IDENT\x00\
  "

let yyact = [
  _ => failwith("parser"),
  __caml_parser_env => {
    let _1: 'expression = Parsing.peek_val(__caml_parser_env, 1)
    Obj.repr((_1: Arith_syntax.expression))
  },
  __caml_parser_env => {
    let _1: float = Parsing.peek_val(__caml_parser_env, 0)
    Obj.repr((Numeral(_1): 'expression))
  },
  __caml_parser_env => {
    let _1: string = Parsing.peek_val(__caml_parser_env, 0)
    Obj.repr((Variable(_1): 'expression))
  },
  __caml_parser_env => {
    let _1: 'expression = Parsing.peek_val(__caml_parser_env, 2)
    let _3: 'expression = Parsing.peek_val(__caml_parser_env, 0)
    Obj.repr((Plus(_1, _3): 'expression))
  },
  __caml_parser_env => {
    let _1: 'expression = Parsing.peek_val(__caml_parser_env, 2)
    let _3: 'expression = Parsing.peek_val(__caml_parser_env, 0)
    Obj.repr((Minus(_1, _3): 'expression))
  },
  __caml_parser_env => {
    let _1: 'expression = Parsing.peek_val(__caml_parser_env, 2)
    let _3: 'expression = Parsing.peek_val(__caml_parser_env, 0)
    Obj.repr((Times(_1, _3): 'expression))
  },
  __caml_parser_env => {
    let _1: 'expression = Parsing.peek_val(__caml_parser_env, 2)
    let _3: 'expression = Parsing.peek_val(__caml_parser_env, 0)
    Obj.repr((Divide(_1, _3): 'expression))
  },
  __caml_parser_env => {
    let _2: 'expression = Parsing.peek_val(__caml_parser_env, 0)
    Obj.repr((Negate(_2): 'expression))
  },
  __caml_parser_env => {
    let _2: 'expression = Parsing.peek_val(__caml_parser_env, 1)
    Obj.repr((_2: 'expression))
  },
  /* Entry toplevel */
  __caml_parser_env => raise(Parsing.YYexit(Parsing.peek_val(__caml_parser_env, 0))),
]
let yytables = {
  Parsing.actions: yyact,
  Parsing.transl_const: yytransl_const,
  Parsing.transl_block: yytransl_block,
  Parsing.lhs: yylhs,
  Parsing.len: yylen,
  Parsing.defred: yydefred,
  Parsing.dgoto: yydgoto,
  Parsing.sindex: yysindex,
  Parsing.rindex: yyrindex,
  Parsing.gindex: yygindex,
  Parsing.tablesize: yytablesize,
  Parsing.table: yytable,
  Parsing.check: yycheck,
  Parsing.error_function: parse_error,
  Parsing.names_const: yynames_const,
  Parsing.names_block: yynames_block,
}
let toplevel = (lexfun: Lexing.lexbuf => token, lexbuf: Lexing.lexbuf): Arith_syntax.expression =>
  Parsing.yyparse(yytables, 1, lexfun, lexbuf)
