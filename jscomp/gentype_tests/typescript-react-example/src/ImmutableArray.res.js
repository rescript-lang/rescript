// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "rescript/lib/es6/belt_Array.js";

function fromArray(a) {
  return a.slice(0);
}

function toArray(a) {
  return a.slice(0);
}

function length(a) {
  return a.length;
}

function size(a) {
  return a.length;
}

let get = Belt_Array.get;

let getExn = Belt_Array.getExn;

function getUnsafe(a, x) {
  return a[x];
}

function getUndefined(a, x) {
  return a[x];
}

let shuffle = Belt_Array.shuffle;

let reverse = Belt_Array.reverse;

function makeUninitialized(x) {
  return new Array(x);
}

function makeUninitializedUnsafe(x) {
  return new Array(x);
}

let make = Belt_Array.make;

let range = Belt_Array.range;

let rangeBy = Belt_Array.rangeBy;

let makeByU = Belt_Array.makeByU;

let makeBy = Belt_Array.makeBy;

let makeByAndShuffleU = Belt_Array.makeByAndShuffleU;

let makeByAndShuffle = Belt_Array.makeByAndShuffle;

let zip = Belt_Array.zip;

let zipByU = Belt_Array.zipByU;

let zipBy = Belt_Array.zipBy;

let unzip = Belt_Array.unzip;

let concat = Belt_Array.concat;

let concatMany = Belt_Array.concatMany;

let slice = Belt_Array.slice;

let sliceToEnd = Belt_Array.sliceToEnd;

function copy(a) {
  return a.slice(0);
}

let forEachU = Belt_Array.forEachU;

let forEach = Belt_Array.forEach;

let mapU = Belt_Array.mapU;

let map = Belt_Array.map;

let keepWithIndexU = Belt_Array.keepWithIndexU;

let keepWithIndex = Belt_Array.keepWithIndex;

let keepMapU = Belt_Array.keepMapU;

let keepMap = Belt_Array.keepMap;

let forEachWithIndexU = Belt_Array.forEachWithIndexU;

let forEachWithIndex = Belt_Array.forEachWithIndex;

let mapWithIndexU = Belt_Array.mapWithIndexU;

let mapWithIndex = Belt_Array.mapWithIndex;

let partitionU = Belt_Array.partitionU;

let partition = Belt_Array.partition;

let reduceU = Belt_Array.reduceU;

let reduce = Belt_Array.reduce;

let reduceReverseU = Belt_Array.reduceReverseU;

let reduceReverse = Belt_Array.reduceReverse;

let reduceReverse2U = Belt_Array.reduceReverse2U;

let reduceReverse2 = Belt_Array.reduceReverse2;

let someU = Belt_Array.someU;

let some = Belt_Array.some;

let everyU = Belt_Array.everyU;

let every = Belt_Array.every;

let every2U = Belt_Array.every2U;

let every2 = Belt_Array.every2;

let some2U = Belt_Array.some2U;

let some2 = Belt_Array.some2;

let cmpU = Belt_Array.cmpU;

let cmp = Belt_Array.cmp;

let eqU = Belt_Array.eqU;

let eq = Belt_Array.eq;

let $$Array$1 = {
  get: get
};

export {
  $$Array$1 as $$Array,
  fromArray,
  toArray,
  length,
  size,
  get,
  getExn,
  getUnsafe,
  getUndefined,
  shuffle,
  reverse,
  makeUninitialized,
  makeUninitializedUnsafe,
  make,
  range,
  rangeBy,
  makeByU,
  makeBy,
  makeByAndShuffleU,
  makeByAndShuffle,
  zip,
  zipByU,
  zipBy,
  unzip,
  concat,
  concatMany,
  slice,
  sliceToEnd,
  copy,
  forEachU,
  forEach,
  mapU,
  map,
  keepWithIndexU,
  keepWithIndex,
  keepMapU,
  keepMap,
  forEachWithIndexU,
  forEachWithIndex,
  mapWithIndexU,
  mapWithIndex,
  partitionU,
  partition,
  reduceU,
  reduce,
  reduceReverseU,
  reduceReverse,
  reduceReverse2U,
  reduceReverse2,
  someU,
  some,
  everyU,
  every,
  every2U,
  every2,
  some2U,
  some2,
  cmpU,
  cmp,
  eqU,
  eq,
}
/* No side effect */
