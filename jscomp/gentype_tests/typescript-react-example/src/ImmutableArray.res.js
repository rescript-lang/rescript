// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "rescript/lib/es6/belt_Array.js";

function fromArray(a) {
  return a.slice(0);
}

function toArray(a) {
  return a.slice(0);
}

function length(a) {
  return a.length;
}

function size(a) {
  return a.length;
}

function get(a, x) {
  return Belt_Array.get(a, x);
}

function getExn(a, x) {
  return Belt_Array.getExn(a, x);
}

function getUnsafe(a, x) {
  return a[x];
}

function getUndefined(a, x) {
  return a[x];
}

function shuffle(x) {
  return Belt_Array.shuffle(x);
}

function reverse(x) {
  return Belt_Array.reverse(x);
}

function makeUninitialized(x) {
  return new Array(x);
}

function makeUninitializedUnsafe(x) {
  return new Array(x);
}

function make(x, y) {
  return Belt_Array.make(x, y);
}

function range(x, y) {
  return Belt_Array.range(x, y);
}

function rangeBy(x, y, step) {
  return Belt_Array.rangeBy(x, y, step);
}

function makeByU(c, f) {
  return Belt_Array.makeByU(c, f);
}

function makeBy(c, f) {
  return Belt_Array.makeBy(c, (function (x) {
    return f(x);
  }));
}

function makeByAndShuffleU(c, f) {
  return Belt_Array.makeByAndShuffleU(c, f);
}

function makeByAndShuffle(c, f) {
  return Belt_Array.makeByAndShuffle(c, (function (x) {
    return f(x);
  }));
}

function zip(a1, a2) {
  return Belt_Array.zip(a1, a2);
}

function zipByU(a1, a2, f) {
  return Belt_Array.zipByU(a1, a2, f);
}

function zipBy(a1, a2, f) {
  return Belt_Array.zipBy(a1, a2, (function (x, y) {
    return f(x, y);
  }));
}

function unzip(a) {
  return Belt_Array.unzip(a);
}

function concat(a1, a2) {
  return Belt_Array.concat(a1, a2);
}

function concatMany(a) {
  return Belt_Array.concatMany(a);
}

function slice(a, offset, len) {
  return Belt_Array.slice(a, offset, len);
}

function sliceToEnd(a, b) {
  return Belt_Array.sliceToEnd(a, b);
}

function copy(a) {
  return a.slice(0);
}

function forEachU(a, f) {
  Belt_Array.forEachU(a, f);
}

function forEach(a, f) {
  Belt_Array.forEach(a, (function (x) {
    f(x);
  }));
}

function mapU(a, f) {
  return Belt_Array.mapU(a, f);
}

function map(a, f) {
  return Belt_Array.map(a, (function (x) {
    return f(x);
  }));
}

function keepWithIndexU(a, f) {
  return Belt_Array.keepWithIndexU(a, f);
}

function keepWithIndex(a, f) {
  return Belt_Array.keepWithIndex(a, (function (x, y) {
    return f(x, y);
  }));
}

function keepMapU(a, f) {
  return Belt_Array.keepMapU(a, f);
}

function keepMap(a, f) {
  return Belt_Array.keepMap(a, (function (x) {
    return f(x);
  }));
}

function forEachWithIndexU(a, f) {
  Belt_Array.forEachWithIndexU(a, f);
}

function forEachWithIndex(a, f) {
  Belt_Array.forEachWithIndex(a, (function (x, y) {
    f(x, y);
  }));
}

function mapWithIndexU(a, f) {
  return Belt_Array.mapWithIndexU(a, f);
}

function mapWithIndex(a, f) {
  return Belt_Array.mapWithIndex(a, (function (x, y) {
    return f(x, y);
  }));
}

function partitionU(a, f) {
  return Belt_Array.partitionU(a, f);
}

function partition(a, f) {
  return Belt_Array.partition(a, (function (x) {
    return f(x);
  }));
}

function reduceU(a, b, f) {
  return Belt_Array.reduceU(a, b, f);
}

function reduce(a, b, f) {
  return Belt_Array.reduce(a, b, (function (x, y) {
    return f(x, y);
  }));
}

function reduceReverseU(a, b, f) {
  return Belt_Array.reduceReverseU(a, b, f);
}

function reduceReverse(a, b, f) {
  return Belt_Array.reduceReverse(a, b, (function (x, y) {
    return f(x, y);
  }));
}

function reduceReverse2U(a1, a2, c, f) {
  return Belt_Array.reduceReverse2U(a1, a2, c, f);
}

function reduceReverse2(a1, a2, c, f) {
  return Belt_Array.reduceReverse2(a1, a2, c, (function (x, y, z) {
    return f(x, y, z);
  }));
}

function someU(a, f) {
  return Belt_Array.someU(a, f);
}

function some(a, f) {
  return Belt_Array.some(a, (function (x) {
    return f(x);
  }));
}

function everyU(a, f) {
  return Belt_Array.everyU(a, f);
}

function every(a, f) {
  return Belt_Array.every(a, (function (x) {
    return f(x);
  }));
}

function every2U(a1, a2, f) {
  return Belt_Array.every2U(a1, a2, f);
}

function every2(a1, a2, f) {
  return Belt_Array.every2(a1, a2, (function (x, y) {
    return f(x, y);
  }));
}

function some2U(a1, a2, f) {
  return Belt_Array.some2U(a1, a2, f);
}

function some2(a1, a2, f) {
  return Belt_Array.some2(a1, a2, (function (x, y) {
    return f(x, y);
  }));
}

function cmpU(a1, a2, f) {
  return Belt_Array.cmpU(a1, a2, f);
}

function cmp(a1, a2, f) {
  return Belt_Array.cmp(a1, a2, (function (x, y) {
    return f(x, y);
  }));
}

function eqU(a1, a2, f) {
  return Belt_Array.eqU(a1, a2, f);
}

function eq(a1, a2, f) {
  return Belt_Array.eq(a1, a2, (function (x, y) {
    return f(x, y);
  }));
}

let $$Array$1 = {
  get: get
};

export {
  $$Array$1 as $$Array,
  fromArray,
  toArray,
  length,
  size,
  get,
  getExn,
  getUnsafe,
  getUndefined,
  shuffle,
  reverse,
  makeUninitialized,
  makeUninitializedUnsafe,
  make,
  range,
  rangeBy,
  makeByU,
  makeBy,
  makeByAndShuffleU,
  makeByAndShuffle,
  zip,
  zipByU,
  zipBy,
  unzip,
  concat,
  concatMany,
  slice,
  sliceToEnd,
  copy,
  forEachU,
  forEach,
  mapU,
  map,
  keepWithIndexU,
  keepWithIndex,
  keepMapU,
  keepMap,
  forEachWithIndexU,
  forEachWithIndex,
  mapWithIndexU,
  mapWithIndex,
  partitionU,
  partition,
  reduceU,
  reduce,
  reduceReverseU,
  reduceReverse,
  reduceReverse2U,
  reduceReverse2,
  someU,
  some,
  everyU,
  every,
  every2U,
  every2,
  some2U,
  some2,
  cmpU,
  cmp,
  eqU,
  eq,
}
/* No side effect */
