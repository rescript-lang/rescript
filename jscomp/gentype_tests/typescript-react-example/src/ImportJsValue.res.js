// Generated by ReScript, PLEASE EDIT WITH CARE

import ImportJsValueGen from "./ImportJsValue.gen";
import * as ImportJsValueGen$1 from "./ImportJsValue.gen";

function round(prim) {
  return ImportJsValueGen$1.round(prim);
}

function round2(prim) {
  return ImportJsValueGen$1.round2(prim);
}

function area(prim) {
  return ImportJsValueGen$1.area(prim);
}

function returnMixedArray(prim) {
  return ImportJsValueGen$1.returnMixedArray();
}

let roundedNumber = ImportJsValueGen$1.round(1.8);

let areaValue = ImportJsValueGen$1.area({
  x: 3,
  y: undefined
});

function getAbs(x) {
  let getAbs$1 = x.getAbs;
  return getAbs$1();
}

let AbsoluteValue = {
  getAbs: getAbs
};

function useGetProp(x) {
  return x.getProp() + 1 | 0;
}

function useGetAbs(x) {
  return getAbs(x) + 1 | 0;
}

function useColor(prim) {
  return ImportJsValueGen$1.useColor(prim);
}

function higherOrder(prim) {
  return ImportJsValueGen$1.higherOrder(prim);
}

let returnedFromHigherOrder = ImportJsValueGen$1.higherOrder((prim0, prim1) => prim0 + prim1 | 0);

function convertVariant(prim) {
  return ImportJsValueGen$1.convertVariant(prim);
}

function polymorphic(prim) {
  return ImportJsValueGen$1.polymorphic(prim);
}

let $$default = ImportJsValueGen;

export {
  round,
  round2,
  area,
  returnMixedArray,
  roundedNumber,
  areaValue,
  AbsoluteValue,
  useGetProp,
  useGetAbs,
  useColor,
  higherOrder,
  returnedFromHigherOrder,
  convertVariant,
  polymorphic,
  $$default as default,
}
/* roundedNumber Not a pure module */
