let a = 1
let a = 1[@@onFirstBinding ]
let a = 1[@@onFirstBinding ]
and b = 2[@@onSecondBinding ]
let f : type t. t foo =
  ((Function$
      (fun sideEffect ->
         ((let module M = struct exception E of t  end in
             sideEffect (); ((Function$ ((fun x -> M.E x)))[@res.arity 1]))
         [@res.braces ])))
  [@res.arity 1])
let f : type t x u. (t * x * y) list = ((Function$ (fun l -> f l))
  [@res.arity 1])