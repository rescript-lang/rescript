let [%patternExtension ] = ()
let [%pattern.extension ] = ()
let [%raw {js|x|js}] = ()
let ([%raw {js|x|js}] : unit) = ()
let [%raw {js|x|js}] as y = ()
let [%patExt1 ]|[%patExt2 ] = ()
;;match x with
  | [%patternExtension ] -> ()
  | [%pattern.extension ] -> ()
  | [%pat.stuff test] -> ()
  | [%pat.stuff test] as _x -> ()
  | ([%pat.stuff test] : unit) -> ()
  | [%patExt1 ]|[%patExt2 ] -> ()
let f = ((Function$ (fun [%patternExtension ] -> ()))[@res.arity 1])
let f = ((Function$ (fun [%pattern.extension ] -> ()))[@res.arity 1])
let f = ((Function$ (fun [%raw {js|x|js}] -> ()))[@res.arity 1])
let f = ((Function$ (fun [%raw {js|x|js}] -> fun [%raw {js|y|js}] -> ()))
  [@res.arity 2])
let f = ((Function$ (fun ([%raw {js|x|js}] as _y) -> ()))[@res.arity 1])
let f = ((Function$ (fun ([%raw {js|x|js}] : unit) -> ()))[@res.arity 1])
let f = ((Function$ (fun ([%patExt1 ]|[%patExt2 ]) -> ()))[@res.arity 1])
;;for [%ext ] = x to y do () done
;;for [%ext1 ]|[%ext2 ] = x to y do () done
;;for [%ext ] = x to y do () done
;;for [%ext ] as e = x to y do () done
;;for [%ext.pattern ] = x to y do () done
;;for [%ext.pattern ] as e = x to y do () done
;;for [%ext.pattern ] = x to y do () done
;;for [%ext.pattern ] as e = x to y do () done
;;for [%ext.pattern payload] = x to y do () done
;;for [%ext.pattern payload] as e = x to y do () done
;;for [%ext.pattern payload] = x to y do () done
;;for [%ext.pattern payload] as e = x to y do () done
;;for [%ext.pattern payload] as e|[%ext2 ] as bar = x to y do () done