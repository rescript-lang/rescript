;;((wait 2)[@res.await ][@res.uapp ])
let maybeSomeValue =
  match ((fetchData url)[@res.await ][@res.uapp ]) with
  | data -> Some data
  | exception JsError _ -> None
let x = ((1)[@res.await ]) + 2
let x =
  ((wait 1)[@res.await ][@res.uapp ]) + ((wait 2)[@res.await ][@res.uapp ])
let () =
  ((let response = ((fetch {js|/users.json|js})[@res.await ][@res.uapp ]) in
    let users = ((response.json ())[@res.await ][@res.uapp ]) in
    let comments =
      ((((fetch {js|comment.json|js})[@res.await ][@res.uapp ]).json ())
      [@res.await ][@res.uapp ]).(0) in
    ((Js.log2 users comments)[@res.uapp ]))
  [@res.braces ])
let () = ((delay 10)[@res.braces ][@res.await ][@res.uapp ])
let () =
  ((((delay 10)
    [@res.await ][@res.uapp ]);
    ((delay 20)
    [@res.await ][@res.uapp ]))
  [@res.braces ])
let forEach = ((Js.Import Belt.List.forEach)[@res.await ][@a ][@b ])
module M = ((Belt.List)[@res.await ][@a ][@b ])
let f =
  ((Function$
      (fun () ->
         ((let module M = ((Belt.List)[@res.await ][@a ][@b ]) in M.forEach)
         [@res.braces ])))
  [@res.arity 1])
let () = ((let module M = ((Belt.List)[@res.await ][@a ][@b ]) in M.forEach)
  [@res.braces ])
module type BeltList  = module type of Belt.List
let f =
  ((Function$
      (fun () ->
         ((let module M = (((Belt.List : BeltList))[@res.await ][@a ]
             [@b ]) in M.forEach)
         [@res.braces ])))
  [@res.arity 1])
let () =
  ((let module M = (((Belt.List : BeltList))[@res.await ][@a ][@b ]) in
      M.forEach)
  [@res.braces ])