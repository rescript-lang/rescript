let makeSet (type s) =
  ((Function$
      (fun cmp ->
         ((let module S =
             (Set.Make)(struct type nonrec t = s
                               let compare = cmp end) in ((module
             S) : (module Set.S with type elt = s)))
         [@res.braces ])))
  [@res.arity 1])
let three = ((module Three) : (module X_int))
let numbers = [|three;(module Four)|]
let numbers = (three, (module Four))
let numbers = [three; (module Four)]
let numbers = [|three;(module struct let x = 4 end)|]
let numbers = (three, (module struct let x = 4 end))
let numbers = [three; (module struct let x = 4 end)]
let plus =
  ((Function$
      (fun m1 ->
         fun m2 -> ((((module
           struct let x = (to_int m1) + (to_int m2) end) : (module X_int)))
           [@res.braces ])))
  [@res.arity 2])
let plus =
  ((Function$
      (fun m1 ->
         fun m2 -> ((module
           struct let x = (to_int m1) + (to_int m2) end) : (module X_int))))
  [@res.arity 2])
let unique_instance = ((module
  struct module Query_handler = Unique
         let this = Unique.create 0 end) : (module Query_handler_instance))
let build_instance (type a) =
  ((Function$
      (fun ((module Q)  : (module Query_handler with type config = a)) ->
         fun config -> ((module
           struct module Query_handler = Q
                  let this = Q.create config end) : (module
                                                      Query_handler_instance))))
  [@res.arity 2])
let build_instance (type a) =
  ((Function$
      (fun ((module Q)  : (module Query_handler with type config = a)) ->
         fun config -> ((((module
           struct module Query_handler = Q
                  let this = Q.create config end) : (module
                                                      Query_handler_instance)))
           [@res.braces ])))
  [@res.arity 2])
let unique_instance = build_instance (module Unique) 0
let build_dispatch_table =
  ((Function$
      (fun handlers ->
         ((let table = Hashtbl.create (module String) in
           List.iter handlers
             ~f:((Function$
                    (fun
                       (((module I)  : (module Query_handler_instance)) as
                          instance)
                       ->
                       Hashtbl.set table ~key:((I.Query_handler.name)
                         [@res.namedArgLoc ]) ~data:((instance)
                         [@res.namedArgLoc ])))
             [@res.namedArgLoc ][@res.arity 1]) table)
         [@res.braces ])))
  [@res.arity 1])
;;(module Three)
;;((module Three) : (module X_int))
;;(module Teenager).(0)
;;((module Teenager) |.u age) |.u Js.log
;;((module Teenager).(0)) |.u Js.log
;;((if ((module Teenager) |.u age) |.u isAdult
    then Js.log {js|has responsibilities|js}
    else Js.log {js|can play in the playground|js})[@res.ternary ])
;;((if ((module Streets).(0)) |.u isExpensive
    then Js.log {js|big money|js}
    else Js.log {js|affordable|js})[@res.ternary ])
let () = ((((module Teenager) |.u age) |.u Js.log)[@res.braces ])
let () = (((module Teenager).(0))[@res.braces ])
let () =
  ((if ((module Teenager) |.u age) |.u isAdult
    then Js.log {js|has responsibilities|js}
    else Js.log {js|can play in the playground|js})
  [@res.braces ][@res.ternary ])
let () =
  ((if ((module Streets).(0)) |.u isExpensive
    then Js.log {js|big money|js}
    else Js.log {js|affordable|js})
  [@res.braces ][@res.ternary ])
let () =
  ((let a = 1 in
    let b = 2 in
    (module Teenager).(0); ((module Teenager) |.u age) |.u Js.log)
  [@res.braces ])
let () =
  ((let a = 1 in
    let b = 2 in
    ((module Teenager) |.u age) |.u Js.log;
    ((if (((module Teenager).(0)) |.u age) |.u isAdult
      then Js.log {js|has responsibilities|js}
      else Js.log {js|can play in the playground|js})
    [@res.ternary ]))
  [@res.braces ])