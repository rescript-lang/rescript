
  Syntax error!
  tests/parsing/recovery/expression/jsx.res:1:14

  1 │ let x = <div @ @@@ />
  2 │ 
  3 │ let x = <Component prop1= prop2="value2" prop3=<C /> {...props} props=mo
    │ dule(Foo) />

  I'm not sure what to parse here when looking at "@".


  Syntax error!
  tests/parsing/recovery/expression/jsx.res:3:25

  1 │ let x = <div @ @@@ />
  2 │ 
  3 │ let x = <Component prop1= prop2="value2" prop3=<C /> {...props} props=mo
    │ dule(Foo) />
  4 │ 
  5 │ let x = <Component ?prop0 prop1=[1,2,3] prop2= prop3={value3} prop4=?val
    │ ue4 />

  I'm not sure what to parse here when looking at "=".


  Syntax error!
  tests/parsing/recovery/expression/jsx.res:5:46

  3 │ let x = <Component prop1= prop2="value2" prop3=<C /> {...props} props=mo
    │ dule(Foo) />
  4 │ 
  5 │ let x = <Component ?prop0 prop1=[1,2,3] prop2= prop3={value3} prop4=?val
    │ ue4 />
  6 │ 
  7 │ let x = <Component prop1=value1 prop2="value2" prop3=<C /> {...props} pr
    │ ops4= />

  I'm not sure what to parse here when looking at "=".


  Syntax error!
  tests/parsing/recovery/expression/jsx.res:7:77

  5 │ let x = <Component ?prop0 prop1=[1,2,3] prop2= prop3={value3} prop4=?val
    │ ue4 />
  6 │ 
  7 │ let x = <Component prop1=value1 prop2="value2" prop3=<C /> {...props} pr
    │ ops4= />
  8 │ 
  9 │ let x = <Component className=Styles.something prop2={v => {f(v + 1)}} pr
    │ op1= prop3=1 />

  I'm not sure what to parse here when looking at "=".


  Syntax error!
  tests/parsing/recovery/expression/jsx.res:9:76

   7 │ let x = <Component prop1=value1 prop2="value2" prop3=<C /> {...props} p
     │ rops4= />
   8 │ 
   9 │ let x = <Component className=Styles.something prop2={v => {f(v + 1)}} p
     │ rop1= prop3=1 />
  10 │ 
  11 │ let x = 

  I'm not sure what to parse here when looking at "=".


  Syntax error!
  tests/parsing/recovery/expression/jsx.res:12:10

  10 │ 
  11 │ let x = 
  12 │   <a prop= href={j`https://$txExplererUrl/tx/$txHash`} target="_blank" 
     │ rel="noopener noreferrer">
  13 │     {("View the transaction on " ++ txExplererUrl)->restr}
  14 │   </a>

  I'm not sure what to parse here when looking at "=".

let x = ((div ~children:[] ())[@JSX ])
[@@@ ]
;;[%rescript.exprhole ][@@ ]
let x =
  ((Component.createElement ~prop1:(([%rescript.exprhole ])
      [@res.namedArgLoc ]) ~prop2:(({js|value2|js})[@res.namedArgLoc ])
      ~prop3:((C.createElement ~children:[] ())[@res.namedArgLoc ][@JSX ])
      ~_spreadProps:((props)[@res.namedArgLoc ]) ~props:(((module Foo))
      [@res.namedArgLoc ]) ~children:[] ())
  [@JSX ])
let x =
  ((Component.createElement ?prop0:((prop0)[@res.namedArgLoc ])
      ~prop1:(([|1;2;3|])[@res.namedArgLoc ]) ~prop2:(([%rescript.exprhole ])
      [@res.namedArgLoc ]) ~prop3:((value3)[@res.namedArgLoc ][@res.braces ])
      ?prop4:((value4)[@res.namedArgLoc ]) ~children:[] ())
  [@JSX ])
let x =
  ((Component.createElement ~prop1:((value1)[@res.namedArgLoc ])
      ~prop2:(({js|value2|js})[@res.namedArgLoc ])
      ~prop3:((C.createElement ~children:[] ())[@res.namedArgLoc ][@JSX ])
      ~_spreadProps:((props)[@res.namedArgLoc ])
      ~props4:(([%rescript.exprhole ])[@res.namedArgLoc ]) ~children:[] ())
  [@JSX ])
let x =
  ((Component.createElement ~className:((Styles.something)
      [@res.namedArgLoc ]) ~prop2:((fun v -> ((f (v + 1))[@res.braces ]))
      [@res.namedArgLoc ][@res.braces ]) ~prop1:(([%rescript.exprhole ])
      [@res.namedArgLoc ]) ~prop3:((1)[@res.namedArgLoc ]) ~children:[] ())
  [@JSX ])
let x =
  ((a ~prop:(([%rescript.exprhole ])[@res.namedArgLoc ])
      ~href:(({j|https://$txExplererUrl/tx/$txHash|j})
      [@res.namedArgLoc ][@res.braces ][@res.template ])
      ~target:(({js|_blank|js})[@res.namedArgLoc ])
      ~rel:(({js|noopener noreferrer|js})[@res.namedArgLoc ])
      ~children:[((({js|View the transaction on |js} ^ txExplererUrl) |.
                     restr)
                [@res.braces ])] ())
  [@JSX ])