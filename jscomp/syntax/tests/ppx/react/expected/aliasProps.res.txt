@@jsxConfig({version: 4, mode: "automatic"})

module C0 = {
  type props<'priority, 'text> = {priority: 'priority, text?: 'text}

  let make = ({priority: _, text: ?text__, _}: props<_, _>) => {
    let text = switch text__ {
    | Some(text) => text
    | None => "Test"
    }

    React.string(text)
  }
  let make = {
    let \"AliasProps$C0" = (props: props<_>) => make(props)

    \"AliasProps$C0"
  }
}

module C1 = {
  type props<'priority, 'text> = {priority: 'priority, text?: 'text}

  let make = ({priority: p, text: ?text__, _}: props<_, _>) => {
    let text = switch text__ {
    | Some(text) => text
    | None => "Test"
    }

    React.string(p ++ text)
  }
  let make = {
    let \"AliasProps$C1" = (props: props<_>) => make(props)

    \"AliasProps$C1"
  }
}

module C2 = {
  type props<'foo> = {foo?: 'foo}

  let make = ({foo: ?bar__, _}: props<_>) => {
    let bar = switch bar__ {
    | Some(foo) => foo
    | None => ""
    }

    React.string(bar)
  }
  let make = {
    let \"AliasProps$C2" = (props: props<_>) => make(props)

    \"AliasProps$C2"
  }
}

module C3 = {
  type props<'foo, 'a, 'b> = {foo?: 'foo, a?: 'a, b: 'b}

  let make = ({foo: ?bar__, a: ?a__, b, _}: props<_, _, _>) => {
    let bar = switch bar__ {
    | Some(foo) => foo
    | None => ""
    }
    let a = switch a__ {
    | Some(a) => a
    | None => bar
    }

    {
      React.string(bar ++ a ++ b)
    }
  }
  let make = {
    let \"AliasProps$C3" = (props: props<_>) => make(props)

    \"AliasProps$C3"
  }
}

module C4 = {
  type props<'a, 'x> = {a: 'a, x?: 'x}

  let make = ({a: b, x: ?x__, _}: props<_, _>) => {
    let x = switch x__ {
    | Some(x) => x
    | None => true
    }

    ReactDOM.jsx("div", {children: ?ReactDOM.someElement(b)})
  }
  let make = {
    let \"AliasProps$C4" = (props: props<_>) => make(props)

    \"AliasProps$C4"
  }
}

module C5 = {
  type props<'a, 'z> = {a: 'a, z?: 'z}

  let make = ({a: (x, y), z: ?z__, _}: props<_, _>) => {
    let z = switch z__ {
    | Some(z) => z
    | None => 3
    }

    x + y + z
  }
  let make = {
    let \"AliasProps$C5" = (props: props<_>) => make(props)

    \"AliasProps$C5"
  }
}

module C6 = {
  module type Comp = {
    type props = {}

    let make: React.componentLike<props, React.element>
  }
  type props<'comp, 'x> = {comp: 'comp, x: 'x}

  let make = ({comp: module(Comp: Comp), x: (a, b), _}: props<_, _>) => React.jsx(Comp.make, {})
  let make = {
    let \"AliasProps$C6" = (props: props<_>) => make(props)

    \"AliasProps$C6"
  }
}
