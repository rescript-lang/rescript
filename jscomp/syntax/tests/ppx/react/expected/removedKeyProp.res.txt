@@jsxConfig({version: 4, mode: "classic"})

module Foo = {
  type props<'x, 'y> = {x: 'x, y: 'y}

  let make = ({x, y, _}: props<_, _>) => React.string(x ++ y)
  let make = {
    let \"RemovedKeyProp$Foo" = React.component((props: props<_>) => make(props))

    \"RemovedKeyProp$Foo"
  }
}

module HasChildren = {
  type props<'children> = {children: 'children}

  let make = ({children, _}: props<_>) => React.createElement(React.fragment, {children: children})
  let make = {
    let \"RemovedKeyProp$HasChildren" = React.component((props: props<_>) => make(props))

    \"RemovedKeyProp$HasChildren"
  }
}
type props = {}

let make = (_: props) =>
  React.createElementVariadic(
    React.fragment,
    {},
    [
      JsxPPXReactSupport.createElementWithKey(~key="k", Foo.make, {x: "x", y: "y"}),
      React.createElement(Foo.make, {x: "x", y: "y"}),
      JsxPPXReactSupport.createElementWithKey(
        ~key="k",
        HasChildren.make,
        {
          children: React.createElement(Foo.make, {x: "x", y: "y"}),
        },
      ),
      React.createElement(
        HasChildren.make,
        {
          children: React.createElement(Foo.make, {x: "x", y: "y"}),
        },
      ),
    ],
  )
let make = {
  let \"RemovedKeyProp" = React.component(props => make(props))

  \"RemovedKeyProp"
}
